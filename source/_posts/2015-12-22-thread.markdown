---
layout: post
title: "iOS中的多线程"
date: 2015-12-22 14:28:22 +0800
comments: true
categories: iOS
---
1.什么是进程

进程是指在系统中正在运行的一个应用程序，每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。
![image](/myimg/ios/jincheng.png)<!--more-->

2.什么是线程

进程要想执行任务必须通过线程来执行，1个进程至少会有1条线程(主线程)，进程的所有任务都在线程中执行。
![image](/myimg/ios/xiancheng.png)

线程中任务的执行是按顺序执行的，后面的任务要等前面的任务执行完了才能执行。但1个进程里可以开启多个线程来同时执行不同的任务，可以提高任务的执行效率。
![image](/myimg/ios/duox.png)

iOS中每个进程都会有一个主线程(UI线程)，**只能在主线程中更新UI**。如果在这个主线程里做了过多的耗时操作，就会造成UI卡顿，所以用多线程来处理耗时操作。常用的开启多线程方式有三种：NSThread, NSOperation, GCD。

### *NSThread

NSThread是轻量级的多线程开发，用起来也不复杂。

初始化方法
```
+ (void)detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(nullable id)argument;
- (instancetype)initWithTarget:(id)target selector:(SEL)selector object:(nullable id)argument;
```
其他方法
```
- (void)start;//启动一个线程，并非立即执行，而是处于就绪状态，当系统调度时才真正执行
- (void)cancel;//取消
+ (BOOL)isMainThread;//当前线程是不是主线程
+ (NSThread *)mainThread //获取主线程
+ (NSThread *)currentThread;//返回当前线程
+ (BOOL)isMultiThreaded;//是不是多线程
+ (void)sleepUntilDate:(NSDate *)date;//休眠
+ (void)sleepForTimeInterval:(NSTimeInterval)ti;//休眠
+ (void)exit;//退出
+ (double)threadPriority;//优先级
+ (BOOL)setThreadPriority:(double)p;//设置优先级 0~1
- (BOOL)isExecuting;//正在执行
- (BOOL)isFinished;//执行完毕
- (BOOL)isCancelled;//已经取消
```
在子线程里要调用主线程来更新UI,可以用NSObject类别中的 OnMainThread 方法(前两个)。
```
@interface NSObject (NSThreadPerformAdditions)
- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait modes:(nullable NSArray<NSString *> *)array;
- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait;
- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(nullable id)arg waitUntilDone:(BOOL)wait modes:(nullable NSArray<NSString *> *)array ;
- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(nullable id)arg waitUntilDone:(BOOL)wait ;
- (void)performSelectorInBackground:(SEL)aSelector withObject:(nullable id)arg ;
@end
```
按顺序启动（start）的线程不一定是按顺序执行，由系统调度资源决定的，同样的代码多运行几次顺序就不一样了。
![image](/myimg/ios/shunxv.png)
![image](/myimg/ios/shunxv2.png)

### *NSOperation
NSOperation是个抽象类，使用的话要**继承它然后实现main方法**。但它有两个现成子类：NSInvocationOperation和NSBlockOperation，后者使用Block形式进行代码组织，使用相对方便。

NSOperation要和NSOperationQueue一起使用，只要将一个NSOperation子类对象
放到NSOperationQueue队列中，线程就会依次启动。NSOperationQueue负责管理、执行所有的NSOperation，可以更加容易的管理线程总数和控制线程之间的依赖关系。可以通过监听**isFinished**属性来得到线程执行完毕通知。

NSOperation类中的方法

```
- (void)start;
- (void)cancel;
- (void)main;//继承后要实现具体操作
- (void)addDependency:(NSOperation *)op;//添加线程间的依赖关系，A依赖B，所以要B先执行完再执行A(切记不要循环依赖...)
- (void)removeDependency:(NSOperation *)op;//移除依赖关系
- (void)waitUntilFinished;
```
几个属性
```
@property (readonly, getter=isCancelled) BOOL cancelled;
@property (readonly, getter=isExecuting) BOOL executing;
@property (readonly, getter=isFinished) BOOL finished;
@property (readonly, getter=isConcurrent) BOOL concurrent;//已经弃用，用下面的'asynchronous'
@property (readonly, getter=isAsynchronous) BOOL asynchronous;//是否异步执行
@property (readonly, getter=isReady) BOOL ready;
```
为什么说**NSOperation要和NSOperationQueue一起使用**呢？因为如果NSOperation子类对象直接start启动的话，它其实是在主线程中执行的！
![image](/myimg/ios/error.png)
如果把NSOperation子类对象加到NSOperationQueue中,这就不是在主线程中执行了。
![image](/myimg/ios/right.png)

NSInvocationOperation就两个初始化方法，两个属性...
```
- (nullable instancetype)initWithTarget:(id)target selector:(SEL)sel object:(nullable id)arg;
- (instancetype)initWithInvocation:(NSInvocation *)inv;
@property (readonly, retain) NSInvocation *invocation;
@property (nullable, readonly, retain) id result;
```
NSBlockOperation就两个方法，一个属性...
```
+ (instancetype)blockOperationWithBlock:(void (^)(void))block;//初始化
- (void)addExecutionBlock:(void (^)(void))block;//创建一个新的线程来执行任务
@property (readonly, copy) NSArray<void (^)(void)> *executionBlocks;//任务数组
```
**addExecutionBlock**会创建一个新的线程来执行任务，而不是在同一个子线程中。
![image](/myimg/ios/blockThread.png)

NSOperationQueue中的方法及属性，都很少...
```
- (void)cancelAllOperations;//取消线程
- (void)waitUntilAllOperationsAreFinished;
+ (nullable NSOperationQueue *)currentQueue;
+ (NSOperationQueue *)mainQueue;//获取主线程
- (void)addOperation:(NSOperation *)op;//添加线程
- (void)addOperations:(NSArray<NSOperation *> *)ops waitUntilFinished:(BOOL)wait;//添加线程数组
- (void)addOperationWithBlock:(void (^)(void))block;//添加线程block
@property (readonly, copy) NSArray<__kindof NSOperation *> *operations;
@property (readonly) NSUInteger operationCount;//池子里几个线程
@property NSInteger maxConcurrentOperationCount;//最大并发线程数
@property (getter=isSuspended) BOOL suspended;//延迟
@property (nullable, copy) NSString *name;//线程名字
@property NSQualityOfService qualityOfService;// ??
@property (nullable, assign) dispatch_queue_t underlyingQueue;// ??
```

### *GCD
GCD(Grand Central Dispatch)是基于C语言开发的一套多线程开发机制，也是苹果官方推荐的多线程开发方法。抽象层次最高，当然是用起来也最简单，只是它基于C语言开发，并不像NSOperation是面向对象的开发，而是完全面向过程的，最显著的优点就是它对于多核运算更加有效。

GCD中的队列分为**串行队列**和**并发队列**两类，都是异步的：

串行队列：只有一个子线程，加入到队列中的操作按添加顺序依次执行。

并发队列：有多个子线程，操作进来之后它会将这些队列安排在可用的处理器上，同时保证先进来的任务优先处理。

**1. 串行队列, 在同一个子线程里, 顺序执行！** 关键字 *DISPATCH_QUEUE_SERIAL*
```
dispatch_queue_t serialQueue = dispatch_queue_create("myThreadQueue", DISPATCH_QUEUE_SERIAL);
    for (int i=0; i<5; ++i) {
        dispatch_async(serialQueue, ^{
            [self doSomething:i];
        });
    }
```
![image](/myimg/ios/gcd1.png)

```
//更新UI界面,此处调用了GCD主线程队列的方法
dispatch_queue_t mainQueue = dispatch_get_main_queue();
  dispatch_sync(mainQueue, ^{
    [self updateUI];
});
```
**2. 并发队列, 在不同的子线程里, 并发执行** 关键字 *DISPATCH_QUEUE_CONCURRENT*

```
 //方式一：dispatch_queue_t serialQueue=dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
 dispatch_queue_t serialQueue=dispatch_queue_create("myThreadQueue", DISPATCH_QUEUE_CONCURRENT);
    for (int i=0; i<5; ++i) {
        dispatch_async(serialQueue, ^{
            [self doSomething:i];
        });
    }
```
![image](/myimg/ios/ybbf.png)
若把上面的**dispatch_async**改成**dispatch_sync**,这就是在主线程中顺序执行了！即使在异步并发队列中！
![image](/myimg/ios/hah.png)
所以，GCD若要**异步多线程**执行必须：使用异步队列**DISPATCH_QUEUE_CONCURRENT** 并且 方法是异步方法(dispatch_async)!! 否则，要么在**子线程**里顺序执行(串行队列，异步方法(dispatch_async))，要么在**主线程**里顺序执行！！(同步方法(dispatch_sync)，不管串行还是并发队列)

解决异步情况下抢占资源问题，可以加锁**NSLock**。获取资源时lock住，获取完资源后unlock。或者用**@synchronized**包裹获取资源代码。

几个线程执行完后得到通知

```
    dispatch_group_t group = dispatch_group_create();
    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{
        //并发执行的任务一
    });
    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{
        //并发执行的任务二
    });
    dispatch_group_notify(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0), ^{
        //所有任务都执行完了得到通知
    });
```
```
NSOperationQueue *queue = [[NSOperationQueue alloc]init];
NSBlockOperation *blockOperation=[NSBlockOperation blockOperationWithBlock:^{
     //并发执行的任务一
 }];
 [blockOperation addExecutionBlock:^{
     //并发执行的任务二
 }];
 [blockOperation setCompletionBlock:^{
     //所有任务都执行完了
 }];
 [queue addOperation:blockOperation];
```

### *总结

1.无论使用哪种方法进行多线程开发，每个线程启动后并不一定立即执行相应的操作，具体什么时候由系统调度，CPU空闲时就会执行。

2.更新UI应该在主线程（UI线程）中进行，常用的方法如下：

-(void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait 

-(void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL) wait;//传递[NSThread mainThread]

[[NSOperationQueue mainQueue] addOperationWithBlock:^{ }];

dispatch_sync(dispatch_get_main_queue(), ^{ });

3.NSThread适合轻量级多线程开发，要手动控制线程，线程总数无法控制，无法线程依赖。

4.对于简单的多线程开发建议使用NSObject的扩展方法完成，而不必使用NSThread。

5.可以使用NSThread的currentThread方法取得当前线程，使用 sleepForTimeInterval:方法让当前线程休眠。

6.NSOperation进行多线程开发可以控制线程总数及线程依赖关系。

7.创建一个NSOperation不应该直接调用start方法, 如果直接start则会在主线程中调用, 而是应该放到NSOperationQueue中启动。

8.相比NSInvocationOperation推荐使用NSBlockOperation，代码简单，同时由于闭包性使它没有传参问题。

9.NSOperation是对GCD面向对象的封装，但是GCD基于C语言开发，效率却更高. 建议如果任务之间有依赖关系或者想要监听任务完成状态的情况下优先选择NSOperation否则使用GCD。

10.在GCD中串行队列中的任务被安排到一个单一的子线程中，可以方便地控制执行顺序；并发队列在多个线程中执行（前提是使用异步方法），顺序控制相对复杂，但是更高效。

11.在GDC中一个操作是多线程执行还是单线程执行取决于当前队列类型和执行方法，只有队列类型为并发队列并且使用异步方法执行时才能在多个线程中并发执行。

12.相比使用NSLock，@synchronized更加简单。