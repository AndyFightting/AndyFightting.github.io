<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 阿贵]]></title>
  <link href="http://andyfightting.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://andyfightting.github.io/"/>
  <updated>2016-09-07T16:29:10+08:00</updated>
  <id>http://andyfightting.github.io/</id>
  <author>
    <name><![CDATA[guimingsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android中的AsyncTask]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/07/asynctask/"/>
    <updated>2016-09-07T10:15:12+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/07/asynctask</id>
    <content type="html"><![CDATA[<p>Android和iOS一样，对UI的操作只能放在主线程中进行，即UI线程。如果在UI线程中执行比较耗时的方法，就会造成界面卡顿假死无反应，所以应该把耗时操作放在<code>非UI线程</code>中处理，处理完成后再在<code>UI线程</code>中更新界面。</p>

<p>在没有AsyncTask类的时候，是通过在子线程处理，然后sendMessage(Message msg)给主线程中创建的Handler,然后在主线程中实现handleMessage(Message msg)处理相应信息。而这些工作AsyncTask帮我们做了，AsyncTask就是对Thread和Handler的封装。</p>

<h4>AsyncTask使用</h4>

<p>AsyncTask是一个抽象类，所以必须创建一个子类去继承它。在继承时我们可以为AsyncTask类指定三个参数类型,这三个类型会影响重写方法对应的参数类型。</p>

<ol>
<li>Params: 在execute()启动任务时需要传入的参数</li>
<li>Progress: 后台任务执行过程中，需要实时反馈出来的信息，比如执行进度什么的</li>
<li>Result: 后台任务执行完毕后，如果需要对结果进行返回，则返回该类型</li>
</ol>


<pre><code>    //on开通的方法都是在UI线程中执行的
    class MyAsyncTask extends AsyncTask&lt;Void,Integer,Boolean&gt;{
        @Override
        protected void onPreExecute() {//在执行实际的后台的doInBackground方法前
            super.onPreExecute();
        }

        @Override
        protected Boolean doInBackground(Void... params) {//在onPreExecute 方法执行后马上执行，该方法运行在后台线程中
            for (int i = 0; i &lt;= 100; i++) {
                publishProgress(i);//调用onProgressUpdate
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            return true;//可以判断是否顺利执行完了啊
        }

        @Override
        protected void onProgressUpdate(Integer... values) {//这个函数在doInBackground调用publishProgress时被调用后
            super.onProgressUpdate(values);
            //比如实时更新进度条
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            super.onPostExecute(aBoolean);
            //后台顺利执行完后要干啥呢
        }

        @Override
        protected void onCancelled() {
            super.onCancelled();
        }
    }
</code></pre>

<ol>
<li>Task的实例必须在UI 线程中创建</li>
<li>execute方法必须在UI 线程中调用</li>
<li>不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params&hellip;)等方法</li>
<li>该task只能被执行一次，否则多次调用时将会抛出异常</li>
</ol>


<h4>AsyncTask源码</h4>

<p>AsyncTask有个handler内部类，用它来处理在主线程中实时更新和任务完成后的回调</p>

<pre><code>    private static InternalHandler sHandler;

    private static Handler getHandler() {
        synchronized (AsyncTask.class) {
            if (sHandler == null) {
                sHandler = new InternalHandler();
            }
            return sHandler;
        }
    }

    private static class InternalHandler extends Handler {
        public InternalHandler() {
            super(Looper.getMainLooper());
        }

        @SuppressWarnings({"unchecked", "RawUseOfParameterizedType"})
        @Override
        public void handleMessage(Message msg) {
            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;
            switch (msg.what) {
                case MESSAGE_POST_RESULT:
                    // There is only one result
                    result.mTask.finish(result.mData[0]);
                    break;
                case MESSAGE_POST_PROGRESS:
                    result.mTask.onProgressUpdate(result.mData);
                    break;
            }
        }
    }
</code></pre>

<p>当我们调用publishProgress方法时，就是得到handler单列然后发消息</p>

<pre><code>   protected final void publishProgress(Progress... values) {
        if (!isCancelled()) {
            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,
                    new AsyncTaskResult&lt;Progress&gt;(this, values)).sendToTarget();
        }
    }

   private static class AsyncTaskResult&lt;Data&gt; {
        final AsyncTask mTask;
        final Data[] mData;

     AsyncTaskResult(AsyncTask task, Data... data) {
            mTask = task;
            mData = data;
        }
    }
</code></pre>

<p>当执行execute()方法时，会在后台任务doInBackground(mParams)开始执行前调用onPreExecute方法。从下面可以看出，当task已经在运行或者已经结束的时候不可以再调用execute()方法，否则会报错。</p>

<pre><code> public final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) {
        return executeOnExecutor(sDefaultExecutor, params);
    }

  public final AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec,
            Params... params) {
        if (mStatus != Status.PENDING) {
            switch (mStatus) {
                case RUNNING:
                    throw new IllegalStateException("Cannot execute task:"
                            + " the task is already running.");
                case FINISHED:
                    throw new IllegalStateException("Cannot execute task:"
                            + " the task has already been executed "
                            + "(a task can be executed only once)");
            }
        }

        mStatus = Status.RUNNING;

        onPreExecute(); //后台任务开始前执行

        mWorker.mParams = params;
        exec.execute(mFuture);

        return this;
    }

     mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
            public Result call() throws Exception {
                mTaskInvoked.set(true);

                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
                //noinspection unchecked
                Result result = doInBackground(mParams);   //这里开始执行后台任务！！！
                Binder.flushPendingCommands();
                return postResult(result);
            }
        };

        mFuture = new FutureTask&lt;Result&gt;(mWorker) {
            @Override
            protected void done() {
                try {
                    postResultIfNotInvoked(get());    //后台任务执行完毕！！！
                } catch (InterruptedException e) {
                    android.util.Log.w(LOG_TAG, e);
                } catch (ExecutionException e) {
                    throw new RuntimeException("An error occurred while executing doInBackground()",
                            e.getCause());
                } catch (CancellationException e) {
                    postResultIfNotInvoked(null);
                }
            }
        };
</code></pre>

<p>后台任务执行完毕时，也是通过handler发消息，然后判断是不是取消状态来调用相应的方法</p>

<pre><code> mFuture = new FutureTask&lt;Result&gt;(mWorker) {
            @Override
            protected void done() {
                try {
                    postResultIfNotInvoked(get());   //后台任务执行完毕！！！
                } catch (InterruptedException e) {
                    android.util.Log.w(LOG_TAG, e);
                } catch (ExecutionException e) {
                    throw new RuntimeException("An error occurred while executing doInBackground()",
                            e.getCause());
                } catch (CancellationException e) {
                    postResultIfNotInvoked(null);
                }
            }
        };

   private void postResultIfNotInvoked(Result result) {
        final boolean wasTaskInvoked = mTaskInvoked.get();
        if (!wasTaskInvoked) {
            postResult(result);
        }
    }

   private Result postResult(Result result) {
        @SuppressWarnings("unchecked")
        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,
                new AsyncTaskResult&lt;Result&gt;(this, result));
        message.sendToTarget();
        return result;
    }

 private void finish(Result result) {
        if (isCancelled()) {
            onCancelled(result);
        } else {
            onPostExecute(result);
        }
        mStatus = Status.FINISHED;
    }
</code></pre>

<p>从下面的代码可以看出，ThreadPoolExecutor是类变量，所以不管创建多少个AsyncTask子类的对象，他们都共用一个线程池。默认线程池可维护的线程数和最大数量，与可用的CUP处理器个数有关。线程池中超过corePoolSize数目的空闲线程最大存活时间1，单位SECONDS。如果线程池的线程数量小于CORE_POOL_SIZE，这个时候新添加一个异步任务则会新建一个线程；如果线程池的数量大于等于CORE_POOL_SIZE，这个时候新建一个异步任务这个任务会被放入缓存队列中等待执行。缓存队列大小为128，并且SerialExecutor是异步顺序执行任务的。</p>

<pre><code>private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
private static final int CORE_POOL_SIZE = CPU_COUNT + 1;
private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;
private static final int KEEP_ALIVE = 1;

private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128);

public static final Executor THREAD_POOL_EXECUTOR
        = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,
                TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);


private static class SerialExecutor implements Executor {
    final ArrayDeque&lt;Runnable&gt; mTasks = new ArrayDeque&lt;Runnable&gt;();
    Runnable mActive;

    public synchronized void execute(final Runnable r) {
        mTasks.offer(new Runnable() {
            public void run() {
                try {
                    r.run();
                } finally {
                    scheduleNext();
                }
            }
        });
        if (mActive == null) {
            scheduleNext();
        }
    }

    protected synchronized void scheduleNext() {
        if ((mActive = mTasks.poll()) != null) {
            THREAD_POOL_EXECUTOR.execute(mActive);
        }
    }
}
</code></pre>

<h4>问题</h4>

<p>AsyncTask处理任务的时候，一般都是习惯在onPreExecute显示进度条，在数据处理完成之后的onPostExecute关闭进度条。但是当横竖屏切换或者内存重启导致Activity重新启动时，假设你还在onPostExecute写了一些其他逻辑，这个时候的AsyncTask已经与之前的Activity没有关联了，会导致onPostExecute无效问题。</p>

<p>解决办法是在onPostExecute方法里用EventBus或者Otto等类库，把结果发送给Activity去处理！！</p>

<pre><code>@Override
    protected void onPostExecute(String result) {
        EventBus.getDefault().post(new AsyncTaskResultEvent(result));
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反编译Android的APK]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/02/apk-decode/"/>
    <updated>2016-09-02T09:55:10+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/02/apk-decode</id>
    <content type="html"><![CDATA[<p>本人用的环境是Mac 10.11.5, 需要用到的工具有：<a href="https://ibotpeaches.github.io/Apktool/">apktool</a>, <a href="https://sourceforge.net/projects/dex2jar/">dex2jar</a>, <a href="http://jd.benow.ca/">JD-GUI</a>。</p>

<p>下面用淘宝2.2.1版本和微信2.3版本为例子来反编译。为什么用这么老的版本？因为可能老版本没有做代码混淆，反编译后会更好看一点。可以用<a href="http://www.anzhi.com/">安智市场</a>来下载历史版本，推荐用安智市场的手机APP来下载，会看到所有的历史版本，而电脑网站只能看到最近的几个历史版本。
<img src="/myimg/android/az_taobao.png" alt="image" /></p>

<h4>1.apktool</h4>

<p>需要至少Java 7环境，通过<code>java -version</code>查看
<img src="/myimg/android/javaVersion.png" alt="image" /></p>

<p>配置apktool
<img src="/myimg/android/apktool.png" alt="image" /></p>

<p>输入apktool如下所示就成功了
<img src="/myimg/android/apktool_result.png" alt="imag" /></p>

<p>用apktool工具处理后就可以查看xml文件了。在桌面建一个文件夹test, 把apk文件放进去，进入该文件夹，然后执行<code>apktool d apk名称.apk</code>。就会在test文件夹里出现一个<code>apk名称</code>的文件夹。里面的资源文件和xml文件就可以打开查看了。
<img src="/myimg/android/apktool1.png" alt="imag" />
<img src="/myimg/android/apktool2.png" alt="imag" />
<img src="/myimg/android/apktool3.png" alt="imag" /></p>

<h4>2.dex2jar</h4>

<p>dex2jar工具可以吧dex或者apk文件转成jar文件。dex2jar下载好后进入文件夹，执行<code>chmod a+x *.sh</code>命令启用.sh文件。</p>

<h6>方式一</h6>

<p>把apk文件的后缀名改为zip，然后解压得到classes.dex文件，把classes.dex文件放到dex2jar文件夹中，进入该文件夹，执行<code>sh d2j-dex2jar.sh classes.dex</code>命令，就会得到对应的jar文件。</p>

<h6>方式二</h6>

<p>直接把apk文件放入dex2jar文件夹中，执行<code>sh d2j-dex2jar.sh apk名称.apk</code>也会得到对应的jar文件。</p>

<h4>3.JD-GUI</h4>

<p>把JD-GUI下载下来，打开上面生成的jar文件就可查看了。
<img src="/myimg/android/taobao211.png" alt="image" /></p>

<p>下面是微信2.3处理后的结果
<img src="/myimg/android/wx1.png" alt="image" />
<img src="/myimg/android/wx2.png" alt="image" />
<img src="/myimg/android/wx3.png" alt="image" />
剩下的就看细心、耐心、和好奇心了&hellip;下面说说我是怎么查看QQ2.0的。</p>

<h3>我的查看流程</h3>

<p>找一个页面的特殊字符，如下面的"我的个人资料"
<img src="/myimg/android/find00.jpg" alt="image" /></p>

<p>然后Finder搜索，找到strings.xml文件，在里面找到"我的个人资料"对应的key &ndash; &ldquo;info_info"。
<img src="/myimg/android/find0.png" alt="image" />
<img src="/myimg/android/find1.png" alt="image" /></p>

<p>然后搜"info_info"，找到对应的布局文件"info_self.xml"
<img src="/myimg/android/find2.png" alt="image" /></p>

<p>然后通过"info_self"布局文件名搜索，找到对应的smali文件
<img src="/myimg/android/find3.png" alt="image" /></p>

<p>然后通过smali文件名"InfoActivity"在JD-GUI的Search功能搜索，不是Find!找到对应的Activity，这样想看的东西应该都能找到了。
<img src="/myimg/android/find4.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的Fragment]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/01/fragment/"/>
    <updated>2016-09-01T11:38:27+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/01/fragment</id>
    <content type="html"><![CDATA[<p>在 Android 3.0（API 11 级）中引入了Fragment，主要是为了给大屏幕上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用Fragment实现此类设计时，无需管理对视图层次结构的复杂更改。它具有自己的生命周期，能接收自己的输入事件，并且可以在 Activity 运行时添加或删除Fragment，有点像可以在不同 Activity 中重复使用的"子 Activity"。 通过将 Activity 布局分成Fragment，可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。Fragment必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。当 Activity 暂停时，其中的所有Fragment也会暂停；当 Activity 被销毁时，所有Fragment也会被销毁。</p>

<p>下面是Android官网上的<a href="https://developer.android.com/guide/components/activities.html">Activity</a>和<a href="https://developer.android.com/guide/components/fragments.html">Fragment</a>的生命周期图。</p>

<p><img src="/myimg/android/activity_lifecycle.png" alt="imga" /> <img src="/myimg/android/fragment_lifecycle.png" alt="imga" /></p>

<p>下面是网友整理的详细的<a href="https://github.com/xxv/android-lifecycle">周期图比较</a>。</p>

<p><img src="/myimg/android/fragment.png" alt="image" /></p>

<h4>用Fragment可能会遇到的问题</h4>

<h5>getActivity()空指针</h5>

<p>可能遇到过getActivity()返回null，或者平时运行完好的代码，在“内存重启”之后，调用getActivity()的地方却返回null，报了空指针异常。大多数情况下的原因：在调用了getActivity()时，当前的Fragment已经onDetach()了宿主Activity。比如在pop了Fragment之后，该Fragment的异步任务仍然在执行，并且在执行完成后调用了getActivity()方法，这样就会空指针。</p>

<p>可以在Fragment基类里设置一个Activity mActivity的全局变量，在onAttach(Activity activity)里赋值，使用mActivity代替getActivity()，保证Fragment即使在onDetach后，仍持有Activity的引用。</p>

<h5>Fragment重叠问题</h5>

<p>如果add()了几个Fragment，然后使用show()、hide()方法控制，比如微信、QQ的底部tab等情景。如果你什么都不做的话，在“内存重启”后回，Tab的这几个Fragment界面会重叠。(手机横竖屏切换就可以模拟“内存重启”)。原因是FragmentManager帮我们管理Fragment，当发生“内存重启”，他会从栈底向栈顶的顺序恢复Fragment，但是因为没有保存Fragment的hidden属性，默认为false，所以所有Fragment都是以show的形式恢复，界面就重叠了。</p>

<h5>解决方法一</h5>

<p>不用add()的方式处理tab的Fragment，直接在Activity的布局文件中添加需要的Fragment,然后在Activity中通过getFragmentManager().findFragmentById()的方式得到Fragment，然后处理对应的hide,show。</p>

<pre><code>    &lt;fragment
        android:id="@+id/fragment0"
        android:name="com.suguiming.myandroid.tab0.Fragment0"
        android:layout_above="@+id/tab_line"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:layout="@layout/fragment_container"/&gt;
    &lt;fragment
        android:id="@+id/fragment1"
        android:name="com.suguiming.myandroid.tab1.Fragment1"
        android:layout_above="@+id/tab_line"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:layout="@layout/fragment_container"/&gt;
</code></pre>

<h5>解决方法二</h5>

<p>在用add()或者replace()时为Fragment绑定一个tag，一般用fragment的类名作为tag，然后在发生“内存重启”时，即savedInstanceState!=null 时，通过getFragmentManager().findFragmentByTag()找到对应的Fragment，然后hide、show 对应的Fragment。</p>

<pre><code>protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity);

TargetFragment targetFragment;
HideFragment hideFragment;

if (savedInstanceState != null) {  // “内存重启”时调用
    targetFragment = getSupportFragmentManager().findFragmentByTag(TargetFragment.class.getName);
    hideFragment = getSupportFragmentManager().findFragmentByTag(HideFragment.class.getName);
    // 解决重叠问题
    getFragmentManager().beginTransaction()
            .show(targetFragment)
            .hide(hideFragment)
            .commit();
}else{  // 正常时
    targetFragment = TargetFragment.newInstance();
    hideFragment = HideFragment.newInstance();

    getFragmentManager().beginTransaction()
            .add(R.id.container, targetFragment, targetFragment.getClass().getName())
            .add(R.id,container,hideFragment,hideFragment.getClass().getName())
            .hide(hideFragment)
            .commit();
}
}
</code></pre>

<h5>解决方法三</h5>

<p>由于造成重叠的原因是因为Fragment不会保存hide的状态，那我们可以在BaseFragment中手动保存然后处理啊！</p>

<pre><code>private static final String FRAGMENT_IS_HIDDEN = "FRAGMENT_IS_HIDDEN";

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    //解决重叠问题
    if (savedInstanceState != null) {
        boolean isHidden = savedInstanceState.getBoolean(FRAGMENT_IS_HIDDEN);
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        if (isHidden) {
            ft.hide(this);
        } else {
            ft.show(this);
        }
        ft.commit();
    }
}

@Override
public void onSaveInstanceState(Bundle outState) {
    super.onSaveInstanceState(outState);
    outState.putBoolean(FRAGMENT_IS_HIDDEN, isHidden());//保持fragment是否隐藏的状态
}
</code></pre>

<p>在使用时还是要注意判断savedInstanceState是否为null，只有在为空时才add()。在不为空时就可以不用处理了，交由BaseFragment处理了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android手势滑动返回]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/31/android-swipe/"/>
    <updated>2016-08-31T15:16:10+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/31/android-swipe</id>
    <content type="html"><![CDATA[<p>偶然间发现了一个Android自带的抽屉控件<a href="https://developer.android.com/training/implementing-navigation/nav-drawer.html">DrawerLayout</a>,就觉得应该可以用他来封装成手势返回的基础控件。思路就是先设置Activity的跳转动画是从右到左，并且前一个Activity不能动。然后设置DrawerLayout的menu从右边出来，然设置menu全屏，这个menu就相当于子Activity View的容器，默认打开menu,然后设置DrawerLayout容器透明，当DrawerLayout close的时候finish它所在的Activity！还要把状态栏设置成透明，不然DrawerLayout closed 再 finish Activity的时候会有视觉差！复杂的手势控制就交由自带的DrawerLayout处理啦，生命周期还是Activity的生命周期。怎么样，是不是机智如我！！😆</p>

<p>遇到的问题：DrawerLayout的menu即时设置成match_parent也不能全屏！因为源码里设置了margin64dp! 那我们只好再设置回来：android:layout_marginLeft=&ldquo;-64dp"。</p>

<pre><code> private static final int MIN_DRAWER_MARGIN = 64; // dp
</code></pre>

<p>BaseSwipeActivity</p>

<pre><code>package com.suguiming.myandroid.base;
import android.os.Bundle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.suguiming.myandroid.R;

public class BaseSwipeActivity extends AppCompatActivity {

private DrawerLayout drawer;
private LinearLayout containerLayout;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    setContentView(R.layout.activity_base_swipe);

    containerLayout = (LinearLayout) findViewById(R.id.container_layout);

    drawer = (DrawerLayout) findViewById(R.id.base_drawer_layout);
    drawer.openDrawer(GravityCompat.END);
    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
        @Override
        public void onDrawerClosed(View drawerView) {
            super.onDrawerClosed(drawerView);
            finish();
        }
    };
    drawer.setDrawerListener(toggle);
}

//子类不要用setContentView,用setMainView!!!!
public void setMainView(int viewId) {
    LayoutInflater inflater = LayoutInflater.from(this);
    View tmpView = inflater.inflate(viewId, null);

    if (tmpView instanceof LinearLayout) {
        LinearLayout.LayoutParams linearLayoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(linearLayoutParams);
    } else if (tmpView instanceof RelativeLayout) {
        RelativeLayout.LayoutParams relativeLayoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(relativeLayoutParams);
    }
    containerLayout.removeAllViews();
    containerLayout.addView(tmpView);
}

}
</code></pre>

<p>对应的布局文件</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:background="@android:color/transparent"
    tools:context="com.suguiming.myandroid.base.BaseSwipeActivity"&gt;

&lt;android.support.v4.widget.DrawerLayout
    android:id="@+id/base_drawer_layout"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@android:color/transparent"
    tools:openDrawer="end"&gt;
    &lt;LinearLayout
        android:orientation="vertical"
        android:background="@color/clear"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;
    &lt;/LinearLayout&gt;

    &lt;!---64dp是源码menu的margin,这里设置为65,不然会有一条黑线--&gt;
    &lt;LinearLayout
        android:id="@+id/container_layout"
        android:orientation="vertical"
        android:layout_gravity="end"
        android:layout_marginLeft="-65dp"
        android:background="@color/light_gray"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;
    &lt;/LinearLayout&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>push 的动画 style</p>

<pre><code>&lt;!--手势返回theme--&gt;
&lt;style name="BackSwipeTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt;
    &lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;
    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;
    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;
    &lt;item name="android:backgroundDimEnabled"&gt;false&lt;/item&gt;
    &lt;item name="android:windowAnimationStyle"&gt;@style/ActivitySwipeBackAnimation&lt;/item&gt;
&lt;/style&gt;
&lt;style name="ActivitySwipeBackAnimation" parent="@android:style/Animation.Activity"&gt;
    &lt;item name="android:activityOpenEnterAnimation"&gt;@anim/activity_swipe_in&lt;/item&gt;
    &lt;item name="android:activityOpenExitAnimation"&gt;@anim/activity_swipe_out&lt;/item&gt;
    &lt;item name="android:activityCloseEnterAnimation"&gt;@anim/activity_swipe_in&lt;/item&gt;
    &lt;item name="android:activityCloseExitAnimation"&gt;@anim/activity_swipe_out&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>使用的话就是让Activity继承BaseSwipeActivity，然后设置Activity的Theme为BackSwipeTheme。</p>

<pre><code>public class ActivitySwipeBack extends BaseSwipeActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    //要用setMainView，不要用setContentView
    setMainView(R.layout.activity_activity_swipe_back);
  }
}

&lt;activity android:name=".tab0.ActivitySwipeBack"
            android:theme="@style/BackSwipeTheme"/&gt;
</code></pre>

<p>完整Demo请查看<a href="https://github.com/AndyFightting/MyAndroid">MyAndroid</a>中的"手势滑动返回"。</p>

<p><img src="/myimg/android/android_swipe.png" alt="imge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android基本存储]]></title>
    <link href="http://andyfightting.github.io/blog/2015/11/23/androidsave/"/>
    <updated>2015-11-23T19:48:52+08:00</updated>
    <id>http://andyfightting.github.io/blog/2015/11/23/androidsave</id>
    <content type="html"><![CDATA[<p>Android数据保存方式有： 文件存储, SharedPreference, Sqlite, SD卡存储。</p>

<h3>* 文件存储</h3>

<p>不对存储数据做任何格式化处理，原封不动的保存到文件中。使用于保存简单的文本数据或者二进制数据。</p>

<p>Context有个<code>openFileOutput()</code>方法接受两个参数，第一个：文件名，<strong>不要包含路径</strong>，第二个：操作方式，有两种，<code>MODE_PRIVATE</code>(覆盖原文件内容),<code>MODE_APPEND</code>(在原文件尾部追加内容)，默认第一种。文件默认保存在：<code>/data/data/packageName/files/</code>这个目录里。</p>

<pre><code> public static void saveText(Context context,String fileName,String text){
    FileOutputStream outputStream ;
    BufferedWriter bufferedWriter = null;
    try {
       outputStream = context.openFileOutput(fileName,Context.MODE_PRIVATE);
        bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream));
        bufferedWriter.write(text);
    }catch (IOException e){
        e.printStackTrace();
    }finally {
        try {
            if (bufferedWriter != null){
                bufferedWriter.close();
            }
        }catch (IOException e){
            e.printStackTrace();
        }
    }
}
</code></pre>

<!--more-->


<p>在我调用 <code>MyTool.saveText(this,"myFile","Hello World!");</code>后出现了如下文件，点画圈圈的地方可以导出到电脑上打开查看。
<img src="/myimg/android/helloSave.png" alt="img" /></p>

<p>读文件</p>

<pre><code>public static String getText(Context context,String fileName){
    FileInputStream inputStream;
    BufferedReader bufferReader = null;
    StringBuilder contentBuilder = new StringBuilder();
    try {
        inputStream = context.openFileInput(fileName);
        bufferReader = new BufferedReader(new InputStreamReader(inputStream));
        String lineText = "";
        while ((lineText = bufferReader.readLine()) != null){
            contentBuilder.append(lineText);
        }
    }catch (IOException e){
        e.printStackTrace();
    }finally {
       if (bufferReader != null){
           try {
               bufferReader.close();
           }catch (IOException e){
               e.printStackTrace();
           }
       }
    }
    return contentBuilder.toString();
}
</code></pre>

<p>删除文件</p>

<pre><code>public static void deleteFile(Context context, String fileName) {
    String filePath = context.getFilesDir()+"/"+fileName;
    File file = new File(filePath);
    if (file.exists()){
        file.delete();
    }
}
</code></pre>

<h3>* SharedPreference</h3>

<p>用key-value键值对的方式保存数据，适用于保存应用配置之类的简单信息。有以下三种方式得到<code>SharedPreferences</code>对象，得到实例后调用实例的<code>edit()</code>方法得到<code>SharedPreferences.Editor</code>对象，用该<code>Editor</code>对象<code>putBoolean("key",value)``putString("key",value)</code>等方法添加数据，然后调用<code>apply()</code>即可。获取数据就调用对应的<code>getBoolean("key")``getString("key")</code>。文件保存在<code>/data/data/packageName/shared_prefs/</code>目录下。</p>

<ol>
<li><p>Context中的<code>getSharedPreferences()</code>方法接收两个参数，一个文件名(不要包含路径)，一个操作模式，有<code>MODE_PRIVATE</code>(覆盖原文件),<code>MODE_MULTI_PROCESS</code>(多个进程对文件进行读写情况)默认第一种。</p></li>
<li><p>Activity中也有个一个类似的方法<code>getSharedPreferences()</code>，它只接收一个操作模式作为参数，<strong>自动将类名作为文件名</strong>。</p></li>
<li><p>PreferenceManager类中的<code>getDefaultSharedPreferences()</code>，这是一个静态方法，接收一个参数<code>Context</code>,自动将应用程序的<code>packageName</code>为前缀的文件名,如我的包名是<code>com.suguiming.myandroid</code>,生成的文件名就是<code>com.suguiming.myandroid_preferences.xml</code>。</p></li>
</ol>


<pre><code>    SharedPreferences sharedPreferences =   PreferenceManager.getDefaultSharedPreferences(context);
      SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString("name","guimingsu");
        editor.putInt("age", 18);
        editor.apply();
</code></pre>

<p><img src="/myimg/android/shareP.png" alt="img" />
<img src="/myimg/android/shareV.png" alt="img" /></p>

<p>一般都把它做成一个工具类</p>

<pre><code>public class SharedPreUtil {

public static final String FILE_NAME = "shared_preference";

public static void put(Context context, String key, Object value) {
    SharedPreferences sharedPreferences = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);
    SharedPreferences.Editor editor = sharedPreferences.edit();

    if (value instanceof String) {
        editor.putString(key, (String) value);
    } else if (value instanceof Integer) {
        editor.putInt(key, (Integer) value);
    } else if (value instanceof Boolean) {
        editor.putBoolean(key, (Boolean) value);
    } else if (value instanceof Float) {
        editor.putFloat(key, (Float) value);
    } else if (value instanceof Long) {
        editor.putLong(key, (Long) value);
    } else {
        editor.putString(key, value.toString());
    }
    editor.apply();
}

public static Object get(Context context, String key, Object defaultValue) {
    SharedPreferences sharedPreferences = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);

    if (defaultValue instanceof String) {
        return sharedPreferences.getString(key, (String) defaultValue);
    } else if (defaultValue instanceof Integer) {
        return sharedPreferences.getInt(key, (Integer) defaultValue);
    } else if (defaultValue instanceof Boolean) {
        return sharedPreferences.getBoolean(key, (Boolean) defaultValue);
    } else if (defaultValue instanceof Float) {
        return sharedPreferences.getFloat(key, (Float) defaultValue);
    } else if (defaultValue instanceof Long) {
        return sharedPreferences.getLong(key, (Long) defaultValue);
    }
    return null;
}

public static void remove(Context context, String key) {
    SharedPreferences sharedPreferences = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);
    SharedPreferences.Editor editor = sharedPreferences.edit();
    editor.remove(key);
    editor.apply();
}

public static void removeAll(Context context) {
    SharedPreferences sharedPreferences = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);
    SharedPreferences.Editor editor = sharedPreferences.edit();
    editor.clear();
    editor.apply();
}

}
</code></pre>

<h3>* SQLite</h3>

<p>关系型的轻量级数据库，保存复杂或者大数据用这个，支持标准的SQL语法。</p>

<p>创建数据库：Android提供了一个抽象类<code>SQLiteOpenHelper</code>，我们继承它重写里面的两个方法<code>onCreate()</code>,<code>onUpdate()</code>来创建和更新数据库表结构。创建的数据库会保存在 <code>/data/data/packageName/databases/</code>目录下。通过<code>getReadableDatabase</code>或者<code>getWritableDatabase</code>都可得到可读写的数据库，但如果数据库不可写时(如磁盘已满)，<code>getWritableDatabase</code>会报错，<code>getReadableDatabase</code>不会。</p>

<p>调用<code>MySqliteHelper.getHelper(mainActivity).getReadableDatabase();</code>一下数据库就建好了，下次再调用就不会再创建了。</p>

<pre><code>public class MyDatabaseHelper extends SQLiteOpenHelper {

private static MyDatabaseHelper helper;
private static final String DB_NAME = "myAndroid.db";

public MyDatabaseHelper(Context context){
    super(context, DB_NAME, null, 2);//2 数据库version,修改数据库用
}

@Override
public void onCreate(SQLiteDatabase db) {
    db.execSQL(create_dog);
    db.execSQL(create_cat);
}

@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    //更新表才用,这里假设在 版本2 中要添加 cat 表,注意：switch 不要 break !!
    switch (newVersion){
        case 2:
            db.execSQL(create_cat);
        default:
    }
}
//获取 helper 单例
public static synchronized MyDatabaseHelper getHelper(Context context) {
    context = context.getApplicationContext();
    if (helper == null) {
        synchronized (MyDatabaseHelper.class) {
            if (helper == null)
                helper = new MyDatabaseHelper(context);
        }
    }
    return helper;
}

//-------------sql----------------------------
    public static final String create_dog = "create table dog ("
            +"id integer primary key autoincrement,"
            +"name text,"
            +"age integer,"
            +"weight real)";

    public static final String create_cat = "create table cat ("
            +"id integer primary key autoincrement,"
            +"name text,"
            +"age integer,"
            +"weight real)";
}
</code></pre>

<p><img src="/myimg/android/mydb.png" alt="img" />  <br/>
把数据库导出到桌面，用<a href="http://www.sqlitemanager.org/">SQLiteManager</a>打开查看
<img src="/myimg/android/mytable.png" alt="img" /></p>

<p>数据增，删，改，查的最简单的例子</p>

<pre><code>public class DogDao {
private static final String TABLE_NAME = "dog";

public static void add(Context context,Dog dog){
    SQLiteDatabase db =  MyDatabaseHelper.getHelper(context).getWritableDatabase();
    ContentValues values = new ContentValues();
    values.put("name",dog.getName());
    values.put("age",dog.getAge());
    values.put("weight",dog.getWeight());
    db.insert(TABLE_NAME, null, values);
}

public static void update(Context context,Dog dog){
    SQLiteDatabase db =  MyDatabaseHelper.getHelper(context).getWritableDatabase();
    ContentValues values = new ContentValues();
    values.put("name",dog.getName());
    values.put("age",dog.getAge());
    values.put("weight",dog.getWeight());
    db.update(TABLE_NAME, values, null, null);
}

public static void deleteAll(Context context){
    SQLiteDatabase db =  MyDatabaseHelper.getHelper(context).getWritableDatabase();
    db.delete(TABLE_NAME, null, null);
}

public static List&lt;Dog&gt; getAll(Context context){
    SQLiteDatabase db =  MyDatabaseHelper.getHelper(context).getWritableDatabase();
    Cursor cursor = db.query(TABLE_NAME, null, null, null, null, null, null);
    List&lt;Dog&gt; dogList = new ArrayList&lt;&gt;();
    if (cursor.moveToFirst()){
        do {
            Dog dog = new Dog();
            dog.setName(cursor.getString(cursor.getColumnIndex("name")));
            dog.setAge(cursor.getInt(cursor.getColumnIndex("age")));
            dog.setWeight(cursor.getFloat(cursor.getColumnIndex("weight")));
            dogList.add(dog);
        }while (cursor.moveToNext());
    }
    cursor.close();
    return dogList;
}

//事务，要么都成功，要么都失败。
public static void transactionTest(Context context){
    SQLiteDatabase db =  MyDatabaseHelper.getHelper(context).getWritableDatabase();
    db.beginTransaction();
    try {
        //数据处理....

        db.setTransactionSuccessful();
    }catch (Exception e){
        e.printStackTrace();
    }finally {
        db.endTransaction();
    }
}
}
</code></pre>

<p>也可以用 Android SDK <code>/platform-tools</code>文件夹中自带的<code>adb</code>工具来操作链接在电脑的手机或者模拟器里的数据库。</p>

<p>但要先配置一下，Mac的配置如下，在终端依次输入 <code>cd ~</code> <code>touch .bash_profile</code> <code>open -e .bash_profile</code>这时会打开一个文本文件，在里面添加<code>export PATH=${PATH}:这里是platform-tools文件的路径</code>保存关闭，
然后<code>source .bash-profile</code>刷新，然后输入<code>adb shell</code>就可以开始用了。
<img src="/myimg/android/pzadb.png" alt="img" />
<img src="/myimg/android/pzadb2.png" alt="img" />
如查看数据库<code>cd /data/data/packageName/databases</code> <code>l</code>列出所有数据库
<img src="/myimg/android/adbtable.png" alt="img" /></p>

<h3>* SD卡存储</h3>

<p>SD卡存储和文件存储差不多，只不过是手机外部的存储空间，容量更大，不过在使用的时候要判断SD卡可不可以用。</p>

<pre><code>public class SDCardUtil {

// 默认都保存在这个文件夹下
private static final String DEFAULT_DIR = "ProData/";

public static boolean isEnable() {
    return Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);
}

public static long getTotalMB() {
    if (!isEnable())
        return 0;
    File path = Environment.getExternalStorageDirectory();
    StatFs stat = new StatFs(path.getPath());
    long blockSize = stat.getBlockSizeLong();
    long availableBlocks = stat.getBlockCountLong();
    return (availableBlocks * blockSize) / 1024 / 1024;
}

public static long getAvailableMB() {
    if (!isEnable())
        return 0;
    File path = Environment.getExternalStorageDirectory();
    StatFs stat = new StatFs(path.getPath());
    long blockSize = stat.getBlockSizeLong();
    long availableBlocks = stat.getAvailableBlocksLong();
    return (availableBlocks * blockSize) / 1024 / 1024;
}

public static long getAvailableByte() {
    if (!isEnable())
        return 0;
    File path = Environment.getExternalStorageDirectory();
    StatFs stat = new StatFs(path.getPath());
    long blockSize = stat.getBlockSizeLong();
    long availableBlocks = stat.getAvailableBlocksLong();
    return availableBlocks * blockSize;
}

// 路径：/storage/sdcard0/
public static String getSDCardPath() {
    if (!isEnable())
        return "";
    return Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator;
}


public static File createDir(String directoryName) {
    //建默认文件夹
    String defaultDir = getSDCardPath() + DEFAULT_DIR;
    File defaultFile = new File(defaultDir);
    if (!defaultFile.exists()) {
        defaultFile.mkdir();
    }

    String dirPath = getFilePath(directoryName);
    File dirFile = new File(dirPath);
    if (!dirFile.exists()) {
        dirFile.mkdir();
    }
    return dirFile;
}

public static File createFile(String fileName) {
    try {
        //建默认文件夹
        String dirPath = getSDCardPath() + DEFAULT_DIR;
        File directory = new File(dirPath);
        if (!directory.exists()) {
            directory.mkdir();
        }

        //再在默认文件夹里建文件
        File file = new File(getFilePath(fileName));
        if (!file.exists()) {
            file.createNewFile();
        }
        return file;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}

public static String getFilePath(String fileName) {
    return getSDCardPath() + DEFAULT_DIR + fileName;
}

public static boolean isFileExist(String fileName) {
    File file = new File(getFilePath(fileName));
    return file.exists();
}

public static boolean saveByte(String fileName, byte[] bytes) {
    if (bytes == null) {
        return false;
    }

    OutputStream output = null;
    try {
        if (bytes.length &lt; getAvailableByte()) {
            File file = createFile(fileName);//这里面已经建了默认文件夹
            output = new BufferedOutputStream(new FileOutputStream(file));
            output.write(bytes);
            output.flush();
            return true;
        }
    } catch (IOException e1) {
        e1.printStackTrace();
    } finally {
        try {
            if (output != null) {
                output.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return false;
}

public static byte[] getByte(String fileName) {
    File file = new File(getFilePath(fileName));
    if (!file.exists()) {
        return null;
    }
    InputStream inputStream = null;
    try {
        inputStream = new BufferedInputStream(new FileInputStream(file));
        byte[] data = new byte[inputStream.available()];
        inputStream.read(data);
        return data;
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (inputStream != null) {
                inputStream.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    return null;
}

public static boolean saveBitmap(Bitmap bitmap, String bitmapName) {
    if (bitmap == null) {
        return false;
    }
    //建默认文件夹
    String dirPath = getSDCardPath() + DEFAULT_DIR;
    File directory = new File(dirPath);
    if (!directory.exists()) {
        directory.mkdir();
    }

    File file = new File(getFilePath(bitmapName));
    BufferedOutputStream output = null;
    try {
        output = new BufferedOutputStream(new FileOutputStream(file));
        bitmap.compress(Bitmap.CompressFormat.JPEG, 80, output);
        output.flush();
        output.close();
        return true;
    } catch (IOException e1) {
        e1.printStackTrace();
    } finally {
        try {
            if (output != null) {
                output.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return false;
}

public static Bitmap getBitmap(String bitmapName) {
    String myJpgPath = getFilePath(bitmapName);
    BitmapFactory.Options options = new BitmapFactory.Options();
    return BitmapFactory.decodeFile(myJpgPath, options);
}

public static void removeFile(String fileName) {
    String filePath = getFilePath(fileName);
    File file = new File(filePath);
    if (file.exists()) {
        file.delete();
    }
}

public static void removeFile(File file) {
    if (file.isFile()) {
        file.delete();
        return;
    }
    if (file.isDirectory()) {
        File[] childFiles = file.listFiles();
        if (childFiles == null || childFiles.length == 0) {
            file.delete();
            return;
        }

        for (int i = 0; i &lt; childFiles.length; i++) {
            removeFile(childFiles[i]);
        }
        file.delete();
    }
}

public static void removeAll() {
    String filePath = getSDCardPath() + DEFAULT_DIR;
    File file = new File(filePath);
    if (file.exists()) {
        removeFile(file);
    }

    //再建一个空文件夹
    File directory = new File(filePath);
    if (!directory.exists()) {
        directory.mkdir();
    }
  }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
