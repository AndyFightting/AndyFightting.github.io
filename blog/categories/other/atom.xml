<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | 阿贵]]></title>
  <link href="http://andyfightting.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://andyfightting.github.io/"/>
  <updated>2016-08-02T09:00:17+08:00</updated>
  <id>http://andyfightting.github.io/</id>
  <author>
    <name><![CDATA[guimingsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[韩语]]></title>
    <link href="http://andyfightting.github.io/blog/2016/06/22/hanyu/"/>
    <updated>2016-06-22T18:46:52+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/06/22/hanyu</id>
    <content type="html"><![CDATA[<p>모음元音:ㅏ ㅓ ㅗ ㅜ ㅣ ㅡ ㅐ ㅔ ㅚ ㅟ ㅑ ㅕ ㅛ ㅠ ㅒ ㅖ ㅘ ㅙ ㅞ ㅢ</p>

<p>자음子音:ㅂ ㅍ ㅃ ㅁ ㄷ ㅌ ㄸ ㄴ ㄹ ㅈ ㅊ ㅉ ㅅ ㅆ ㄱ ㅋ ㄲ ㅎ</p>

<p>받침收音:ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅇ 实际收音只有这7种，双收音就发其中一种！</p>

<p>ㅅ ㅈ ㅊ ㅌ ㅎ ㅆ 都收 ㄷ 音。</p>

<h4>第一到十课</h4>

<p>아이小孩， 아우弟弟， 어이怎么，오이黄瓜，이牙齿，바보傻瓜，비雨，삐삐BB机，아빠阿爸，파葱，피血，무萝卜，모苗，나무树，다리腿 桥，또又，오리鸭子，머리头，나비蝴蝶，토마토西红柿，따다采摘，배梨，애나무小树，누르다压，모으다聚集， 베麻布，모래沙子，누에蚕，위胃，뇌脑，뒤后，되다成为，부르다叫，지구地球，바지裤子，치마裙子，마차马车，찌다蒸，짜다咸，사자狮子，수저勺 筷子，아저씨大叔，쏘다射击，구두皮鞋，가구歌手，까치喜鹊，코끼리大象，코鼻子，카메라相机，호수湖，휴지废纸，야구棒球，야자椰子，여자女子，소녀少女，요리菜，차표车票，유리玻璃，뉴스新闻，얘喂，걔那孩子，예从前，시계钟表，과자点心饼干，기와瓦，더하기相加，추수秋收，돼지猪，궤柜子，궤도轨道，의사医生，의자椅子，국汤，목脖子，눈眼睛，문门，걷다走路，굳다硬，밀小麦，달月亮，마음心， 남别人，밥饭，입嘴，공장工厂，강江，맛味道，낮白天，낫镰刀，팥小豆，끝结束，좋다好，쌓다堆，밖外面，동녘东方，옆旁边</p>

<p>안녕하세요你好，안녕히 가세요再见，안녕히 계세요再见，또 만나요回见，누구세요谁呀，저예요我啊，어서 오세요快请进， 반갑습니다见到你很高兴，여기에 앉으세요请坐这里，감사합니다谢谢，네 고맙습니다好的 谢谢，괜찮습니다没关系，신문 주세요请给我报纸，어느 신문요什么报纸，중국 신문요中国报纸，여기가 어디예요这是什么地方，중국대사관이 멀어요这儿离中国大使馆远吗，안 멀어요,가까워요不远，很近，어디 가세요去哪儿，학교에 가요去学校白天，</p>

<h4>第十一到二十课</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日语]]></title>
    <link href="http://andyfightting.github.io/blog/2016/03/27/japanese/"/>
    <updated>2016-03-27T18:46:52+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/03/27/japanese</id>
    <content type="html"><![CDATA[<h2>一</h2>

<p><strong>平假名：</strong></p>

<p>あa いi うu えe おo 、かka きki くku けke こko 、さsa しsi すsu せse そso 、たta ちchi つtsu てte とto 、なna にni ぬnu ねne のno 、はha ひhi ふfu へhe ほho 、まma みmi むmu めme もmo 、やya ゆyu よyo 、らra りri るru れre ろro 、わwa をwo 、んn 。</p>

<p><strong>片假名：</strong></p>

<p>アイウエオ、カキクケコ、サシスセソ、タチツテト、ナニヌネノ、ハヒフヘホ、マミムメモ、ヤユヨ、ラリルレロ、ワヲ、ン。</p>

<!--more-->


<p><strong>生疏单词：</strong></p>

<p>出迎え：でむかえ　迎接。手帳：てちょう　记事本。デパート：百货商店。マンション：公寓。レストラン：餐馆。受付：うけつけ　接待处。バーゲン会場：大卖场。エスカレーター：自动扶梯。スイッチ：开关。ビデオ：录像机。サッカーボール：足球。ビール：啤酒。交番：こうばん　派出所。警察署：けいさつしょ　警察局。八百屋：やおや　蔬菜店。床屋：とこや　理发店。浴室　よくしつ。台所　だいどころ　厨房。ベランダ　阳台。エアコン 空调。リモコン　遥控器。まな板　まないた　切菜板。包丁　ほうちょう　菜刀。 流し　ながし 洗碗池。オーブン　烤箱。電子レンジ 微波炉。ドライヤ　吹风机。 タオル　毛巾。せっけん　香皂。 シャンプー　洗发水。トイレットペーパー　卫生纸。枕　まくら　枕头。掛け布団　かけぶとん　被子。電気スタンド　台灯。 目覚まし時計　めざましどけい　闹钟。押し入れ　おしいれ　壁橱。 座布団　ざぶとん　坐垫。 畳　たたみ　草席。</p>

<p><strong>语法：</strong></p>

<p>〜は〜です。〜は〜ではありません。〜は〜ですか。〜の〜。〜に〜があります/います。〜は〜にあります/います。〜と〜。？＋も＋否定。誰もいません。何もいません。</p>

<p><strong>常用句子：</strong></p>

<p>おはようございます。こんにちは。さようなら。こんばんは。おやすみなさい。すみません。ありがとうございます、いいえ、どういたしまして。いただきます。ごちそうさまでした。はい、そうです。いいえ、ちがいます。どうも、すみまえん。どうぞ、よろしく。こちらこそ。これは何ですか。トイレはどこですか。これはおいくらですか。それおください。ご趣味は何ですか。失礼ですが、お仕事は何ですか。ご出身はどちらですか。すみませんですが。</p>

<p><strong>亲属称谓</strong></p>

<p>祖父　そふ。祖母　そぼ。父　ちち。母　はは。息子　むすこ。娘　むすめ。兄弟　きょうだい。兄　あに。姉　あね。弟　おとうと。妹　いもうと。おじ、おば。</p>

<p><strong>数字</strong></p>

<p>れい、ぜろ0　いち1　に2　さん3　し、よん4　ご5　ろく6　しち、なな7　はち8　く、きゅう9 じゅう10 ひゃく百　せん千　まん万　おく亿　れいてんいち0.1　さんぶんのに2/3　</p>

<p>さんびゃく300  ろっぴゃく600　 はっぴゃく800  　</p>

<p>さんぜん3000　はっせん8000 　いっせんまん一千万 　 いちおく一亿</p>

<h2>二</h2>

<p><strong>生疏单词</strong></p>

<p>ゆうべ。あさって。　毎月まいつき。毎年まいとし。フェリー渡轮。髪をとかします。歯をみがきます。靴をはきます。靴を脱ぎます。かぎを開けます。かぎをかけます。電話おかけます。切手をはります。ファックスを送ります。お金を払います。電気をつけます、消します。料理を作ります。シャワーを浴びます。申込書　もうしこみしょ　申请书。プレゼント。パンルレト。チケット。ボールペン。速達そくたつ。チョコレート。届きます　とどきます　收到。習います　ならいます、教えます　おしえます。チンジャオロース。ゆでる　煲汤。チャーハン。</p>

<p><strong>语法</strong></p>

<p>〜ます/ません。　〜ました/ませんでした。时间+に+动。 〜から〜まで。〜は〜。〜ごろ。〜へ行きます。〜から来ます。〜で+动。 名+と。　〜から〜まで。たしか〜。まっすぐ〜。〜はいつですか。たしか〜だろです。地で〜します。〜か〜。动作对象を。 动作场所で。〜に〜をあげます。〜に〜をもらいます。〜に〜を送ります。〜にあいます。工具で〜を动。〜からもらいます。</p>

<p><strong>常用句子</strong></p>

<p>いまなんじですか。何時から何時まで働きますか。いつ始まりますか。来週の土曜日です。お宅はどちらですか。何で行きますか。うちには子供がいません。お先に失礼します。お疲れ様でした。〜をください。〜を食べますか。何をしますか。いらっしゃいませ。行ってきます、いってまいります。いってらっしゃい。いらっしゃいませ。かしこまりました。お邪魔します。これからひる昼ごはんですか。いっしょにいきます。日本語で手紙を書きます。太りますよ。さっき、たった今。よっかたです。切符売り場はどこですか。〜までいくらですか。何時発ですか。〜までどのぐらいかかりますか。</p>

<p><strong>时间和星期</strong></p>

<p>いちじ1时　いっふん1分　にじ2时　にふん2分　さんじ3时　さんぷん3分　よじ4时　よんぷん4分　ごじ5时　ごふん5分　ろくじ6时　ろっぷん6分　しちじ7时　ななふん7分　はちじ8时　はっぷん8分　くじ9时　きゅうふん9分　じゅうじ10时　じゅっぷん10分　なんぷん几分</p>

<p>月曜日げつようび　火曜日かようび　水曜日すいようび　木曜日もくようび　金曜日きんにょうび　土曜日どようび　日曜日にちようび　何曜日なんょうび</p>

<p>月都是读がつ、但　每月：まいつき</p>

<p>いち1　に2　さん3　し4　ご5　ろく6　しち7　はち8　く9　じゅう10　じゅういち11　じゅうに12</p>

<p>特殊号</p>

<p>ついたち1号　ふつか2号　みっか3号　よっか4号　いつか5号　むいか6号　なのか7号　ようか8号　ここのか9号　とおか10号　はつか20号 じゅうよっか14号　なんにち何日 其他的就是〜にち。</p>

<h2>三</h2>

<p><strong>生疏单词</strong></p>

<p>梅雨つゆ。霧きり。雷かみなり。虹にじ。蒸し暑い　むしあつい。汚い　きたない。ヒマワリ。バラ。座ります　すわります。かたち　形。ネクタイ。布　ぬの。片づけます　かたづけます 整理。短い　みじかい。まじめ。唇　くちびる。舌　した。首くび。肩かた。腕うで。ベンチ。点字ブロック。階段　台阶。自動改札口。自動券売機。運賃表　票价表。網棚　あみだな。</p>

<p><strong>语法</strong></p>

<p>あまり＋否定。あつい&ndash;>あつくない。あつい&ndash;>あつかった&ndash;>あつくなかった。〜すきです。韓国語がわかります。１は２より〜です。１より２のほが〜です。中国は日本より広いです。日本より中国のほが広いです。１は２ほど+否定。神戸は大坂ほどにぎやかではありません。</p>

<p><strong>常用句子</strong></p>

<p>ちょうどいいです。すばらしいながめですね。本当に。どんなお土産をかいますか。いかがですか。今結構です。気に入りますか。運転ができませんから、いつも電車です。迷いますね。お入り下さい。かまいません。いくらぐらいかかりますか。そこお左(ひだり)に曲(ま)がってください。ここで止めて下さい。〜どこにあるか知らない。すぐにいきます。</p>

<p><strong>程度副词</strong></p>

<p>とても。たいへん。すこし。ちょっと。あまり。ぜんぜん。</p>

<p><strong>10以内特殊量词</strong></p>

<p>ひ1　ふ2　み3　よ4　いつ5　む6　なな7　や8　ここ9　とお10
ひとつ　ふたつ　みっつ　よっつ　いつつ　むっつ　ななつ　やっつ　ここのつ　とお</p>

<p><strong>形态变化</strong></p>

<p>一类形容词的过去式：い变成かった。楽しい　————》楽しかった、楽しくなかった。</p>

<p>动词ます形：把末尾ます去掉。</p>

<p>动词て形：这个稍微复杂点&hellip;</p>

<p>1.一类动词一般是去掉ます后加て。但有几个特殊情况：きーーいて　ぎーーいで　び、み、にーーんで　ち、り、いーーって　しーーして。</p>

<p>2.二类和三类动词都是ます去掉加て。</p>

<p>3.口诀：う、つ、る促音变，ぬ、ふ、む拨音变，く、ぐ结尾い音变，以し结尾して变，特殊いく促音变。</p>

<p>~て或~てから表示动作相继发生。</p>

<p>~てください。表请求。</p>

<p>~ています。正在进行。</p>

<p>~てもいいです。&hellip;也可以</p>

<p>~てはいけません。&hellip;不可以</p>

<p>一类形容词的て形：いーーくて、二类形容词+で　表并列。</p>

<p>〜ています。表动作结束后留下的持续结果的状态。比如我有一辆车，我认识某人。</p>

<p>名+が欲しいです。想要。。。</p>

<p>名+をたいです。想。。。</p>

<p>形+なります・します。</p>

<p>ない形：</p>

<p>1.一类动词：去掉ます、最后一个音变成あ段+ ない。（い要变成わ）</p>

<p>2.去掉ます＋ない。</p>

<p>2.きますーーこない、　しますーーしない。</p>

<p>ないでください。不要   なければなりません。必须。 なくてもいいです。不&hellip;也可以。</p>

<p>动词基本型：最后的发音为う段：う、く、す、つ、ぬ、ふ、む、ゆ、る。如かきーーかく。きますーーくる。しますーーしる。</p>

<p>动词基本型+ことができます。会什么&hellip;</p>

<p>动词た形：动词て形的てーーた、でーーだ。た形表示过去。</p>

<p>日语的简体形和敬体形：</p>

<p>敬体即~ます。〜です。简体不用。“基本型”“ない形”“た形”不加ます、です都是简体形。</p>

<p>动たり、动たり　します。举例</p>

<p>一形かったり　一形かったりです。二形だったり　二形だったりです。名だったり　名だったりです。</p>

<p>简体+と思います。认为&hellip;</p>

<p>动词简体+の：名词化。手紙を出すのを忘れました。　</p>

<p>修饰名词的小句中的主语用が不用は。私が知らない人から手紙が来ました。</p>

<p>动词去掉ます+ながら：边做某事。李さんはテリビを見ながら食事をしています。</p>

<p>名词のとき、动基時、一形時、二形な時。&hellip;的时候。一次性个别的用 時に。</p>

<p>あげます、もらいます、くれます。给。 动て+あげます、もらいます、くれます。给某人做某事。</p>

<p>命令型：一类动词基本型最后变成え段上的音。二类动词基本型る变ろ。三类くる&ndash;こい、する&ndash;しろ。</p>

<p>请&hellip;.：去掉ます＋なさい。</p>

<p>禁止：基本型+な。</p>

<p>意志形：当场表示决心或者意志。一类动词基本型最后因变お段加长音う。二类动词る变よう。三类こよう、しよう。</p>

<p>说话之前已经形成的意志：动基+つもりです、ことにします、ことになります、そうです。</p>

<p>动+ておきます。准备&hellip;</p>

<p><strong>单词</strong></p>

<p>简体+かもしれません　也许。仲（なか）がいいですね。关系好。もしかしたら　也许。つい一不小心。お久（ひさ）しぶりです　好久不见。ご無沙汰しています　久疏问候。あいさつ　寒暄。について　关于。そう言えば　话说&hellip; 売り上げ　销售额。 取り引き　交易。お年寄り　老年人。 通います　かよいます　上学，往来。踊ります　おどります　跳舞。しばらく　好久。それに　累加关系 而且。引っ越し　搬迁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黄山之旅]]></title>
    <link href="http://andyfightting.github.io/blog/2015/12/31/huang-shan/"/>
    <updated>2015-12-31T13:31:16+08:00</updated>
    <id>http://andyfightting.github.io/blog/2015/12/31/huang-shan</id>
    <content type="html"><![CDATA[<p>黄山~向往已久，这次终于成行~哈哈~先来感受一下大自然的神奇魅力吧~是不是让人心旷神怡~~
<img src="/myimg/other/IMG_1182.jpg" alt="image" /><!--more-->
<img src="/myimg/other/IMG_1183.jpg" alt="image" />
<img src="/myimg/other/IMG_1185.jpg" alt="image" />
<img src="/myimg/other/IMG_1229.jpg" alt="image" />
上山路上遇到的猴子，呲牙咧嘴的好凶&hellip;连吃东西的姿势都这么霸气&hellip;
<img src="/myimg/other/IMG_0952.jpg" alt="image" />
日落~~能明显的感觉到气温随着太阳的下降而下降&hellip;
<img src="/myimg/other/IMG_1082.jpg" alt="image" />
<img src="/myimg/other/IMG_1102.jpg" alt="image" />
在山脚下遇到的小伙伴，我们一起爬山，一起游玩，一起欣赏美景
<img src="/myimg/other/IMG_1201.jpg" alt="image" />
<img src="/myimg/other/IMG_1199.jpg" alt="image" />
来几张自拍&hellip;
<img src="/myimg/other/IMG_1225.jpg" alt="image" />
<img src="/myimg/other/IMG_1031.jpg" alt="image" />
<img src="/myimg/other/IMG_1040.jpg" alt="image" />
<img src="/myimg/other/IMG_1055.jpg" alt="image" />
最后消失在云雾里
<img src="/myimg/other/IMG_1245.jpg" alt="image" />
<img src="/myimg/other/IMG_1254.jpg" alt="image" />
<img src="/myimg/other/IMG_1260.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式]]></title>
    <link href="http://andyfightting.github.io/blog/2015/12/19/desigin-pattern/"/>
    <updated>2015-12-19T21:51:06+08:00</updated>
    <id>http://andyfightting.github.io/blog/2015/12/19/desigin-pattern</id>
    <content type="html"><![CDATA[<p>我理解的设计模式都是为了让代码模块化，结构化，各司其职，再把各个模块通过"接口"组合起来。封装变化；多用组合少用继承；针对接口编程，不针对实现编程；为交互对象之间的松耦合设计而努力；对扩展开放，对修改关闭。</p>

<h3>1.MVC模式</h3>

<p>看图就可以了，简洁明了~
<img src="/myimg/other/mvc.png" alt="image" /><!--more--></p>

<h3>2.策略模式</h3>

<p>比如有个父类有飞行功能，然后有很多子类的飞行功能各不一样，如果去继承父类然后分别实现不同的飞行行为，这就坑爹了&hellip;具体做法应该是：把飞行行为完全独立出来成一个Interface，然后不同的飞行行为再在单独的类中实现，不同的子类要不同的飞行行为的话就取对应的行为实现对象。</p>

<p>父类：</p>

<pre><code>public class Duck {//父类

public FlyInterface flyInterface;//行为的接口成员变量

public void performFly(){//统一调用的飞行方法
    flyInterface.fly();
}

public void setFlyInterface(FlyInterface fi){//动态改变飞行行为
    flyInterface = fi;
  }
}
</code></pre>

<p>行为接口：</p>

<pre><code>public interface FlyInterface { //行为接口
void fly();//要实现的行为方法
}
</code></pre>

<p>行为的一种具体实现：</p>

<pre><code>public class FlyPatternOne implements FlyInterface {//飞行行为的一种实现，可以有很多个不同的实现
@Override
public void fly() {
    //这里是具体飞行行为代码

  }
}
</code></pre>

<p>某一个子类：</p>

<pre><code>public class SubDuck extends Duck{
public SubDuck(){
    //默认的飞行行为，不同的子类有不同的飞行行为，如 FlyPatternTwo FlyPatternThree...等
    flyInterface = new FlyPatternOne();
  }
}
</code></pre>

<p><img src="/myimg/other/chelue.png" alt="image" /></p>

<p>1,找出可能需要变化之处，把它们独立封装起来，不要和那些不需要变化的代码混合在一起。</p>

<p>2.针对接口编程，而不是针对实现编程。</p>

<p>3.多用组合，少用继承。</p>

<h3>3.观察者模式</h3>

<p>好好看图吧，把它转化为具体代码加深理解
<img src="/myimg/other/guanCha0.jpg" alt="image" />
<img src="/myimg/other/guanCha1.jpg" alt="image" />
<img src="/myimg/other/guanCha2.jpg" alt="image" />
<img src="/myimg/other/guanCha3.jpg" alt="image" /></p>

<p>看完上面例子，下面的设计图也更好理解了。
<img src="/myimg/other/guanCha4.jpg" alt="image" /></p>

<p>使用Java内置的观察者模式
<img src="/myimg/other/guanCha5.jpg" alt="image" />
<img src="/myimg/other/guanCha6.jpg" alt="image" />
<img src="/myimg/other/guanCha7.jpg" alt="image" />
<img src="/myimg/other/guanCha8.jpg" alt="image" /></p>

<p>Swing中的观察者模式
<img src="/myimg/other/guanCha9.jpg" alt="image" /></p>

<p>要点
<img src="/myimg/other/guanCha10.jpg" alt="image" /></p>

<h3>4.装饰模式</h3>

<p>动态的将责任附加到对象上，用对象组合的方式来解决继承滥用的问题。利用继承设计子类的行为是在编译时静态决定的，而且所有的子类都会继承到相同的行为。如果利用组合的做法扩展对象的行为，就可以在运行时动态的进行扩展。类应该多扩展开放，对修改关闭。即在不修改现有代码的情况下可以添加新的行为。</p>

<p>装饰着和被装饰着必须是同一类型，所以通过继承来实现。这里的继承是用来达到“类型一致”的，而不是为了通过继承得到“行为”。“行为”来自装饰着和基础组件，其他与装饰着之间的组合关系。
<img src="/myimg/other/zhuangShi.jpg" alt="image" />
<img src="/myimg/other/zhuangShi0.jpg" alt="image" />
<img src="/myimg/other/zhuangShi1.jpg" alt="image" />
<img src="/myimg/other/zhuangShi2.jpg" alt="image" />
<img src="/myimg/other/zhuangShi3.jpg" alt="image" />
<img src="/myimg/other/zhuangShi4.jpg" alt="image" />
<img src="/myimg/other/zhuangShi5.jpg" alt="image" />
<img src="/myimg/other/zhuangShi6.jpg" alt="image" /></p>

<h3>5.工厂模式</h3>

<p>当每次“new”的时候都会实例化一个类，所以这是用的实现编程而不是接口编程。“工厂”就是一个专门负责产生对象的一个类。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress搭建个人博客]]></title>
    <link href="http://andyfightting.github.io/blog/2015/11/14/jiaocheng/"/>
    <updated>2015-11-14T11:21:39+08:00</updated>
    <id>http://andyfightting.github.io/blog/2015/11/14/jiaocheng</id>
    <content type="html"><![CDATA[<p>本人的博客刚刚搭建好，并绑定了个人域名(<a href="http://guimingsu.com">guimingsu.com</a>)，现将该过程记录下来。</p>

<p><a href="https://pages.github.com/">Github Pages</a>是Github提供的一个免费空间，相当于我们博客的免费托管服务器，我们写的博客就是放这上面的。它可以拥有一个独立的二级域名如xxx.github.io(如果有自己的个人域名，可以用自己的个人域名指向它)，允许开发者提交静态网页文件，用于介绍自己，或者自己的开源项目，可以看作是个人或项目主页。</p>

<p><a href="http://octopress.org/">Octopress</a>“A blogging framework for hackers”，即像写代码似的写博客。一个博客网页生成框架，我们按照它要求的格式写博客内容，然后敲命令<code>rake generate</code>,<code>rake deploy</code>,就可以把网页放到Github服务器上，然后我们就可以看到了啊，它就是一个写博客的工具可以这样理解。</p>

<p>个人域名，这个要自己买了，可以上<a href="http://wanwang.aliyun.com/">阿里云</a>上买，一年几十块，配置后面再讲。在注册阿里云的时候我用的QQ邮箱，就是收不到邮件，换成Gmail就收到了。不知道是我网络问题还是大公司间的任性撕逼，如果你也收不到邮件就换个邮箱注册吧。<!--more--></p>

<ul>
<li><p>在<a href="https://github.com">Github</a>上New repository, 名字为<code>yourNmae.github.io</code>确定提交，这里报错是因为我已经建好了。
<img src="/myimg/other/creat_rep.png" alt="creat_rep" />
之后会生成一个HTTPS连接如 <a href="https://github.com/yourName/yourName.github.io.git">https://github.com/yourName/yourName.github.io.git</a> ,这个连接在之后的Octopress绑定配置中要用。</p></li>
<li><p><a href="http://octopress.org/docs/setup/">Octopress</a>这个步骤比较多一点, 我用的系统是 OS X10.10.5。Octopress要用到ruby环境，且ruby版本要大于等于<code>1.9.3</code>。可以用<code>ruby -v</code>命令看一下ruby版本，我的是版本是<code>2.0.0p643</code>, 没有的话可以看<a href="https://ruby-china.org/wiki/install_ruby_guide">这里</a>安装ruby环境。</p></li>
</ul>


<p>环境装好后从网上下载Octopress框架到本地电脑上，这里我保存到octopress文件夹且放在桌面上</p>

<p>下载： <code>git clone git://github.com/imathis/octopress.git /Users/suguiming/Desktop/octopress</code></p>

<p>然后进入该文件夹：<code>cd  /Users/suguiming/Desktop/octopress</code></p>

<p>然后：  <code>gem install bundler</code></p>

<p>这里可能会报错，说缺少xxx依赖包，可以用<code>gem dependency</code>查看要依赖的包，然后把包都装上再敲上面的命令</p>

<p>然后： <code>bundle install</code></p>

<p>再然后：  <code>rake install</code></p>

<p>这里Octopress就下载安装好了，之后要进行关联配置,把Octopress和Github关联起来，我们就可以把博客放到之前建的Github项目<code>yourNmae.github.io</code>里了。</p>

<p>但关联前还有一个步骤就是SSH key处理。新建一个命令窗口<code>cd ~/.ssh</code>进入目录，<code>ls -a</code>查看内容，这时候一般没有<code>id_rsa</code>及<code>id_rsa.pub</code>这两个文件的，我们现在要创建这两个文件。<code>ssh-keygen -t rsa -C "Github登录账号邮箱@qq.com"</code>,然后按回车回车再回车就生成那两个文件了。然后把<code>id_rsa.pub</code>里的东西全选复制，在<a href="https://github.com/settings/ssh">这里</a>添加一个SSH key即可。</p>

<p>回到octopress的命令窗口，输入命令<code>rake setup_github_pages</code> 此时要求输入Github项目<code>yourNmae.github.io</code>的地址，即前面得到的<code>https://github.com/yourName/yourName.github.io.git</code>,也可在Github中项目里的右下角的HTTPS链接复制过来然后</p>

<pre><code>rake generate
rake deploy
git add .
git commit -m 'say something'
git push origin source
</code></pre>

<ul>
<li>写博客，<code>rake new_post["file name"]</code>新建一个写博客的文件，它会在<code>/source/_posts</code>文件夹里生成,打开它在里面写博客内容就可以了。它是用markdown的方式写，可以在<a href="http://wowubuntu.com/markdown/">这里</a>和<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">这里</a>查看markdown的使用规则，常用的就那几个，熟悉就可以了,大概长这样。推荐使用<a href="http://mouapp.com/">Mou</a>来编写markdown文件，<a href="https://maxiang.io/">马克飞象</a>这个在线编写工具也很好。
  <img src="/myimg/other/write_blog.png" alt="write_blog" />
  写好后保存，<code>rake generate</code>生成博客，<code>rake preview</code>预览博客，在地址栏输入<code>http://localhost:4000/</code>查看，退出预览<code>control+C</code></li>
</ul>


<p>然后提交，之后在地址栏输入<code>yourName.github.io</code>就可以查看了</p>

<pre><code>rake deploy
git add .
git commit -m 'say something'
git push origin source
</code></pre>

<ul>
<li><p>域名绑定，在<code>yourName.github.io</code>项目里新建一个文件，文件名必须是大写的<code>CNAME</code>,内容是你购买的域名如我的域名<code>guimingsu.com</code>,前面不要加www或http,参考<a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/">这里</a>,然后<code>git pull</code>把刚才建的文件同步到本地。
然后在域名购买的服务商那里设置，我用的是<a href="http://www.aliyun.com/">阿里云</a>。登录账号，在控制管理，域名解析中添加域名指向,把图中的<code>andyfightting.github.io</code>换成你自己的，其他的不变,这样域名就配置好了
<img src="/myimg/other/yuming.png" alt="img" />
参考<a href="https://help.github.com/articles/my-custom-domain-isn-t-working/">这里</a>
<img src="/myimg/other/dns_error.png" alt="img" /></p></li>
<li><p>其他个性化配置，如在浏览器显示的icon替换，在source文件夹里面有个文件叫favicon.png，做一个16*16图片替换进去提交，可能不会立即有反应。还有博客的评论系统是用的第三方<a href="https://disqus.com">disqus</a>。在该网站上注册一个账号，然后把账号名填写在<code>/octopress/_config.yml</code>文件中对应的地方，把false改成true。</p></li>
</ul>


<p><img src="/myimg/other/discus.png" alt="img" /></p>

<p>由于访问国外disqus比较慢，我又把评论部分改用国内的<a href="http://duoshuo.com/">多说</a>了，使用方法都类似的，具体配置请看<a href="http://www.tuicool.com/articles/VbqYNjn">这里</a>,里面还说了性能优化可以跟着改改，提高网页的响应速度。</p>
]]></content>
  </entry>
  
</feed>
