<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | 阿贵]]></title>
  <link href="http://andyfightting.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://andyfightting.github.io/"/>
  <updated>2016-11-19T12:33:45+08:00</updated>
  <id>http://andyfightting.github.io/</id>
  <author>
    <name><![CDATA[guimingsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts + Spring + MyBatis 框架搭建]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/struts-spring-mybatis/"/>
    <updated>2016-11-17T09:22:51+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/struts-spring-mybatis</id>
    <content type="html"><![CDATA[<h4>基本信息：</h4>

<p><code>Mac OS 10.11</code>, <code>Eclipse Neon</code>, <code>JDK1.8</code>, <code>Tomcat7</code>, <code>struts2.5.5</code>, <code>spring4.3.4</code>, <code>mybatis3.4.1</code>,<code>mybatis-spring1.3</code>,<code>mysql数据库</code></p>

<h4>结构简介：</h4>

<pre><code>用struts2来控制方法调用和页面跳转，jps和Action通过strtus2的标签方式传值(OGNL)。
Action负责业务逻辑处理，Action调用Service接口，Service接口注入某个Service的实现，
在Service的实现里调用Dao来处理数据库。
而Dao是用Mybatis通过对应的xml文件来映射的,
且Action里的Service实现类注入和Service实现类里的Dao注入,Dao的Section注入，
都是通过Spring配置文件实现的。
</code></pre>

<h4>截图:</h4>

<p><img src="/myimg/java/ssm_index.png" alt="" />
<img src="/myimg/java/ssm_list.png" alt="" />
<img src="/myimg/java/ssm_json.png" alt="" />
<img src="/myimg/java/ssm.png" alt="" /></p>

<p><a href="/mysrc/java/TestDynamicWeb.zip">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate 的简单使用]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/hibernate/"/>
    <updated>2016-11-17T09:20:12+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/hibernate</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 依赖注入]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/spring-ioc/"/>
    <updated>2016-11-17T09:17:48+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/spring-ioc</id>
    <content type="html"><![CDATA[<p><a href="https://spring.io/">Spring</a>是一个大东西，框架集合。Spring MVC, Spring AOP, Spring IoC&hellip;等等。先看看Spring IoC(Inversion of Control)控制反转。就是把原先要手动 new 一个对象，现在只要在Srping 的配置文件里配置就可以了，从主动控制对象，到被动接收对象，这就叫控制反转，也叫依赖注入(dependency injection)！ 依赖注入是Spring的核心机制，把对象之间的依赖关系转为用配置文件来管理，这有赖于它的核心组件 Beans, Core, Context 。</p>

<p><img src="/myimg/java/spring_core.png" alt="" /></p>

<p>开始之前要下载Spring jar包，但是官网上只看到了maven 和 gradle 的添加方式，要手动下载jar包还不好找呢，藏得跟宝藏似的。<a href="http://repo.spring.io/release/org/springframework/spring/">Spring jar 包下载</a>，还需要它的依赖包 <a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi">Commons Logging</a>。</p>

<p><img src="/myimg/java/spring_jar.png" alt="" /></p>

<p>把上面的包下载下来添加到项目里，然后 Add to build path。</p>

<p><img src="/myimg/java/spring_add.png" alt="" /></p>

<p>Spring 可以用注解方式注入和xml方式注入。</p>

<h5>1.注解的方式注入一个接口的实现</h5>

<p>接口定义</p>

<pre><code>public interface MessageInterface {
   public String getMessage();
   public String getName();
}
</code></pre>

<p>操作Action</p>

<pre><code>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component //必须要
public class MessageAction {

final private MessageInterface service;

@Autowired //可不要
public MessageAction(MessageInterface service) {
    this.service = service;
}

public void printMessage() {
    System.out.println(this.service.getMessage() + this.service.getName());
  }
}
</code></pre>

<p>测试类</p>

<pre><code>import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.*;

@Configuration //可不要
@ComponentScan //必须要
public class Application {
    @Bean
    MessageInterface injectImp() {
        return new MessageInterface() {
            public String getMessage() {
              return "Hello World!";
            };

        public String getName(){
            return "sgm";
        }
    };
}

  public static void main(String[] args) {
      ApplicationContext context = new AnnotationConfigApplicationContext(Application.class);
      MessageAction printer = context.getBean(MessageAction.class);
      printer.printMessage();
  }
}
</code></pre>

<p>结果打印出</p>

<pre><code>Hello World!sgm
</code></pre>

<pre><code class="">@Configuration 用于标注一个类，表示bean定义的源文件
@ComponentScan  用于标注一个类，表示扫描指定包中的@Component标注的类。通过该实例得到 ApplicationContext
@Component  用于标注一个类组件，然后通过 ApplicationContext 对象获取
@Bean 用于注入一个实例对象，相当于Spring &lt;bean&gt;XML里的配置
@Autowired  用于标注setter方法，构造器，包含多个参数的方法，集合等等，用于自动注入绑定实例
</code></pre>

<h5>2.用xml的方式注入一个接口的实现</h5>

<p>如下，UserService是接口，里面定义一个print()方法。UserServiceImp是UserService的一个实现类，实现print(&ldquo;hello wrold&rdquo;)。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

    &lt;bean id="userService" class="com.sgm.implement.UserServiceImp"/&gt;

&lt;/beans&gt;
</code></pre>

<p>userService.print()就会打印出绑定实现类里的"hello wrold"。</p>

<pre><code> ApplicationContext context =  new ClassPathXmlApplicationContext("com/sgm/spring/bean.xml");
 UserService userService = (UserService) context.getBean("userService");
 userService.print();
</code></pre>

<p>用xml的方式还可以通过类的构造函数注入，上面的例子是通过属性的set方法注入的。</p>

<pre><code>&lt;bean id="serviceProvider" class="com.sgm.service.ServiceProvider"&gt;
    &lt;constructor-arg ref="userService"&gt;&lt;/constructor-arg&gt;  
&lt;/bean&gt; 

&lt;bean id="userService" class="com.sgm.implement.UserServiceImp"/&gt;
</code></pre>

<p>xml默认都是注入一个单例对象的，即bean的属性 scope = &ldquo;singleton&rdquo; 为默认值。如果要每次都注入一个新对象，则设置bean的属性 scope = &ldquo;prototype"。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native Demo]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/14/react-native/"/>
    <updated>2016-11-14T19:46:09+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/14/react-native</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringMVC + MyBatis 框架搭建]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/14/springmvc-plus-mybatda-jian/"/>
    <updated>2016-11-14T19:34:43+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/14/springmvc-plus-mybatda-jian</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
