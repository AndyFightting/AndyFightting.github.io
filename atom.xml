<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[阿贵]]></title>
  <link href="http://andyfightting.github.io/atom.xml" rel="self"/>
  <link href="http://andyfightting.github.io/"/>
  <updated>2016-11-28T21:17:56+08:00</updated>
  <id>http://andyfightting.github.io/</id>
  <author>
    <name><![CDATA[guimingsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native 问题汇总]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/28/react-native-run-bug/"/>
    <updated>2016-11-28T18:46:09+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/28/react-native-run-bug</id>
    <content type="html"><![CDATA[<p>Android 设备:小米 red note MUI 8.0, iOS 设备:iPhone 6Plus 8.3</p>

<h5>1.运行不起来</h5>

<p>按照<a href="https://facebook.github.io/react-native/docs/getting-started.html#content">官网</a>的步骤一步一步下来运行报：</p>

<pre><code>com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallException: Failed to establish session
</code></pre>

<p><a href="https://github.com/facebook/react-native/issues/6499">这里</a>说小米系列的手机都这样，我们平时用Android Studio调试运行不是会弹出个弹出框问是否安装吗？这是用USB链接的，所以没问题，但是用命令就掉动不起来那弹出框&hellip;
<img src="http://andyfightting.github.io/myimg/java/react_error_xm0.png" alt="" /></p>

<p>解决办法如下，关键是第4步，关闭小米的优化
<img src="http://andyfightting.github.io/myimg/java/react_error_xm1.png" alt="" /></p>

<h5>2.运行不起来</h5>

<p>报错：</p>

<pre><code>com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallException: Unable to upload some APKs
</code></pre>

<p>解决：把 /项目/android/build.gradle 文件里的 <code>classpath 'com.android.tools.build:gradle:1.3.1'</code> 改成 <code>classpath 'com.android.tools.build:gradle:1.2.3'</code>就可以了&hellip;.why? yeah,why?</p>

<h5>3.白屏</h5>

<p>运行起来了，等啊等，怎么还是白屏？不是有东西的吗？摇啊摇不是有弹出框的吗？弹出框呢？？</p>

<p>解决：进系统设置，应用管理，找到这个应用，点击应用详情里的权限管理，开启显示悬浮框。刷新一下再摇一摇就有弹出框了。</p>

<h5>4.Could not connect to development server</h5>

<p>摇啊摇弹出框后，点击最后的 <code>Dev Settings</code> ，然后设置 <code>Debug server host &amp; port for device</code> 为<code>本机IP:8081</code>后返回刷新出现如下错误:</p>

<p><img src="http://andyfightting.github.io/myimg/java/react_error2.png" alt="" /></p>

<p>解决：命令行进入项目文件夹，运行如下命令：</p>

<pre><code>react-native start &gt; /dev/null 2&gt;&amp;1 &amp; curl "http://localhost:8081/index.android.bundle?platform=android" -o "android/app/src/main/assets/index.android.bundle"
</code></pre>

<p>如果提示没有 assets 文件夹，则先手动建一个再运行。之后就能真机运行起来了：</p>

<p><img src="http://andyfightting.github.io/myimg/java/react_android.png" alt="" /></p>

<h5>iOS模拟器Cmd+R不刷新，Cmd+D也没弹出框</h5>

<p>解决：要开启模拟器的键盘链接。模拟器菜单<code>Hardware</code>-><code>Keyboard</code> 选中 <code>Connect Hardware Keyboard</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 基础知识]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/26/react-native-basic/"/>
    <updated>2016-11-26T11:16:25+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/26/react-native-basic</id>
    <content type="html"><![CDATA[<h4>属性</h4>

<h4>布局</h4>

<h4>事件</h4>

<h4>网络</h4>

<h4>存储</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React 基础知识]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/24/react-javascript/"/>
    <updated>2016-11-24T14:31:57+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/24/react-javascript</id>
    <content type="html"><![CDATA[<h4>React 的核心思想是：封装组件!React 应用都是构建在组件之上，各个组件维护自己的状态和 UI，当状态变更，自动重新渲染自身组件。组件的第一个字母必须大写,组件只能包含一个顶层标签。</h4>

<h4>Declarative</h4>

<p><a href="https://facebook.github.io/react/">React</a> 可以很好的创建交互式组件，设计不同状态下的组件，并且React可以根据组件的不同参数高效的刷新渲染。这样的组件可以让你的代码更加的可预测并且更方便调试。</p>

<h4>Component-Based</h4>

<p>基于组件，封装一个组件，让它们管理自己的状态，然后用它们去组成更加复杂的UI。由于组件的逻辑是写在JavaScript里的而不是模板里，这样你可以很轻松的让它穿梭于复杂的数据之间，并且在DOM外保持自己的状态。</p>

<h4>Learn Once, Write Anywhere</h4>

<p>我们不假定你现在的技术栈是怎样的，所以你可以不用重写已存在的代码来用React开放新的功能。React也可以在服务器端渲染，也可以用React Native创建强大的移动应用。</p>

<h4>A Simple Component</h4>

<p>React 组件调用 <code>render()</code> 方法来输入参数然后返回要显示的样子。这个例子用一个类似XML语言的我们称之为JSX，通过<code>this.props</code>输入数据传到组件内部可以被<code>render()</code>方法获取。使用React的话，JSX是可选的，不是必须要使用的。试着点击<code>Complied JS</code>去看看通过JSX编译器产生的原生的JavaScript 代码。</p>

<h4>A Stateful Component</h4>

<p>除了通过<code>this.props</code>来传入参数，组件可以通过<code>this.state</code>来维护自己内部状态的数据。当组件的状态数据改变时，渲染器就会重新调用<code>render()</code>方法来刷新。</p>

<h4>An Application</h4>

<p>使用<code>props</code>和<code>state</code>我们可以收集一个小型的代办事项申请。这个例子用<code>state</code>来跟踪当前列表和用户输入的数据。虽然事件处理程序似乎是呈现内联,他们会通过事件代理被收集和使用。</p>

<h4>A Component Using External Plugins</h4>

<p>React 是灵活的，并且提供了一个钩子来和库或框架进行链接。这个例子使用<code>remarkable</code>,一个外部的 Markdown 库，来实时转化文本内容。</p>

<p>哎呀~ 自己翻译果然别扭&hellip;😞  React 是什么呢？React 是Facebook 封装的一组JS代码库：</p>

<p><img src="http://andyfightting.github.io/myimg/java/react.png" alt="" /></p>

<p>按它规则可封装一个一个模块组件，这个模块组件有自己的状态，自己的逻辑等，它是一个独立的东西，然后把这样的组件一个一个组合起来。我理解的这不就是iOS或者Android自定义View 模块化吗？按照React 的规则可以混合着写JavaScript和HTML,这样的一个组件就是一个独立的模块化的View。添加组件属性，有一个地方需要注意，就是 class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p>

<p>React 还封装了一个自己的虚拟的DOM，通过这个Virtual DOM去更新真实的DOM，由这个Virtual DOM管理真实DOM的更新。因为如果大面积的操作 DOM，性能会是一个很大的问题，所以 React 实现了一个虚拟 DOM，组件 DOM 结构就是映射到这个虚拟 DOM 上，React 在这个虚拟 DOM 上实现了一个 <a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html">diff</a> 算法，当要更新组件的时候，会通过 diff 寻找到要变更的 DOM 节点，再把这个修改更新到浏览器实际的 DOM 节点上，所以实际上不是真的渲染整个 DOM 树。这个虚拟 DOM 是一个纯粹的 JS 数据结构，所以性能会比原生 DOM 快很多。要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性。给组件设置一个 <code>ref</code> 属性，然后用 <code>this.refs.[refName]</code> 就会返回这个真实的 DOM 节点对象。</p>

<h4>Hello World</h4>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script src="../build/react.js"&gt;&lt;/script&gt;
    &lt;script src="../build/react-dom.js"&gt;&lt;/script&gt;
    &lt;script src="../build/browser.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="example"&gt;&lt;/div&gt;

    &lt;script type="text/babel"&gt;
    var MyComponent = React.createClass({
      render: function() {
        return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;
      }
    });

    ReactDOM.render(&lt;MyComponent name="World !" /&gt;,
                    document.getElementById('example') );
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>上面的代码中用React的语法自定义了一个组件叫<code>MyComponent</code>,这个组件返回一个块区间，里面显示 Hello + 这个组件的<code>name</code>属性值。注意script 的type 要声明为<code>text/babel</code>。这样就可以在其他地方使用这个自定义的组件了。可以把 <code>props</code> 看作是组件的配置属性，在组件内部是不变的，只是在调用这个组件的时候传入不同的属性值来定制显示这个组件。当组件状态 <code>state</code> 有更改的时候，React 会自动调用组件的 <code>render()</code> 方法重新渲染整个组件的 UI。<code>this.props</code> 对象的属性与组件的属性一一对应，<code>this.props.children</code> 表示组件的所有子节点。需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。上面的代码把 HTML 直接嵌入了 JS 代码里面了，这就是 React 提出的一种叫 JSX 的语法。把原来网页设计的代码分离，现在又融合了！</p>

<p><img src="http://andyfightting.github.io/myimg/java/react_hello.png" alt="" /></p>

<p>Hello World 运行起来了！嗯~ 我已经成功了一半！😆</p>

<h4>组件组合</h4>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script src="../build/react.js"&gt;&lt;/script&gt;
    &lt;script src="../build/react-dom.js"&gt;&lt;/script&gt;
    &lt;script src="../build/browser.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="example"&gt;&lt;/div&gt;

    &lt;script type="text/babel"&gt;

    var Avatar = React.createClass({
        render: function() {
            return (
                &lt;div&gt;
                    &lt;ProfilePic username={this.props.username} /&gt;
                    &lt;ProfileName username={this.props.username} /&gt;
                &lt;/div&gt;
            );
        }
       });

    var ProfilePic = React.createClass({
        render: function() {
            return (
                &lt;img src={'https://gss0.bdstatic.com/70cFsj3f_gcX8t7mm9GUKT-xh_/avatar/100/r6s1g6.gif'} /&gt;
            );
        }
    });

    var ProfileName = React.createClass({
        render: function() {
            return (
              &lt;div&gt;
                &lt;a href={'http://guimingsu.com'}&gt;
                    {this.props.username}
                &lt;/a&gt;
              &lt;/div&gt;
            );
        }
    });

    ReactDOM.render(
        &lt;Avatar username="hello world " /&gt;,
        document.getElementById('example')
      );

    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>这里显示了一个Avatar 组件，这个Avatar 组件是由两个更小的组件ProfilePic和ProfileName组合而成的。父组件和子组件间可以通过<code>props</code>一层一层的传值。Remember: React is all about one-way data flow down the component hierarchy.</p>

<p><img src="http://andyfightting.github.io/myimg/java/react_hello0.png" alt="" /></p>

<h4>状态变化</h4>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="../build/react.js"&gt;&lt;/script&gt;
    &lt;script src="../build/react-dom.js"&gt;&lt;/script&gt;
    &lt;script src="../build/browser.min.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="example"&gt;&lt;/div&gt;
    &lt;script type="text/babel"&gt;

     var LikeButton = React.createClass({
      getInitialState: function() {
        return {liked: false};
      },

      handleClick: function(event) {
        this.setState({liked: !this.state.liked});
      },

      render: function() {
        var text = this.state.liked ? 'like' : 'haven\'t liked';
        return (
          &lt;p onClick={this.handleClick}&gt;
            You {text} this. Click to toggle.
          &lt;/p&gt;
        );
      }
    });

    ReactDOM.render(
      &lt;LikeButton /&gt;,
      document.getElementById('example')
    );

    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>上面代码是一个 <code>LikeButton</code> 组件，它的 <code>getInitialState</code> 方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。当用户点击组件，导致状态变化，<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。
由于 <code>this.props</code> 和 <code>this.state</code> 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，<code>this.props</code> 表示那些一旦定义，就不再改变的特性，而 <code>this.state</code> 是会随着用户互动而产生变化的特性。即把要跟随某个参数实时变化的代码写在 <code>render: function() {};</code>里，然后在用户调用的方法里调用<code>this.setState({ });</code>方法来改变参数就可以了，因为他们触发<code>render</code>方法。这样就可以根据不同参数值自动显示不同内容。</p>

<h4>生命周期</h4>

<p>组件的生命周期分成三个状态：</p>

<ol>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ol>


<p>React 为每个状态都提供了两种处理函数，<code>will</code> 函数在进入状态之前调用，<code>did</code> 函数在进入状态之后调用，三种状态共计五种处理函数。</p>

<ol>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li>componentWillUnmount()</li>
</ol>


<p>此外，React 还提供两种特殊状态的处理函数:</p>

<ol>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ol>


<p><img src="http://andyfightting.github.io/myimg/java/react_life.png" alt="" /></p>

<p>把这个<a href="https://facebook.github.io/react/docs/thinking-in-react.html">官方例子</a>看完就能收获不少了。主要在于思考，拿到设计图如何拆分模块，如何组建，如何选取放置状态参数，如何看懂别人写好的代码等。<a href="http://andyfightting.github.io/mysrc/java/reactPriceDemo.zip">下载</a></p>

<h5>链接</h5>

<ol>
<li><a href="http://www.cnblogs.com/sakurayeah/category/868210.html">React入门</a></li>
<li><a href="https://babeljs.io/docs/learn-es2015/">ECMAScript 2015</a></li>
<li><a href="http://es6.ruanyifeng.com/">ECMAScript 6入门</a></li>
<li><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8">ES5和ES6的写法对照表</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/24/atom-edit/"/>
    <updated>2016-11-24T14:31:17+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/24/atom-edit</id>
    <content type="html"><![CDATA[<p><a href="https://atom.io/">Atom</a>是由GitHub开发的一款免费开源的编辑器，通过给它安装不同的插件包，就可以变成一款智能的IDE了。这里主要记录一下为了开发<a href="https://facebook.github.io/react-native/">React Native</a>所安装的插件包及基本使用。</p>

<p><a href="https://nuclide.io/">Nuclide</a>是官方推荐的开发React Native的基于Atom的工具。Nuclide 安装好后进入设置，选中<code>Install Recommented Packages on Startup</code>选项，下次启动的时候就会安装Nuclide所建议安装的插件了。</p>

<h4>插件</h4>

<p><strong>atom-react-native-autocomplete :</strong>React Native自动提示。</p>

<p><strong>atom-beautify :</strong> 文件排版格式化。ctrl-alt-b，可以进它的设置里选中 Beauty on Save 自动格式化。</p>

<p><strong>atom-html-preview :</strong> html预览。 ctrl-shift-h
<img src="http://andyfightting.github.io/myimg/java/atom-html-preview.png" width="700" alt="" /></p>

<p><strong>autocomplete-paths :</strong> 文件路径提示</p>

<p><img src="http://andyfightting.github.io/myimg/java/autocomplete-paths.png" width="500" alt="" /></p>

<p><strong>color-picker :</strong>颜色选取器，点击色块即可弹出，或者右键选择 Color Picker.</p>

<p><img src="http://andyfightting.github.io/myimg/java/color-picker.png" width="500" alt="" /></p>

<p><strong>docblockr :</strong> 快捷文档注释</p>

<p><strong>emmet :</strong>web开发神器</p>

<p><strong>file-icons :</strong>给文件加icon</p>

<p><img src="http://andyfightting.github.io/myimg/java/file-icons.png" width="200" alt="" /></p>

<p><strong>highlight-selected :</strong>选中相同的字符串高亮
<img src="http://andyfightting.github.io/myimg/java/highlight-selected.png" width="500" alt="" /></p>

<p><strong>js-hyperclick :</strong> js对象 cmd-点击 跳转</p>

<p><strong>merge-conflicts :</strong>解决版本冲突</p>

<p><strong>minimap :</strong>右边位置小地图
<img src="http://andyfightting.github.io/myimg/java/minimap.png" width="700" alt="" /></p>

<p><strong>pigments :</strong> 显示颜色。 快捷面板里搜 Pigments: Show Palette 可以打开调色板🎨。</p>

<p><img src="http://andyfightting.github.io/myimg/java/pigment.png" width="400" alt="" /></p>

<p><strong>pretty-json :</strong> Json 格式化。Packages->PrettyJson->Prettify</p>

<p><strong>react-snippets :</strong> React代码块快捷输入
<img src="http://andyfightting.github.io/myimg/java/react-snippets.png" width="700" alt="" /></p>

<p><strong>sort-lines :</strong>把列按字母排序。功能键 f5(电脑，设置，键盘里要开启功能选项) 或者 Edit->Lines->Sort</p>

<p><strong>tool-bar :</strong>上面显示工具栏，ctrl-alt-t 开/关
<img src="http://andyfightting.github.io/myimg/java/tool-bar.png" width="500" alt="" /></p>

<p>安装后的插件包不在Atom应用文件夹里，在 <code>/Users/用户名/.atom/packages/</code> 文件夹里。且 <code>.atom</code> 文件夹默认是隐藏的。在命令窗口输入显示文件夹命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//显示隐藏文件
</span><span class='line'>defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder
</span><span class='line'>//隐藏文件
</span><span class='line'>defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</span></code></pre></td></tr></table></div></figure>


<p><img src="http://andyfightting.github.io/myimg/java/packages.png" width="300" alt="" /></p>

<h4>包的默认值修改</h4>

<p>可以直接点击<code>View Code</code>打开包的代码修改。也可以像上面先显示文件夹，找到对应的包，然后修改里面的默认配置。在Settings -> Open Config Folder 也可以打开所有插件包的配置。
<img src="http://andyfightting.github.io/myimg/java/package_change.png" width="700" alt="" /></p>

<h4>快捷键</h4>

<p>ctrl-space : 补全提示 (Mac要把设置->键盘->快捷键->Spotlight 里对应的快捷键取消掉! 不然电脑的优先级更高)</p>

<p>ctrl-alt-b : atom-beautify插件 代码格式化，为什么JSX格式化后有点乱&hellip;</p>

<p>cmd-shift-p : 打开快捷面板</p>

<p>cmd-f : 文件里搜索</p>

<p>cmd-shift-f : 项目里搜索</p>

<p>cmd-alt-[ : 折叠代码</p>

<p>cmd-alt-] : 展开代码</p>

<p>cmd-alt-shift-{ : 折叠所有代码</p>

<p>cmd-alt-shift-} : 展开所有代码</p>

<p>ctrl-[ : 左移动</p>

<p>ctrl-] : 右移动</p>

<p>ctrl-g : 跳转到某行</p>

<p>cmd-\ : 左边目录显示或隐藏</p>

<p>cmd-shift-o : 打开文件夹</p>

<p>cmd-b : 在打开的文件间切换</p>

<p>cmd-delete : 删除光标左边的</p>

<p>ctrl-shift-l : 删除一整行</p>

<p>ctrl-shift-&ldquo;+&rdquo; : 增大字体</p>

<p>ctrl-shift-&ldquo;-&rdquo; : 缩小字体</p>

<p><a href="https://github.com/kompasim/atom-plugins">[92款插件推荐]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struts + Spring + MyBatis]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/18/struts-spring-mybatis/"/>
    <updated>2016-11-18T09:22:51+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/18/struts-spring-mybatis</id>
    <content type="html"><![CDATA[<h4>基本信息：</h4>

<p><code>Mac OS 10.11</code>, <code>eclipse neon</code>, <code>jdk1.8</code>, <code>tomcat7</code>, <code>struts2.5.5</code>, <code>spring4.3.4</code>, <code>mybatis3.4.1</code>,<code>mybatis-spring1.3</code>,<code>mysql数据库</code></p>

<h4>结构简介：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>用struts2的配置文件来控制方法的调用和页面的跳转，
</span><span class='line'>jps和Action通过strtus2标签方式或者EL表达式传值取值。
</span><span class='line'>Action负责业务逻辑处理，Action调用Service接口，Service接口注入某个Service的实现，
</span><span class='line'>在Service的实现里调用Dao来处理数据库。
</span><span class='line'>而Dao是用Mybatis通过对应的xml映射文件来关联的,
</span><span class='line'>且Action里的Service实现注入,Service实现类里的Dao注入,Dao的Section注入，
</span><span class='line'>都是通过Spring配置文件实现的。</span></code></pre></td></tr></table></div></figure>


<h4>截图:</h4>

<p><img src="http://andyfightting.github.io/myimg/java/ssm_index.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssm_list.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssm_json.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssm.png" alt="" /></p>

<p><a href="http://andyfightting.github.io/mysrc/java/SSM.zip">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringMVC + Spring + Hibernate]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/springmvc-hibernate-jian/"/>
    <updated>2016-11-17T19:34:43+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/springmvc-hibernate-jian</id>
    <content type="html"><![CDATA[<h4>基本信息：</h4>

<p><code>Mac OS 10.11</code>, <code>eclipse neon</code>, <code>jdk1.8</code>, <code>tomcat7</code>, <code>spring4.3.4</code>, <code>Hibernate5.2.4</code>,<code>jackson2.5</code>,<code>mysql数据库</code></p>

<h4>截图:</h4>

<p><img src="http://andyfightting.github.io/myimg/java/ssh_frame.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssh_pack.png" alt="" /></p>

<h4>Controller从JSP取值</h4>

<pre><code>//1.使用HttpServletRequest获取
public String addUser(HttpServletRequest request) {
    String name = request.getParameter("name");
    String pass = request.getParameter("password");
    return "/addUser";
}
//2.使用注解
public String addUser(@RequestParam("name") String name,@RequestParam("password") String password) {
    System.out.println(name+password);
    return "/addUser";
}
//3.自动注入Entity属性
public String addUser(User user) {
    System.out.println(user.getName() + user.getPassword());
    return "/addUser";
}
</code></pre>

<h4>Controller传值给JSP</h4>

<pre><code>//1.使用HttpServletRequest 然后setAttribute()，就和Servlet中一样
public String getAllUser(HttpServletRequest request) {
    request.setAttribute("userList", userService.getAllUser());
    return "/index";
}
//2.使用Spring的ModelMap `public class ModelMap extends LinkedHashMap&lt;String, Object&gt;`，ModelMap数据会利用HttpServletRequest的Attribute传值
public String getAllUser(ModelMap modelMap) {
    modelMap.put("userList", userService.getAllUser());
    return "/index";
}
//3.HttpServletReequest的getSession()  
public String getAllUser(HttpServletRequest request) {
    HttpSession session = request.getSession();
    session.setAttribute("userList", userService.getAllUser());
    return "/index";
}
</code></pre>

<p><a href="http://andyfightting.github.io/mysrc/java/SSH.zip">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate 的使用]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/16/hibernate/"/>
    <updated>2016-11-16T09:20:12+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/16/hibernate</id>
    <content type="html"><![CDATA[<p>可以认为MyBatis是半自动化，而Hibernate是全自动化(也可半自动)。MyBatis是面向表和列的SQL查询，而Hibernate是用面向对象和对象属性的 HQL查询。 HQL 查询被 Hibernate 翻译为传统的 SQL 查询从而对数据库进行操作。尽管Hibernate可以直接使用本地 SQL 语句，但还是尽可能的使用 HQL 语句，以避免数据库移植产生的麻烦。在 HQL 中一些关键字比如 SELECT ，FROM 和 WHERE 等，是不区分大小写的，但对象名和属性名是区分大小写的。Hibernate也可以用注解方式来进行对象和表的关系映射，类似于<a href="http://ormlite.com/">OrmLit</a>这样。</p>

<p><img src="http://andyfightting.github.io/myimg/java/hibernate_frame.png" alt="" /></p>

<p>和Mybatis 很像，都是加载配置文件得到SessionFactory, 然后通过SessionFactory获取 Session,然后用Session进行HQL操作。</p>

<p>Hibernate(5.2.4)配置文件</p>

<pre><code>&lt;?xml version="1.0" encoding="GBK"?&gt;  
&lt;!DOCTYPE hibernate-configuration PUBLIC  
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"  
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;
&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
        &lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;
        &lt;property name="connection.url"&gt;jdbc:mysql://localhost:8889/java_db&lt;/property&gt;
        &lt;property name="connection.username"&gt;root&lt;/property&gt;
        &lt;property name="connection.password"&gt;root&lt;/property&gt;
        &lt;!-- 指定连接池里最大连接数 --&gt;
        &lt;property name="hibernate.c3p0.max_size"&gt;50&lt;/property&gt;
        &lt;!-- 指定连接池里最小连接数 --&gt;
        &lt;property name="hibernate.c3p0.min_size"&gt;5&lt;/property&gt;
        &lt;!-- 指定连接池里连接的超时时长 --&gt;
        &lt;property name="hibernate.c3p0.timeout"&gt;3000&lt;/property&gt;
        &lt;!-- 指定连接池里最大缓存多少个Statement对象 --&gt;
        &lt;property name="hibernate.c3p0.max_statements"&gt;100&lt;/property&gt;
        &lt;property name="hibernate.c3p0.idle_test_perxiod"&gt;3000&lt;/property&gt;
        &lt;property name="hibernate.c3p0.acquire_increment"&gt;2&lt;/property&gt;
        &lt;property name="hibernate.c3p0.validate"&gt;true&lt;/property&gt;
        &lt;!-- 指定数据库方言 --&gt;
        &lt;property name="dialect"&gt;org.hibernate.dialect.MySQLInnoDBDialect&lt;/property&gt;
        &lt;!-- 根据需要自动创建数据表 --&gt;
        &lt;property name="hbm2ddl.auto"&gt;update&lt;/property&gt;
        &lt;!-- 显示Hibernate持久化操作所生成的SQL --&gt;
        &lt;property name="show_sql"&gt;true&lt;/property&gt;
        &lt;!-- 将SQL脚本进行格式化后再输出 --&gt;
        &lt;property name="hibernate.format_sql"&gt;true&lt;/property&gt;

        &lt;!-- 下面罗列所有的映射文件 --&gt;
        &lt;mapping resource="com/sgm/config/user.xml" /&gt;

    &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;
</code></pre>

<p>对象到表的映射文件</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 
&lt;hibernate-mapping package="com.sgm.bean"&gt;
   &lt;class name="User" table="user"&gt;
      &lt;id name="id" type="int" column="id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      &lt;property name="name" column="name" type="string"/&gt;
      &lt;property name="password" column="password" type="string"/&gt;
   &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<p>基本使用</p>

<pre><code>public class Main {
    private static SessionFactory factory;
    static{
        try {
            Configuration config = new Configuration().configure("com/sgm/config/hibernate.xml");
            factory = config.buildSessionFactory();
        } catch (Throwable ex) {
            throw new ExceptionInInitializerError(ex);
        }
    }

@SuppressWarnings("unchecked")
public static void main(String[] args) {
    Session session = factory.openSession();
    Transaction transaction = null;
    try {
        transaction = session.beginTransaction();
        //数据库处理

        transaction.commit();
    } catch (Exception e) {
        if (transaction != null)
            transaction.rollback();
        e.printStackTrace();
    } finally {
        session.close();
    }
  }
}
</code></pre>

<p><img src="http://andyfightting.github.io/myimg/java/hibernate_zsg.png" alt="" /></p>

<p>一般情况下，用不带entityName参数的方法就可以了。带entityName的是hibernate在探索不使用pojo类进行O/R，不建议使用。</p>

<h4>查询</h4>

<pre><code>//from后面是对象！不是表名！对象和表在mapper文件里关联好了。hql面向的是对象，不是表！
String hql = "FROM User as u where u.id &gt;= 17 ";
Query&lt;User&gt; query = session.createQuery(hql);
List&lt;User&gt; list = query.getResultList();

//用setParameter设置查询参数，setFirstResult和setMaxResults可用于分页
String hql="from User as u where u.name=? and u.password = :password ORDER BY u.id DESC";
Query&lt;User&gt; query=session.createQuery(hql);
query.setParameter(0, "andy");
query.setParameter("password", "123");
query.setFirstResult(1);//从结果集的那一条开始(包括这一条)
query.setMaxResults(2);//最多几条
List&lt;User&gt; list=query.getResultList();

//query也可以用于批量修改和删除 
String hql = "UPDATE User set name = :name WHERE id &gt;= :id";
//String hql = "DELETE from User WHERE name = :name and id &gt;= :id";
Query&lt;User&gt; query = session.createQuery(hql);
query.setParameter("name", "andy hello");
query.setParameter("id", 19);
int result = query.executeUpdate();
System.out.println("处理了几条数据: " + result);
</code></pre>

<h4><a href="https://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html/querycriteria.html">CriteriaQuery</a> <a href="https://github.com/treehouse/giflib-hibernate/commit/f97a2828a466e849d8ae84884b5dce60a66cf412">废弃更新日志</a></h4>

<p>注意新的创建方式引用的包是 <code>import javax.persistence.criteria.CriteriaQuery</code>,而不是<code>import org.hibernate.criterion.CriteriaQuery</code>!!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//旧的已被废弃
</span><span class='line'>session.createCriteria(User.class) 的创建方式已经被废弃
</span><span class='line'>//改为这样,因为5.2.4的session已经继承了EntityManager，所以可以直接getCriteriaBuilder()。
</span><span class='line'>CriteriaBuilder cb = session.getCriteriaBuilder();
</span><span class='line'>CriteriaQuery&lt;User&gt; query = cb.createQuery(User.class);
</span><span class='line'>Root&lt;User&gt; user = query.from(User.class);
</span><span class='line'>query.select(user).where(cb.equal(user.get("name"), "andy"));
</span><span class='line'>List&lt;User&gt; list = session.createQuery(query).getResultList();</span></code></pre></td></tr></table></div></figure>


<h4>原生SQL</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String sql = "select * from user where id = :tmpId";
</span><span class='line'>NativeQuery&lt;User&gt; nativeQuery = session.createNativeQuery(sql,User.class);
</span><span class='line'>nativeQuery.setParameter("tmpId", 19);
</span><span class='line'>nativeQuery.setFirstResult(1);
</span><span class='line'>nativeQuery.setMaxResults(2);
</span><span class='line'>List&lt;User&gt; list = nativeQuery.getResultList();
</span><span class='line'>//nativeQuery.executeUpdate(); 修改或者删除</span></code></pre></td></tr></table></div></figure>


<h4>one-to-many / many-to-one</h4>

<p>举个栗子： <code>User(单方)----Book(多方)</code>,一个user有多个book, 一个book只属于一个user。</p>

<pre><code>public class User {
    public int id;
    public String name;
    private Set&lt;Book&gt; books = new HashSet&lt;Book&gt;();
    //下面 getter setter
}

public class Book {
    public int id;
    public String name;
    public User user;
    //下面 getter setter
}
</code></pre>

<p>User mapper</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;
&lt;hibernate-mapping package="com.sgm.bean"&gt;
    &lt;class name="User" table="user"&gt;
        &lt;id name="id" type="int" column="id"&gt;
            &lt;generator class="native" /&gt;
        &lt;/id&gt;
        &lt;property name="name" column="name" type="string" /&gt;

        &lt;set name="books" inverse="true" cascade="all"&gt;
            &lt;key column="userId"&gt;&lt;/key&gt;
            &lt;one-to-many class="com.sgm.bean.Book" /&gt;
        &lt;/set&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<p>Book mapper</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;
&lt;hibernate-mapping package="com.sgm.bean"&gt;
    &lt;class name="Book" table="book"&gt;
        &lt;id name="id" type="int" column="id"&gt;
            &lt;generator class="native" /&gt;
        &lt;/id&gt;
        &lt;property name="name" column="name" type="string" /&gt;

        &lt;many-to-one name="user" class="com.sgm.bean.User"&gt;
            &lt;column name="userId"&gt;&lt;/column&gt;
        &lt;/many-to-one&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;
</code></pre>

<p>测试</p>

<pre><code>public class Main {
    private static SessionFactory factory;
    static {
        try {
            Configuration config = new Configuration().configure("com/sgm/config/hibernate.xml");
            factory = config.buildSessionFactory();
        } catch (Throwable ex) {
            throw new ExceptionInInitializerError(ex);
        }
    }

    @SuppressWarnings("unchecked")
    public static void main(String[] args) {
        Session session = factory.openSession();
        Transaction transaction = null;
        try {
            transaction = session.beginTransaction();
            // do some work
            User user = new User();
            user.setName("andy");

            Book book1 = new Book();
            book1.setName("哈利波特");
            book1.setUser(user);

            Book book2 = new Book();
            book2.setName("功夫之王");
            book2.setUser(user);

            user.getBooks().add(book1);
            user.getBooks().add(book2);

            session.save(user);

            transaction.commit();
        } catch (Exception e) {
            if (transaction != null)
                transaction.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
}
</code></pre>

<p><img src="http://andyfightting.github.io/myimg/java/hibernate_om.png" alt="" /></p>

<h4>中文乱码</h4>

<p>用Hibernate 插入中文到MySQL数据库时，即使MySQL数据库设置编码 <code>Character set = utf-8</code> 还是乱码。要改Hibernate 的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;property name="connection.url"&gt;jdbc:mysql://localhost:8889/java_db&lt;/property&gt;
</span><span class='line'>//改为
</span><span class='line'>&lt;property name="connection.url"&gt;&lt;![CDATA[jdbc:mysql://localhost:8889/java_db?useUnicode=true&characterEncoding=utf8]]&gt;&lt;/property&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 依赖注入]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/15/spring-ioc/"/>
    <updated>2016-11-15T09:17:48+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/15/spring-ioc</id>
    <content type="html"><![CDATA[<p><a href="https://spring.io/">Spring</a>是一个大东西，框架集合。Spring MVC, Spring AOP, Spring IoC&hellip;等等。先看看Spring IoC(Inversion of Control)控制反转。就是把原先要手动 new 一个对象，现在只要在Srping 的配置文件里配置就可以了，从主动控制对象，到被动接收对象，这就叫控制反转，也叫依赖注入(dependency injection)！ 依赖注入是Spring的核心机制，把对象之间的依赖关系转为用配置文件来管理，这有赖于它的核心组件 Beans, Core, Context 。</p>

<p><img src="http://andyfightting.github.io/myimg/java/spring_core.png" alt="" /></p>

<p>开始之前要下载Spring jar包，但是官网上只看到了maven 和 gradle 的添加方式，要手动下载jar包还不好找呢，藏得跟宝藏似的。<a href="http://repo.spring.io/release/org/springframework/spring/">Spring jar 包下载</a>，还需要它的依赖包 <a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi">Commons Logging</a>。</p>

<p><img src="http://andyfightting.github.io/myimg/java/spring_jar.png" alt="" /></p>

<p>把上面的包下载下来添加到项目里，然后 Add to build path。</p>

<p><img src="http://andyfightting.github.io/myimg/java/spring_add.png" alt="" /></p>

<p>Spring 可以用注解方式注入和xml方式注入。</p>

<h5>1.注解的方式注入一个接口的实现</h5>

<p>接口定义</p>

<pre><code>public interface MessageInterface {
   public String getMessage();
   public String getName();
}
</code></pre>

<p>操作Action</p>

<pre><code>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component //必须要
public class MessageAction {

final private MessageInterface service;

@Autowired //可不要
public MessageAction(MessageInterface service) {
    this.service = service;
}

public void printMessage() {
    System.out.println(this.service.getMessage() + this.service.getName());
  }
}
</code></pre>

<p>测试类</p>

<pre><code>import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.*;

@Configuration //可不要
@ComponentScan //必须要
public class Application {
    @Bean
    MessageInterface injectImp() {
        return new MessageInterface() {
            public String getMessage() {
              return "Hello World!";
            };

        public String getName(){
            return "sgm";
        }
    };
}

  public static void main(String[] args) {
      ApplicationContext context = new AnnotationConfigApplicationContext(Application.class);
      MessageAction printer = context.getBean(MessageAction.class);
      printer.printMessage();
  }
}
</code></pre>

<p>结果打印出</p>

<pre><code>Hello World!sgm
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Configuration 用于标注一个类，表示bean定义的源文件
</span><span class='line'>@ComponentScan  用于标注一个类，表示扫描指定包中的@Component标注的类。通过该实例得到 ApplicationContext
</span><span class='line'>@Component  用于标注一个类组件，然后通过 ApplicationContext 对象获取
</span><span class='line'>@Bean 用于注入一个实例对象，相当于Spring &lt;bean&gt;XML里的配置
</span><span class='line'>@Autowired  用于标注setter方法，构造器，包含多个参数的方法，集合等等，用于自动注入绑定实例</span></code></pre></td></tr></table></div></figure>


<h5>2.用xml的方式注入一个接口的实现</h5>

<p>如下，UserService是接口，里面定义一个print()方法。UserServiceImp是UserService的一个实现类，实现print(&ldquo;hello wrold&rdquo;)。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

    &lt;bean id="userService" class="com.sgm.implement.UserServiceImp"/&gt;

&lt;/beans&gt;
</code></pre>

<p>userService.print()就会打印出绑定实现类里的"hello wrold"。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ApplicationContext context =  new ClassPathXmlApplicationContext("com/sgm/spring/bean.xml");
</span><span class='line'> UserService userService = (UserService) context.getBean("userService");
</span><span class='line'> userService.print();</span></code></pre></td></tr></table></div></figure>


<p>用xml的方式还可以通过类的构造函数注入，上面的例子是通过属性的set方法注入的。</p>

<pre><code>&lt;bean id="serviceProvider" class="com.sgm.service.ServiceProvider"&gt;
    &lt;constructor-arg ref="userService"&gt;&lt;/constructor-arg&gt;  
&lt;/bean&gt; 

&lt;bean id="userService" class="com.sgm.implement.UserServiceImp"/&gt;
</code></pre>

<p>xml默认都是注入一个单例对象的，即bean的属性 scope = &ldquo;singleton&rdquo; 为默认值。如果要每次都注入一个新对象，则设置bean的属性 scope = &ldquo;prototype"。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MyBatis 的使用]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/14/mybatis/"/>
    <updated>2016-11-14T19:26:25+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/14/mybatis</id>
    <content type="html"><![CDATA[<p>Mybatis是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>

<p>需要两个包：<a href="https://github.com/mybatis/mybatis-3/releases">MyBatis包</a>和<a href="https://www.mysql.com/products/connector/">JDBC Driver for MySQL</a></p>

<p>无论是用过的mybatis和hibernate他们的共同点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.从配置文件(通常是XML配置文件中)得到sessionfactory
</span><span class='line'>2.由sessionfactory产生session
</span><span class='line'>3.在session中完成对数据的增删改查和事务提交等
</span><span class='line'>4.在用完之后关闭session 
</span><span class='line'>5.在java 对象和数据库之间有mapping的配置文件，也通常是xml文件</span></code></pre></td></tr></table></div></figure>


<p>主要XML配置文件中包含了对 MyBatis 系统的核心设置，包含获取数据库连接实例的数据源和决定事务范围和控制方式的事务管理器。通过加载该文件获取SqlSessionFactory。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--对象别名定义 --&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="User" type="com.sgm.java.User" /&gt;
    &lt;/typeAliases&gt;

&lt;!--数据库连接 --&gt;
&lt;environments default="development"&gt;
    &lt;environment id="development"&gt;
        &lt;transactionManager type="JDBC" /&gt;
        &lt;dataSource type="POOLED"&gt;
            &lt;property name="driver" value="com.mysql.jdbc.Driver" /&gt;
            &lt;property name="url" value="jdbc:mysql://localhost:8889/java_db" /&gt;
            &lt;property name="username" value="root" /&gt;
            &lt;property name="password" value="root" /&gt;
        &lt;/dataSource&gt;
    &lt;/environment&gt;
&lt;/environments&gt;

&lt;!--数据库操作映射文件 --&gt;
&lt;mappers&gt;
    &lt;mapper resource="com/sgm/mybatis/User.xml" /&gt;
&lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>

<p>数据库操作映射文件</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;

&lt;!--namespace很重要，绑定对应的接口文件！--&gt;
&lt;mapper namespace="com.sgm.java.UserDao"&gt;

&lt;resultMap type="User" id="resultListUser"&gt;
    &lt;result column="name" property="name" /&gt;
    &lt;result column="age" property="age" /&gt;
&lt;/resultMap&gt;

&lt;!--id名字要和UserDao里的方法名一样  --&gt;
&lt;insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="id"&gt;
    insert into user(name, age) values(#{name}, #{age});
&lt;/insert&gt;

&lt;delete id="deleteUserById" parameterType="int"&gt;
    delete from user where id = #{id};
&lt;/delete&gt;

&lt;update id="updateUser" parameterType="User" &gt;
     update user set name = #{name}, age = #{age} where id = #{id};
&lt;/update&gt;

&lt;select id="getAllUsers" resultMap="resultListUser"&gt;
    select * from user ;
&lt;/select&gt;

&lt;select id="selectUserById" parameterType="int" resultType="User"&gt;
   select * from user where id = #{id};
&lt;/select&gt;
&lt;/mapper&gt;
</code></pre>

<p>定义数据库操作接口，方法要和对应的映射文件里的id名称一样！</p>

<pre><code>public interface UserDao {
    //  方法名要和User.xml配置文件里的id名称一样
    public void addUser(User user);

    public void deleteUserById(int id);

    public void updateUser(User user);

    public List&lt;User&gt; getAllUsers();

    public User selectUserById(int id);
}
</code></pre>

<p>操作的Java对象</p>

<pre><code>public class User {
        public int id;
        public String name;
        public int age;

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
</code></pre>

<p>测试</p>

<pre><code>public class Main {
    private static Reader reader;
    private static SqlSessionFactory sqlSessionFactory;

static {
    try {
        reader = Resources.getResourceAsReader("MyBatisConfig.xml");
        sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
    } catch (Exception e) {
        e.printStackTrace();
    }
}

public static void main(String[] args) {
    SqlSession session = sqlSessionFactory.openSession();
    UserDao userDao = session.getMapper(UserDao.class);

    try {
//          // 增
//          User newUser = new User();
//          newUser.setName("andy");
//          newUser.setAge(20);
//          userDao.addUser(newUser);
//          session.commit();//必须提交
//          System.out.println("reult------： 新增的userId " + newUser.getId());    
//          //删
//          userDao.deleteUserById(1);
//          session.commit();//必须提交

//          //改
//          User updateUser = new User();
//          updateUser.setId(4);
//          updateUser.setName("andy");
//          updateUser.setAge(20);
//          userDao.updateUser(updateUser);
//          session.commit();//必须提交

//          //列表
//          List&lt;User&gt; userList = userDao.getAllUsers();
//          for(User user : userList){
//              System.out.println("reult------：  " + user.getName());            
//          }
            //查单个
//          User user = userDao.selectUserById(4);
//          System.out.println("reult------：  " + user.getName());
        } finally {
            session.close();//必须关闭
        }
    }
}
</code></pre>

<h3>传参方式</h3>

<h5>1.用下标获取</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Dao层接口定义
</span><span class='line'>public User selectUser(String name,String password);
</span><span class='line'>//对应的映射方法,用下标获取
</span><span class='line'>&lt;select id="selectUser" resultMap="userList"&gt;
</span><span class='line'>    select  *  from user where name = #{0} and password=#{1}
</span><span class='line'>&lt;/select&gt;
</span><span class='line'>//定义userList
</span><span class='line'>&lt;resultMap type="User" id="userList"&gt;
</span><span class='line'>  &lt;result column="id" property="id" /&gt;
</span><span class='line'>  &lt;result column="name" property="name" /&gt;
</span><span class='line'>  &lt;result column="password" property="password" /&gt;
</span><span class='line'>&lt;/resultMap&gt;</span></code></pre></td></tr></table></div></figure>


<h5>2.传自定义对象</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void updateUser(User user);
</span><span class='line'>&lt;update id="updateUser" parameterType="User"&gt;
</span><span class='line'>  update user set name = #{name}, password = #{password} where id = #{id};
</span><span class='line'>&lt;/update&gt;
</span><span class='line'>//定义User别名
</span><span class='line'>&lt;typeAliases&gt;
</span><span class='line'>  &lt;typeAlias alias="User" type="com.sgm.bean.User" /&gt;
</span><span class='line'>&lt;/typeAliases&gt;</span></code></pre></td></tr></table></div></figure>


<h5>3.用注解的方式</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public User selectUser(@Param("name")String name,@Param("password")String password);
</span><span class='line'>&lt;select id="selectUser" resultType="User"&gt;
</span><span class='line'>  select * from user where name = #{name} and password = #{password};
</span><span class='line'>&lt;/select&gt;</span></code></pre></td></tr></table></div></figure>


<h4>动态SQL语句</h4>

<pre><code>&lt;select id="selectSameAddressUser" parameterType="User" resultType="userList"&gt;
    select * from user 
        &lt;if test="name != null"&gt;
            title = #{name}
        &lt;/if&gt;
        &lt;if test="address != null"&gt;
            and address = #{address}
        &lt;/if&gt;
&lt;/select&gt;
</code></pre>

<h3>注意!</h3>

<h5>SqlSessionFactoryBuilder</h5>

<p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此 SqlSessionFactoryBuilder 实例的最佳范围是方法范围,也就是局部方法变量。可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但是最好还是不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情。</p>

<h5>SqlSessionFactory</h5>

<p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次。因此 SqlSessionFactory 的最佳范围是应用范围。可以使用单例模式或者静态单例模式。</p>

<h5>SqlSession</h5>

<p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的范围是请求或方法范围。不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。每次操作应该打开一个 SqlSession，处理数据，处理完后就关闭它。关闭操作很重要，应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SqlSession session = sqlSessionFactory.openSession();
</span><span class='line'>try {
</span><span class='line'>  // do work
</span><span class='line'>} finally {
</span><span class='line'>  session.close();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 一行代码选取图片]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/11/android-select-photo/"/>
    <updated>2016-11-11T19:31:33+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/11/android-select-photo</id>
    <content type="html"><![CDATA[<p>一行代码模仿iOS的选取图片效果。思路主要是把相机和相册的回调放在一个透明的Activity里，然后在这个透明的Activity中弹出自定义的ActionSheet选择框，选取调相机还是相册。相机比较简单，直接调系统的。相册就不用系统的了，不同手机差别太大，效果也不好。自己遍历本地图片文件然后显示。这样即时在不同手机上也能展示相同的效果了。封装后使用就简单了，一行代码调用就可以，不会和业务Activity耦合了！</p>

<h4>使用:</h4>

<p>1.选取一张正方形图片</p>

<pre><code>   SelectPhotoSheet.showCropImageSheet(this, new AlbumResultListener() {
            @Override
            public void complete(View tapedView, List&lt;String&gt; pathList) {
                cache.displayBmp(headImageView, pathList.get(0), new Point(100, 100));
            }
        });
</code></pre>

<p>2.选取限制数量的全尺寸图片</p>

<pre><code>SelectPhotoSheet.showFullImageSheet(this, 8, new AlbumResultListener() {
            @Override
            public void complete(View tapedView, List&lt;String&gt; pathList) {
                localPathList.clear();
                localPathList.addAll(pathList);
                adapter.notifyDataSetChanged();
            }
        });
</code></pre>

<p><img src="http://andyfightting.github.io/myimg/android/one_select.png" alt="" /></p>

<h4>实现</h4>

<p>1.自定义ActionSheet，弄一个Sheet的工具类 BaseSheetActivity。</p>

<pre><code>//用作弹出 action sheet 效果的 base activity
public class BaseSheetActivity extends Activity {
    protected int activityCloseEnterAnimation;
    protected int activityCloseExitAnimation;

public static ItemTapListener itemTapListener;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);

    TypedArray activityStyle = getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowAnimationStyle});
    int windowAnimationStyleResId = activityStyle.getResourceId(0, 0);
    activityStyle.recycle();

    activityStyle = getTheme().obtainStyledAttributes(windowAnimationStyleResId, new int[] {android.R.attr.activityCloseEnterAnimation, android.R.attr.activityCloseExitAnimation});
    activityCloseEnterAnimation = activityStyle.getResourceId(0, 0);
    activityCloseExitAnimation = activityStyle.getResourceId(1, 0);
    activityStyle.recycle();
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    dismiss();
    if (itemTapListener != null){
        itemTapListener.itemTap(new View(this),"");
    }
    return super.onTouchEvent(event);
}

@Override
public void finish() {
    dismiss();
}

public void dismiss(){
    super.finish();
    overridePendingTransition(activityCloseEnterAnimation, activityCloseExitAnimation);
}

public static void show(Context context, Class showedActivityClass, ItemTapListener itemTapListener){
    BaseSheetActivity.itemTapListener = itemTapListener;
    Intent intent = new Intent(context,showedActivityClass);
    context.startActivity(intent);
}
}
</code></pre>

<p>  要使用ActionSheet的效果话就是继承它，然后theme选择ActionSheetTheme。然后把界面的布局从bottom开始布局。</p>

<pre><code>  public class PhotoSheet extends BaseSheetActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.action_photo_sheet); //action_photo_sheet的布局从bottom开始

}

public void itemTap(View view){
    dismiss();
    if (itemTapListener != null){
        itemTapListener.itemTap(view,"");
    }
}

@Override
public void onBackPressed() {
    dismiss();
    if (itemTapListener != null){
        itemTapListener.itemTap(new View(this),"");
    }
}
}

   //设置为自定义的样式
 &lt;activity
        android:name=".photo_lib.photo.PhotoSheet"
        android:theme="@style/ActionSheetTheme" /&gt;
</code></pre>

<p>2.读图片文件路径，不单单是相册里的图片</p>

<pre><code>public void getLocalImages() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                Uri mImageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                ContentResolver mContentResolver = AlbumDirActivity.this.getContentResolver();

            Cursor mCursor = mContentResolver.query(
                    mImageUri,
                    null,
                    MediaStore.Images.Media.MIME_TYPE + "=? or " + MediaStore.Images.Media.MIME_TYPE + "=? or " + MediaStore.Images.Media.MIME_TYPE + "=?",
                    new String[]{"image/jpeg", "image/png", "image/jpg"},
                    MediaStore.Images.Media.DATE_MODIFIED);

            while (mCursor.moveToNext()) {
                String path = mCursor.getString(mCursor.getColumnIndex(MediaStore.Images.Media.DATA));
                String parentName = new File(path).getParentFile().getName();

                if (!dirMap.containsKey(parentName)) {
                    List&lt;String&gt; chileList = new ArrayList&lt;&gt;();
                    chileList.add(path);
                    dirMap.put(parentName, chileList);
                } else {
                    dirMap.get(parentName).add(path);
                }
            }
            mCursor.close();
            mHandler.sendEmptyMessage(SCAN_OK);
        }
    }).start();
}
</code></pre>

<p>3.用LruCache缓存显示压缩后的图片</p>

<pre><code>public class LocalImageCache {

private static LocalImageCache mInstance;

private Handler mHander = new Handler();
private LruCache&lt;String, Bitmap&gt; mMemoryCache;
private CacheImageCallBack mCallBack;
private ExecutorService mImageThreadPool = Executors.newFixedThreadPool(5);

private LocalImageCache() {
    final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
    final int cacheSize = maxMemory / 5;

    mMemoryCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) {
        @Override
        protected int sizeOf(String key, Bitmap bitmap) {
            return bitmap.getByteCount()/1024;
        }
    };

    mCallBack = new CacheImageCallBack() {
        @Override
        public void onImageLoader(ImageView imageView, Bitmap bitmap) {
            if (bitmap != null &amp;&amp; imageView != null) {
                imageView.setImageBitmap(bitmap);
            }
        }
    };
}

public static LocalImageCache getInstance() {
    synchronized (LocalImageCache.class) {
        if (mInstance == null) {
            mInstance = new LocalImageCache();
        }
        return mInstance;
    }
}

public static void clearCache() {
    LocalImageCache cache = getInstance();
    cache.mMemoryCache.evictAll();
}

public void displayBmp(final ImageView imageView, final String path, final Point mPoint) {
    if (TextUtils.isEmpty(path) || imageView == null) {
        return;
    }

    Bitmap bitmap = getBitmapFromMemCache(path);
    if (bitmap == null) {
        imageView.setImageBitmap(null);

        mImageThreadPool.execute(new Runnable() {
            Bitmap mBitmap;

            @Override
            public void run() {
                mBitmap = decodeThumbBitmapForFile(path, mPoint == null ? 0 : mPoint.x, mPoint == null ? 0 : mPoint.y);
                mHander.post(new Runnable() {
                    @Override
                    public void run() {
                        mCallBack.onImageLoader(imageView, mBitmap);
                    }
                });
                addBitmapToMemoryCache(path, mBitmap);
            }
        });
    } else {
        imageView.setImageBitmap(bitmap);
    }
}

private void addBitmapToMemoryCache(String key, Bitmap bitmap) {
    if (getBitmapFromMemCache(key) == null &amp;&amp; bitmap != null) {
        mMemoryCache.put(key, bitmap);
    }
}

private Bitmap getBitmapFromMemCache(String key) {
    return mMemoryCache.get(key);
}

private Bitmap decodeThumbBitmapForFile(String path, int viewWidth, int viewHeight) {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(path, options);
    options.inSampleSize = computeScale(options, viewWidth, viewHeight);
    options.inJustDecodeBounds = false;

    return BitmapFactory.decodeFile(path, options);
}

private int computeScale(BitmapFactory.Options options, int viewWidth, int viewHeight) {
    int inSampleSize = 1;
    if (viewWidth == 0 || viewHeight == 0) {
        return inSampleSize;
    }
    int bitmapWidth = options.outWidth;
    int bitmapHeight = options.outHeight;

    if (bitmapWidth &gt; viewWidth || bitmapHeight &gt; viewHeight) {
        int widthScale = Math.round((float) bitmapWidth / (float) viewWidth);
        int heightScale = Math.round((float) bitmapHeight / (float) viewHeight);

        inSampleSize = (widthScale+heightScale)/2;
    }
    return inSampleSize;
}


private interface CacheImageCallBack {
    void onImageLoader(ImageView imageView, Bitmap bitmap);
}
}
</code></pre>

<p>4.用DrawerLayout封装了一个手势返回的基础类</p>

<pre><code>public class BaseSwipeActivity extends AppCompatActivity {

private LinearLayout containerLayout;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    initSwipeView();
}

@Override
protected void onDestroy() {
    super.onDestroy();
}

private void initSwipeView() {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    setContentView(R.layout.activity_base_swipe);

    containerLayout = (LinearLayout) findViewById(R.id.container_layout);

    DrawerLayout drawer = (DrawerLayout) findViewById(R.id.base_drawer_layout);
    drawer.openDrawer(GravityCompat.END);
    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
        @Override
        public void onDrawerClosed(View drawerView) {
            super.onDrawerClosed(drawerView);
            finish();
        }
    };
    drawer.addDrawerListener(toggle);
}

//子类要手势返回就用setMainView!!!!
public void setMainView(int viewId) {
    LayoutInflater inflater = LayoutInflater.from(this);
    View tmpView = inflater.inflate(viewId, null);

    if (tmpView instanceof LinearLayout) {
        LinearLayout.LayoutParams linearLayoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(linearLayoutParams);
    } else if (tmpView instanceof RelativeLayout) {
        RelativeLayout.LayoutParams relativeLayoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(relativeLayoutParams);
    }
    containerLayout.removeAllViews();
    containerLayout.addView(tmpView);
}

public void backViewTap(View v) {

}

public void backImageTap(View v) {
    finish();
}
}
</code></pre>

<p>其他Activity需要手势返回的话就继承它，然后使用setMainView()替代setContentView()设置界面布局，其他什么都不用管啦！</p>

<h4>注意</h4>

<p>要在使用的Activity的onDestroy()方法中调用 FileUtil.deleteAllFile(); 清除选取的临时缓存图片！！！</p>

<p><a href="https://github.com/AndyFightting/SelectPhoto_Android">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Not Found for Architecture Arm64]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/12/link-bug/"/>
    <updated>2016-09-12T10:00:18+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/12/link-bug</id>
    <content type="html"><![CDATA[<p>接手维护一个项目，更新一下出现了下面这问题👇
<img src="http://andyfightting.github.io/myimg/ios/arm64.png" alt="image" /></p>

<p>好像不常见的问题，谷歌一下</p>

<p><a href="http://stackoverflow.com/questions/19213782/undefined-symbols-for-architecture-arm64">Stack Overflow</a>
<img src="http://andyfightting.github.io/myimg/ios/stackoverflow.png" alt="image" /></p>

<p>说是Architectures设置问题&hellip; 说是Other Linker Flags问题&hellip;说是Target Membership问题&hellip; 改了好像都没用啊，问题还是一动不动的出现在那里&hellip;
<img src="http://andyfightting.github.io/myimg/ios/targetMap.png" alt="image" /></p>

<p>继续找找找&hellip;用对应的类文件全局搜一下&hellip;诶~ 好像那里不对啊&hellip;路径怎么这样子??怎么和别的不一样~~ 喜出望外，好像知道原因了，果然项目文件夹里看不到该文件，Add Files to &ldquo;XXX"添加文件!
<img src="http://andyfightting.github.io/myimg/ios/errorLoad.png" alt="image" /></p>

<p>还是不行&hellip;把对应的.h .m文件拖到桌面上，再重新添加到项目里，解决了！！为什么一开始不怀疑是文件索引问题呢？ 因为项目编译没报 XXX.h not found &hellip;以为文件都好好的呢，以为是项目的配置问题&hellip; 所以一开始找问题的方向就跑偏了！其实这问题之前也遇到过，一般是第三方的XXX.a文件出现这问题，只是这次脑袋没长记性&hellip;这问题一般是多人开发项目用SVN更来更去导致的<code>project.pbxproj</code>里对应的文件索引没了。好了，再遇到这问题就不要跑偏了，把对应的文件重新添加就可以了！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OkHttp and Retrofit]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/08/okhttp-retrofit/"/>
    <updated>2016-09-08T14:57:19+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/08/okhttp-retrofit</id>
    <content type="html"><![CDATA[<p><a href="http://square.github.io/okhttp/">OkHttp</a>和<a href="http://square.github.io/retrofit/">Retrofit</a>都是<a href="http://square.github.io/">Square</a>公司开源出来的网络请求框架。Retrofit是对OkHttp的封装，使其可以用注解的方式调用。</p>

<h4>OkHttp</h4>

<pre><code>//-----okhttp 网络请求 工具类-----

//异步请求结果放在主线程回调。
private static final Handler mainHandler = new Handler(Looper.getMainLooper()); 

private static final OkHttpClient client = new OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .writeTimeout(10, TimeUnit.SECONDS)
        .readTimeout(10, TimeUnit.SECONDS)
        .build();

public static void getRequest(String url, final OkHttpListener listener) {
    Request request = new Request.Builder()
            .header("token", getUserToken())
            .header("client", "Android")
            .header("versionCode", getVersionCode())
            .header("versionName", getVersionName())
            .url(url)
            .build();
    beginRequest(request, listener);
}

//这样就不会有中文乱码问题
public static void postRequest(String url, final Map&lt;String, String&gt; params, final OkHttpListener listener) {
    StringBuilder stringBuilder = new StringBuilder("");
    if (params != null) {
        Set&lt;String&gt; keys = params.keySet();
        for (String key : keys) {
            String value = params.get(key);
            stringBuilder.append(key + "=" + value + "&amp;");
        }
    }

    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded;charset=utf-8");
    RequestBody body = RequestBody.create(mediaType, stringBuilder.toString());

    Request request = new Request.Builder()
            .header("token", getUserToken())
            .header("client", "Android")
            .header("versionCode", getVersionCode())
            .header("versionName", getVersionName())
            .url(url)
            .post(body)
            .build();

    beginRequest(request, listener);
}

//可添加图片文件
public static void postMutibleRequest(String url, final Map&lt;String, Object&gt; params, final OkHttpListener listener) {
    MultipartBody.Builder multipleBuilder = new MultipartBody.Builder();
    multipleBuilder.setType(MultipartBody.FORM);

    if (params != null) {
        Set&lt;String&gt; keys = params.keySet();
        for (String key : keys) {
            Object obj = params.get(key);

            if (obj instanceof File) {
                File tmpFile = (File) obj;
                multipleBuilder.addFormDataPart(key, tmpFile.getName(), MultipartBody.create(MediaType.parse("image/jpg"), tmpFile));
            } else {
                multipleBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"" + key + "\""), RequestBody.create(null, (String) obj));
            }
        }
    }

    RequestBody multipleBody = multipleBuilder.build();
    Request request = new Request.Builder()
            .header("token", getUserToken())
            .header("client", "Android")
            .header("versionCode", getVersionCode())
            .header("versionName", getVersionName())
            .url(url)
            .post(multipleBody)
            .build();

    beginRequest(request, listener);
}

//保存网络图片到相册,返回本地存储路径
public static void downloadImageToSysPhoto(String imageUrl, final OkHttpListener listener) {
    Request request = new Request.Builder().url(imageUrl).build();
    Call call = client.newCall(request);
    call.enqueue(new Callback() {
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            try {
                //系统相册路径
                final String localPath = "/storage/emulated/0/DCIM/Camera/" + CommonUtil.getUniqueString(10) + ".jpg";

                InputStream is = response.body().byteStream();
                FileOutputStream fos = new FileOutputStream(localPath);
                byte[] buffer = new byte[1024];

                int len;
                while ((len = is.read(buffer)) != -1) {
                    fos.write(buffer, 0, len);
                }
                is.close();
                fos.close();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.success(localPath);
                        }
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.fail(0, "");
                        }
                    }
                });
            }
        }

        @Override
        public void onFailure(Call call, IOException e) {
            mainHandler.post(new Runnable() {
                @Override
                public void run() {
                    if (listener != null) {
                        listener.fail(0, "");
                    }
                }
            });
        }
    });
}

private static void beginRequest(Request request, final OkHttpListener listener) {
    Call call = client.newCall(request);

    call.enqueue(new Callback() {//enqueue是异步请求
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            final String responseString = response.body().string();
            final int code = response.code();

            if (response.isSuccessful()) {
                CommonUtil.logJson(responseString);

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.success(responseString);
                        }
                    }
                });
            } else {
                //请求失败：    400  ---------   {"code":100004,"msg":"手机号已注册"}
                CommonUtil.logString("请求失败：" + code + "---------" + responseString);
                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.fail(code, responseString);
                        }
                    }
                });
            }
        }

        @Override
        public void onFailure(Call call, IOException e) {
            e.printStackTrace();
            CommonUtil.logString("请求错误");
            mainHandler.post(new Runnable() {
                @Override
                public void run() {
                    if (listener != null) {
                        listener.fail(0, "请求失败");
                    }
                }
            });
        }
    });
}

public static String getFailedMsg(String response) {
    try {
        JSONObject jsonObject = new JSONObject(response);
        return jsonObject.getString("msg");
    } catch (Exception e) {
        e.printStackTrace();
    }
    return "请求失败";
}

public static String getUserToken() {
    UserModel userModel = UserModel.getUser();
    if (userModel != null) {
        return userModel.getToken();
    }
    return "";
}

public static String getVersionCode() {
    try {
        PackageInfo pi = application.getPackageManager().getPackageInfo(application.getPackageName(), 0);
        return pi.versionCode + "";
    } catch (Exception e) {
        e.printStackTrace();
    }
    return "";
}

public static String getVersionName() {
    try {
        PackageInfo pi = application.getPackageManager().getPackageInfo(application.getPackageName(), 0);
        return pi.versionName;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return "";
}

//下载apk安装包，HUD是自定义的等待进度条
private static int apkProgress;
public static void downloadAPK(final Context context, String apkUrl) {
    HUD.show(context, "下载中...");
    HUD.setCancelable(false);

    Request request = new Request.Builder().url(apkUrl).build();
    Call call = client.newCall(request);
    call.enqueue(new Callback() {
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            try {
                FileUtil.createDir();//创建  ~/paiqi/ 文件夹
                final String apkLocalPath = FileUtil.DIR_PATH + "paiqi.apk";

                InputStream is = response.body().byteStream();
                FileOutputStream fos = new FileOutputStream(apkLocalPath);
                int readNum;
                byte[] buffer = new byte[1024];

                int progressCount = 0;
                long totalLength = response.body().contentLength();

                while ((readNum = is.read(buffer)) != -1) {
                    progressCount += readNum;
                    apkProgress = (int) (((float) progressCount / totalLength) * 100);

                    mainHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            HUD.setMessage("下载中 " + apkProgress + "%");
                        }
                    });

                    fos.write(buffer, 0, readNum);
                }
                is.close();
                fos.close();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        HUD.dismiss();
                        installAPK(context, apkLocalPath);
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        HUD.dismiss();
                        CommonUtil.showToast("下载失败");
                    }
                });
            }
        }

        @Override
        public void onFailure(Call call, IOException e) {
            mainHandler.post(new Runnable() {
                @Override
                public void run() {
                    HUD.dismiss();
                    CommonUtil.showToast("下载失败");
                }
            });
        }
    });
}

//安装apk
private static void installAPK(Context context, String apkPath) {
    File apkFile = new File(apkPath);
    if (!apkFile.exists()) {
        CommonUtil.showToast("安装失败");
        return;
    }
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setDataAndType(Uri.parse("file://" + apkFile.toString()), "application/vnd.android.package-archive");
    context.startActivity(intent);
} 

//请求回调接口定义
public interface OkHttpListener {
   void success(String response);
   void fail(int code,String response);
}
</code></pre>

<p>要注意的是enqueue方法是异步请求，所以要把结果回调放在主线程中进行。</p>

<pre><code> mainHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            if (listener != null) {
                                listener.success(responseString);
                            }
                        }
                    });
</code></pre>

<p>之前看过一个同事的网络库封装，把网络回调接口放在BaseActivity里，然后在子Activity里重写回调方法！这样导致的结果就是，Fragment里的请求都要通过Activity来重写方法，然后再转发给Fragment&hellip;简直想骂街啊有木有！下面这样调用是不是很简单呢~!</p>

<pre><code>//get异步请求,回调都已放在主线程中
 OkHttpHelper.getRequest(ulr, new OkHttpListener() {
        @Override
        public void success(String response) {

        }

        @Override
        public void fail() {

        }
    });

   //post异步请求，回调都已放在主线程中，也可以用于提交File
    Map&lt;String, Object&gt; paramter = new HashMap&lt;&gt;();
    paramter.put("name", "阿贵");
    paramter.put("file", new File("filePath"));//提交图片文件

    OkHttpHelper.postRequest(url, paramter, new OkHttpListener() {
        @Override
        public void success(String response) {

        }

        @Override
        public void fail() {

        }
    });
</code></pre>

<p>还有很多人喜欢把网络请求和结果解析写在一起，比如通过请求结果直接得到对应的Bean。这样导致的结果就是网球请求结果类型不统一，返回各种Bean。个人不太喜欢这样，可以对结果解析进行简单封装一下，这样网络返回的结果也会统一，数据解析也就一行代码。</p>

<pre><code>//使用: getBean(json, User.class);
public static &lt;T&gt; T getBean(String json, Class&lt;T&gt; clazz) {
    T bean = null;
    try {
        Gson gson = new Gson();
        bean = gson.fromJson(json, clazz);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return bean;
}

   //使用：getBeanList(json, User[].class);
    public static &lt;T&gt; List&lt;T&gt; getBeanList(String json, Class&lt;T[]&gt; type) {
        try{
            T[] list = new Gson().fromJson(json, type);
            return Arrays.asList(list);
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }
</code></pre>

<h4>Retrofit</h4>

<p><a href="http://square.github.io/retrofit/">Retrofit官网</a>上的例子中返回结果是Bean，但又没说添加了GsonConverterFactory，所以会报 Could not locate ResponseBody converter for XXBean 错误！所以要引入GsonConverterFactory转化库<code>compile 'com.squareup.retrofit2:converter-gson:2.0.2'</code>, 然后在Retrofit初始化的时候添加该库！官网后面说了 By default, Retrofit can only deserialize HTTP bodies into OkHttp&rsquo;s ResponseBody type and it can only accept its RequestBody type for @Body. 默认只会返回ResponseBody！并且只有ResponseBody才可以使用@Body注解！我个人还是不喜欢直接在这里得到Bean, 我还是喜欢先通过得到response.body().string()，然后再转化成Bean，各司其职。注意是<code>response.body().string()</code>，不是<code>response.body().toString()</code>!!</p>

<pre><code>    Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://api.github.com/")
                .addConverterFactory(GsonConverterFactory.create()) //添加Bean转化库
                .build();

    ServiceInterface service = retrofit.create(ServiceInterface.class);

    Call&lt;TestBean&gt; requestCall = service.getUserInfo();

    requestCall.enqueue(new Callback&lt;TestBean&gt;() {
        @Override
        public void onResponse(Call&lt;TestBean&gt; call, Response&lt;TestBean&gt; response) {

                TestBean b = response.body();
        }

        @Override
        public void onFailure(Call&lt;TestBean&gt; call, Throwable t) {

        }
    });

 public interface ServiceInterface {
    @GET("users/andyfightting")
    Call&lt;TestBean&gt; getUserInfo();

    //这里继续添加其他接口

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的AsyncTask]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/07/asynctask/"/>
    <updated>2016-09-07T10:15:12+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/07/asynctask</id>
    <content type="html"><![CDATA[<p>Android和iOS一样，对UI的操作只能放在主线程中进行，即UI线程。如果在UI线程中执行比较耗时的方法，就会造成界面卡顿假死无反应，所以应该把耗时操作放在<code>非UI线程</code>中处理，处理完成后再在<code>UI线程</code>中更新界面。</p>

<p>在没有AsyncTask类的时候，是通过在子线程处理，然后sendMessage(Message msg)给主线程中创建的Handler,然后在主线程中实现handleMessage(Message msg)处理相应信息。而这些工作AsyncTask帮我们做了，AsyncTask就是对Thread和Handler的封装。</p>

<h4>AsyncTask使用</h4>

<p>AsyncTask是一个抽象类，所以必须创建一个子类去继承它。在继承时我们可以为AsyncTask类指定三个参数类型,这三个类型会影响重写方法对应的参数类型。</p>

<ol>
<li>Params: 在execute()启动任务时需要传入的参数</li>
<li>Progress: 后台任务执行过程中，需要实时反馈出来的信息，比如执行进度什么的</li>
<li>Result: 后台任务执行完毕后，如果需要对结果进行返回，则返回该类型</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//on开通的方法都是在UI线程中执行的
</span><span class='line'>class MyAsyncTask extends AsyncTask&lt;Void,Integer,Boolean&gt;{
</span><span class='line'>    @Override
</span><span class='line'>    protected void onPreExecute() {//在执行实际的后台的doInBackground方法前
</span><span class='line'>        super.onPreExecute();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    @Override
</span><span class='line'>    protected Boolean doInBackground(Void... params) {//在onPreExecute 方法执行后马上执行，该方法运行在后台线程中
</span><span class='line'>        for (int i = 0; i &lt;= 100; i++) {
</span><span class='line'>            publishProgress(i);//调用onProgressUpdate
</span><span class='line'>            try {
</span><span class='line'>                Thread.sleep(1000);
</span><span class='line'>            } catch (InterruptedException e) {
</span><span class='line'>                e.printStackTrace();
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return true;//可以判断是否顺利执行完了啊
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onProgressUpdate(Integer... values) {//这个函数在doInBackground调用publishProgress时被调用后
</span><span class='line'>        super.onProgressUpdate(values);
</span><span class='line'>        //比如实时更新进度条
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onPostExecute(Boolean aBoolean) {
</span><span class='line'>        super.onPostExecute(aBoolean);
</span><span class='line'>        //后台顺利执行完后要干啥呢
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onCancelled() {
</span><span class='line'>        super.onCancelled();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>Task的实例必须在UI 线程中创建</li>
<li>execute方法必须在UI 线程中调用</li>
<li>不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params&hellip;)等方法</li>
<li>该task只能被执行一次，否则多次调用时将会抛出异常</li>
</ol>


<h4>AsyncTask源码</h4>

<p>AsyncTask有个handler内部类，用它来处理在主线程中实时更新和任务完成后的回调</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static InternalHandler sHandler;
</span><span class='line'>
</span><span class='line'>private static Handler getHandler() {
</span><span class='line'>    synchronized (AsyncTask.class) {
</span><span class='line'>        if (sHandler == null) {
</span><span class='line'>            sHandler = new InternalHandler();
</span><span class='line'>        }
</span><span class='line'>        return sHandler;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private static class InternalHandler extends Handler {
</span><span class='line'>    public InternalHandler() {
</span><span class='line'>        super(Looper.getMainLooper());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @SuppressWarnings({"unchecked", "RawUseOfParameterizedType"})
</span><span class='line'>    @Override
</span><span class='line'>    public void handleMessage(Message msg) {
</span><span class='line'>        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;
</span><span class='line'>        switch (msg.what) {
</span><span class='line'>            case MESSAGE_POST_RESULT:
</span><span class='line'>                // There is only one result
</span><span class='line'>                result.mTask.finish(result.mData[0]);
</span><span class='line'>                break;
</span><span class='line'>            case MESSAGE_POST_PROGRESS:
</span><span class='line'>                result.mTask.onProgressUpdate(result.mData);
</span><span class='line'>                break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>当我们调用publishProgress方法时，就是得到handler单列然后发消息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   protected final void publishProgress(Progress... values) {
</span><span class='line'>        if (!isCancelled()) {
</span><span class='line'>            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,
</span><span class='line'>                    new AsyncTaskResult&lt;Progress&gt;(this, values)).sendToTarget();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>   private static class AsyncTaskResult&lt;Data&gt; {
</span><span class='line'>        final AsyncTask mTask;
</span><span class='line'>        final Data[] mData;
</span><span class='line'>
</span><span class='line'>     AsyncTaskResult(AsyncTask task, Data... data) {
</span><span class='line'>            mTask = task;
</span><span class='line'>            mData = data;
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>当执行execute()方法时，会在后台任务doInBackground(mParams)开始执行前调用onPreExecute方法。从下面可以看出，当task已经在运行或者已经结束的时候不可以再调用execute()方法，否则会报错。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> public final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) {
</span><span class='line'>        return executeOnExecutor(sDefaultExecutor, params);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>  public final AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec,
</span><span class='line'>            Params... params) {
</span><span class='line'>        if (mStatus != Status.PENDING) {
</span><span class='line'>            switch (mStatus) {
</span><span class='line'>                case RUNNING:
</span><span class='line'>                    throw new IllegalStateException("Cannot execute task:"
</span><span class='line'>                            + " the task is already running.");
</span><span class='line'>                case FINISHED:
</span><span class='line'>                    throw new IllegalStateException("Cannot execute task:"
</span><span class='line'>                            + " the task has already been executed "
</span><span class='line'>                            + "(a task can be executed only once)");
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        mStatus = Status.RUNNING;
</span><span class='line'>
</span><span class='line'>        onPreExecute(); //后台任务开始前执行
</span><span class='line'>
</span><span class='line'>        mWorker.mParams = params;
</span><span class='line'>        exec.execute(mFuture);
</span><span class='line'>
</span><span class='line'>        return this;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>     mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
</span><span class='line'>            public Result call() throws Exception {
</span><span class='line'>                mTaskInvoked.set(true);
</span><span class='line'>
</span><span class='line'>                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
</span><span class='line'>                //noinspection unchecked
</span><span class='line'>                Result result = doInBackground(mParams);   //这里开始执行后台任务！！！
</span><span class='line'>                Binder.flushPendingCommands();
</span><span class='line'>                return postResult(result);
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        mFuture = new FutureTask&lt;Result&gt;(mWorker) {
</span><span class='line'>            @Override
</span><span class='line'>            protected void done() {
</span><span class='line'>                try {
</span><span class='line'>                    postResultIfNotInvoked(get());    //后台任务执行完毕！！！
</span><span class='line'>                } catch (InterruptedException e) {
</span><span class='line'>                    android.util.Log.w(LOG_TAG, e);
</span><span class='line'>                } catch (ExecutionException e) {
</span><span class='line'>                    throw new RuntimeException("An error occurred while executing doInBackground()",
</span><span class='line'>                            e.getCause());
</span><span class='line'>                } catch (CancellationException e) {
</span><span class='line'>                    postResultIfNotInvoked(null);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>    
</span></code></pre></td></tr></table></div></figure>


<p>后台任务执行完毕时，也是通过handler发消息，然后判断是不是取消状态来调用相应的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> mFuture = new FutureTask&lt;Result&gt;(mWorker) {
</span><span class='line'>            @Override
</span><span class='line'>            protected void done() {
</span><span class='line'>                try {
</span><span class='line'>                    postResultIfNotInvoked(get());   //后台任务执行完毕！！！
</span><span class='line'>                } catch (InterruptedException e) {
</span><span class='line'>                    android.util.Log.w(LOG_TAG, e);
</span><span class='line'>                } catch (ExecutionException e) {
</span><span class='line'>                    throw new RuntimeException("An error occurred while executing doInBackground()",
</span><span class='line'>                            e.getCause());
</span><span class='line'>                } catch (CancellationException e) {
</span><span class='line'>                    postResultIfNotInvoked(null);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>        
</span><span class='line'>   private void postResultIfNotInvoked(Result result) {
</span><span class='line'>        final boolean wasTaskInvoked = mTaskInvoked.get();
</span><span class='line'>        if (!wasTaskInvoked) {
</span><span class='line'>            postResult(result);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>   private Result postResult(Result result) {
</span><span class='line'>        @SuppressWarnings("unchecked")
</span><span class='line'>        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,
</span><span class='line'>                new AsyncTaskResult&lt;Result&gt;(this, result));
</span><span class='line'>        message.sendToTarget();
</span><span class='line'>        return result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'> private void finish(Result result) {
</span><span class='line'>        if (isCancelled()) {
</span><span class='line'>            onCancelled(result);
</span><span class='line'>        } else {
</span><span class='line'>            onPostExecute(result);
</span><span class='line'>        }
</span><span class='line'>        mStatus = Status.FINISHED;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>从下面的代码可以看出，ThreadPoolExecutor是类变量，所以不管创建多少个AsyncTask子类的对象，他们都共用一个线程池。默认线程池可维护的线程数和最大数量，与可用的CUP处理器个数有关。线程池中超过corePoolSize数目的空闲线程最大存活时间1，单位SECONDS。如果线程池的线程数量小于CORE_POOL_SIZE，这个时候新添加一个异步任务则会新建一个线程；如果线程池的数量大于等于CORE_POOL_SIZE，这个时候新建一个异步任务这个任务会被放入缓存队列中等待执行。缓存队列大小为128，并且SerialExecutor是异步顺序执行任务的。</p>

<pre><code>private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
private static final int CORE_POOL_SIZE = CPU_COUNT + 1;
private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;
private static final int KEEP_ALIVE = 1;

private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128);

public static final Executor THREAD_POOL_EXECUTOR
        = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,
                TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);


private static class SerialExecutor implements Executor {
    final ArrayDeque&lt;Runnable&gt; mTasks = new ArrayDeque&lt;Runnable&gt;();
    Runnable mActive;

    public synchronized void execute(final Runnable r) {
        mTasks.offer(new Runnable() {
            public void run() {
                try {
                    r.run();
                } finally {
                    scheduleNext();
                }
            }
        });
        if (mActive == null) {
            scheduleNext();
        }
    }

    protected synchronized void scheduleNext() {
        if ((mActive = mTasks.poll()) != null) {
            THREAD_POOL_EXECUTOR.execute(mActive);
        }
    }
}
</code></pre>

<h4>问题</h4>

<p>AsyncTask处理任务的时候，一般都是习惯在onPreExecute显示进度条，在数据处理完成之后的onPostExecute关闭进度条。但是当横竖屏切换或者内存重启导致Activity重新启动时，假设你还在onPostExecute写了一些其他逻辑，这个时候的AsyncTask已经与之前的Activity没有关联了，会导致onPostExecute无效问题。</p>

<p>解决办法是在onPostExecute方法里用EventBus,Otto类库或者自己写通知，把结果发送给Activity去处理！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>    protected void onPostExecute(String result) {
</span><span class='line'>        EventBus.getDefault().post(new AsyncTaskResultEvent(result));
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h4>个人看法</h4>

<p>觉得Android很喜欢造这种中型轮子啊！好像没什么必要再造个AsyncTask这样的轮子放在SDK里啊? 像AsyncTask这种任务不应该是开发者去完成的吗？还有比如NavigationView，真的有必要吗？这不是应该让开发者来自定义的View吗？反正我不是很理解，这可能也是Android为什么如此碎片化的原因之一吧！&mdash;- 喜欢造中型轮子！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反编译Android的APK]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/02/apk-decode/"/>
    <updated>2016-09-02T09:55:10+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/02/apk-decode</id>
    <content type="html"><![CDATA[<p>本人用的环境是Mac 10.11.5, 需要用到的工具有：<a href="https://ibotpeaches.github.io/Apktool/">apktool</a>, <a href="https://sourceforge.net/projects/dex2jar/">dex2jar</a>, <a href="http://jd.benow.ca/">JD-GUI</a>。</p>

<p>下面用淘宝2.2.1版本和微信2.3版本为例子来反编译。为什么用这么老的版本？因为可能老版本没有做代码混淆，反编译后会更好看一点。可以用<a href="http://www.anzhi.com/">安智市场</a>来下载历史版本，推荐用安智市场的手机APP来下载，会看到所有的历史版本，而电脑网站只能看到最近的几个历史版本。
<img src="http://andyfightting.github.io/myimg/android/az_taobao.png" alt="image" /></p>

<h4>1.apktool</h4>

<p>需要至少Java 7环境，通过<code>java -version</code>查看
<img src="http://andyfightting.github.io/myimg/android/javaVersion.png" alt="image" /></p>

<p>配置apktool
<img src="http://andyfightting.github.io/myimg/android/apktool.png" alt="image" /></p>

<p>输入apktool如下所示就成功了
<img src="http://andyfightting.github.io/myimg/android/apktool_result.png" alt="imag" /></p>

<p>用apktool工具处理后就可以查看xml文件了。在桌面建一个文件夹test, 把apk文件放进去，进入该文件夹，然后执行<code>apktool d apk名称.apk</code>。就会在test文件夹里出现一个<code>apk名称</code>的文件夹。里面的资源文件和xml文件就可以打开查看了。
<img src="http://andyfightting.github.io/myimg/android/apktool1.png" alt="imag" />
<img src="http://andyfightting.github.io/myimg/android/apktool2.png" alt="imag" />
<img src="http://andyfightting.github.io/myimg/android/apktool3.png" alt="imag" /></p>

<h4>2.dex2jar</h4>

<p>dex2jar工具可以吧dex或者apk文件转成jar文件。dex2jar下载好后进入文件夹，执行<code>chmod a+x *.sh</code>命令启用.sh文件。</p>

<h6>方式一</h6>

<p>把apk文件的后缀名改为zip，然后解压得到classes.dex文件，把classes.dex文件放到dex2jar文件夹中，进入该文件夹，执行<code>sh d2j-dex2jar.sh classes.dex</code>命令，就会得到对应的jar文件。</p>

<h6>方式二</h6>

<p>直接把apk文件放入dex2jar文件夹中，执行<code>sh d2j-dex2jar.sh apk名称.apk</code>也会得到对应的jar文件。</p>

<h4>3.JD-GUI</h4>

<p>把JD-GUI下载下来，打开上面生成的jar文件就可查看了。
<img src="http://andyfightting.github.io/myimg/android/taobao211.png" alt="image" /></p>

<p>下面是微信2.3处理后的结果
<img src="http://andyfightting.github.io/myimg/android/wx1.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/android/wx2.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/android/wx3.png" alt="image" />
剩下的就看细心、耐心、和好奇心了&hellip;下面说说我是怎么查看QQ2.0的。</p>

<h3>我的查看流程</h3>

<p>找一个页面的特殊字符，如下面的"我的个人资料"
<img src="http://andyfightting.github.io/myimg/android/find00.jpg" alt="image" /></p>

<p>然后Finder搜索，找到strings.xml文件，在里面找到"我的个人资料"对应的key &ndash; &ldquo;info_info"。
<img src="http://andyfightting.github.io/myimg/android/find0.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/android/find1.png" alt="image" /></p>

<p>然后搜"info_info"，找到对应的布局文件"info_self.xml"
<img src="http://andyfightting.github.io/myimg/android/find2.png" alt="image" /></p>

<p>然后通过"info_self"布局文件名搜索，找到对应的smali文件
<img src="http://andyfightting.github.io/myimg/android/find3.png" alt="image" /></p>

<p>然后通过smali文件名"InfoActivity"在JD-GUI的Search功能搜索，不是Find!找到对应的Activity，这样想看的东西应该都能找到了。
<img src="http://andyfightting.github.io/myimg/android/find4.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的Fragment]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/01/fragment/"/>
    <updated>2016-09-01T11:38:27+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/01/fragment</id>
    <content type="html"><![CDATA[<p>在 Android 3.0（API 11 级）中引入了Fragment，主要是为了给大屏幕上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用Fragment实现此类设计时，无需管理对视图层次结构的复杂更改。它具有自己的生命周期，能接收自己的输入事件，并且可以在 Activity 运行时添加或删除Fragment，有点像可以在不同 Activity 中重复使用的"子 Activity"。 通过将 Activity 布局分成Fragment，可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。Fragment必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。当 Activity 暂停时，其中的所有Fragment也会暂停；当 Activity 被销毁时，所有Fragment也会被销毁。</p>

<p>下面是Android官网上的<a href="https://developer.android.com/guide/components/activities.html">Activity</a>和<a href="https://developer.android.com/guide/components/fragments.html">Fragment</a>的生命周期图。</p>

<p><img src="http://andyfightting.github.io/myimg/android/activity_lifecycle.png" alt="imga" /> <img src="http://andyfightting.github.io/myimg/android/fragment_lifecycle.png" alt="imga" /></p>

<p>下面是网友整理的详细的<a href="https://github.com/xxv/android-lifecycle">周期图比较</a>。</p>

<p><img src="http://andyfightting.github.io/myimg/android/fragment.png" alt="image" /></p>

<h4>用Fragment可能会遇到的问题</h4>

<h5>getActivity()空指针</h5>

<p>可能遇到过getActivity()返回null，或者平时运行完好的代码，在“内存重启”之后，调用getActivity()的地方却返回null，报了空指针异常。大多数情况下的原因：在调用了getActivity()时，当前的Fragment已经onDetach()了宿主Activity。比如在pop了Fragment之后，该Fragment的异步任务仍然在执行，并且在执行完成后调用了getActivity()方法，这样就会空指针。</p>

<p>可以在Fragment基类里设置一个Activity mActivity的全局变量，在onAttach(Activity activity)里赋值，使用mActivity代替getActivity()，保证Fragment即使在onDetach后，仍持有Activity的引用。</p>

<h5>Fragment重叠问题</h5>

<p>如果add()了几个Fragment，然后使用show()、hide()方法控制，比如微信、QQ的底部tab等情景。如果你什么都不做的话，在“内存重启”后回，Tab的这几个Fragment界面会重叠。(手机横竖屏切换就可以模拟“内存重启”)。原因是FragmentManager帮我们管理Fragment，当发生“内存重启”，他会从栈底向栈顶的顺序恢复Fragment，但是因为没有保存Fragment的hidden属性，默认为false，所以所有Fragment都是以show的形式恢复，界面就重叠了。</p>

<h5>解决方法一</h5>

<p>不用add()的方式处理tab的Fragment，直接在Activity的布局文件中添加需要的Fragment,然后在Activity中通过getFragmentManager().findFragmentById()的方式得到Fragment，然后处理对应的hide,show。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;fragment
</span><span class='line'>    android:id="@+id/fragment0"
</span><span class='line'>    android:name="com.suguiming.myandroid.tab0.Fragment0"
</span><span class='line'>    android:layout_above="@+id/tab_line"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    tools:layout="@layout/fragment_container"/&gt;
</span><span class='line'>&lt;fragment
</span><span class='line'>    android:id="@+id/fragment1"
</span><span class='line'>    android:name="com.suguiming.myandroid.tab1.Fragment1"
</span><span class='line'>    android:layout_above="@+id/tab_line"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    tools:layout="@layout/fragment_container"/&gt;</span></code></pre></td></tr></table></div></figure>


<h5>解决方法二</h5>

<p>在用add()或者replace()时为Fragment绑定一个tag，一般用fragment的类名作为tag，然后在发生“内存重启”时，即savedInstanceState!=null 时，通过getFragmentManager().findFragmentByTag()找到对应的Fragment，然后hide、show 对应的Fragment。</p>

<pre><code>protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity);

TargetFragment targetFragment;
HideFragment hideFragment;

if (savedInstanceState != null) {  // “内存重启”时调用
    targetFragment = getSupportFragmentManager().findFragmentByTag(TargetFragment.class.getName);
    hideFragment = getSupportFragmentManager().findFragmentByTag(HideFragment.class.getName);
    // 解决重叠问题
    getFragmentManager().beginTransaction()
            .show(targetFragment)
            .hide(hideFragment)
            .commit();
}else{  // 正常时
    targetFragment = TargetFragment.newInstance();
    hideFragment = HideFragment.newInstance();

    getFragmentManager().beginTransaction()
            .add(R.id.container, targetFragment, targetFragment.getClass().getName())
            .add(R.id,container,hideFragment,hideFragment.getClass().getName())
            .hide(hideFragment)
            .commit();
}
}
</code></pre>

<h5>解决方法三</h5>

<p>由于造成重叠的原因是因为Fragment不会保存hide的状态，那我们可以在BaseFragment中手动保存然后处理啊！</p>

<pre><code>private static final String FRAGMENT_IS_HIDDEN = "FRAGMENT_IS_HIDDEN";

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    //解决重叠问题
    if (savedInstanceState != null) {
        boolean isHidden = savedInstanceState.getBoolean(FRAGMENT_IS_HIDDEN);
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        if (isHidden) {
            ft.hide(this);
        } else {
            ft.show(this);
        }
        ft.commit();
    }
}

@Override
public void onSaveInstanceState(Bundle outState) {
    super.onSaveInstanceState(outState);
    outState.putBoolean(FRAGMENT_IS_HIDDEN, isHidden());//保持fragment是否隐藏的状态
}
</code></pre>

<p>在使用时还是要注意判断savedInstanceState是否为null，只有在为空时才add()。在不为空时就可以不用处理了，交由BaseFragment处理了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android手势滑动返回]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/31/android-swipe/"/>
    <updated>2016-08-31T15:16:10+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/31/android-swipe</id>
    <content type="html"><![CDATA[<p>偶然间发现了一个Android自带的抽屉控件<a href="https://developer.android.com/training/implementing-navigation/nav-drawer.html">DrawerLayout</a>,就觉得应该可以用他来封装成手势返回的基础控件。思路就是先设置Activity的跳转动画是从右到左，并且前一个Activity不能动。然后设置DrawerLayout的menu从右边出来，然设置menu全屏，这个menu就相当于子Activity View的容器，默认打开menu,然后设置DrawerLayout容器透明，当DrawerLayout close的时候finish它所在的Activity！还要把状态栏设置成透明，不然DrawerLayout closed 再 finish Activity的时候会有视觉差！复杂的手势控制就交由自带的DrawerLayout处理啦，生命周期还是Activity的生命周期。怎么样，是不是机智如我！！😆</p>

<p>遇到的问题：DrawerLayout的menu即时设置成match_parent也不能全屏！因为源码里设置了margin64dp! 那我们只好再设置回来：android:layout_marginLeft=&ldquo;-64dp"。</p>

<pre><code> private static final int MIN_DRAWER_MARGIN = 64; // dp
</code></pre>

<p>BaseSwipeActivity</p>

<pre><code>package com.suguiming.myandroid.base;
import android.os.Bundle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.suguiming.myandroid.R;

public class BaseSwipeActivity extends AppCompatActivity {

private DrawerLayout drawer;
private LinearLayout containerLayout;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    setContentView(R.layout.activity_base_swipe);

    containerLayout = (LinearLayout) findViewById(R.id.container_layout);

    drawer = (DrawerLayout) findViewById(R.id.base_drawer_layout);
    drawer.openDrawer(GravityCompat.END);
    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
        @Override
        public void onDrawerClosed(View drawerView) {
            super.onDrawerClosed(drawerView);
            finish();
        }
    };
    drawer.setDrawerListener(toggle);
}

//子类不要用setContentView,用setMainView!!!!
public void setMainView(int viewId) {
    LayoutInflater inflater = LayoutInflater.from(this);
    View tmpView = inflater.inflate(viewId, null);

    if (tmpView instanceof LinearLayout) {
        LinearLayout.LayoutParams linearLayoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(linearLayoutParams);
    } else if (tmpView instanceof RelativeLayout) {
        RelativeLayout.LayoutParams relativeLayoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(relativeLayoutParams);
    }
    containerLayout.removeAllViews();
    containerLayout.addView(tmpView);
}

}
</code></pre>

<p>对应的布局文件</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:background="@android:color/transparent"
    tools:context="com.suguiming.myandroid.base.BaseSwipeActivity"&gt;

&lt;android.support.v4.widget.DrawerLayout
    android:id="@+id/base_drawer_layout"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@android:color/transparent"
    tools:openDrawer="end"&gt;
    &lt;LinearLayout
        android:orientation="vertical"
        android:background="@color/clear"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;
    &lt;/LinearLayout&gt;

    &lt;!---64dp是源码menu的margin,这里设置为65,不然会有一条黑线--&gt;
    &lt;LinearLayout
        android:id="@+id/container_layout"
        android:orientation="vertical"
        android:layout_gravity="end"
        android:layout_marginLeft="-65dp"
        android:background="@color/light_gray"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;
    &lt;/LinearLayout&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>push 的动画 style</p>

<pre><code>&lt;!--手势返回theme--&gt;
&lt;style name="BackSwipeTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt;
    &lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;
    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;
    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;
    &lt;item name="android:backgroundDimEnabled"&gt;false&lt;/item&gt;
    &lt;item name="android:windowAnimationStyle"&gt;@style/ActivitySwipeBackAnimation&lt;/item&gt;
&lt;/style&gt;
&lt;style name="ActivitySwipeBackAnimation" parent="@android:style/Animation.Activity"&gt;
    &lt;item name="android:activityOpenEnterAnimation"&gt;@anim/activity_swipe_in&lt;/item&gt;
    &lt;item name="android:activityOpenExitAnimation"&gt;@anim/activity_swipe_out&lt;/item&gt;
    &lt;item name="android:activityCloseEnterAnimation"&gt;@anim/activity_swipe_in&lt;/item&gt;
    &lt;item name="android:activityCloseExitAnimation"&gt;@anim/activity_swipe_out&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>使用的话就是让Activity继承BaseSwipeActivity，然后设置Activity的Theme为BackSwipeTheme。</p>

<pre><code>public class ActivitySwipeBack extends BaseSwipeActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    //要用setMainView，不要用setContentView
    setMainView(R.layout.activity_activity_swipe_back);
  }
}

&lt;activity android:name=".tab0.ActivitySwipeBack"
            android:theme="@style/BackSwipeTheme"/&gt;
</code></pre>

<p>完整Demo请查看<a href="https://github.com/AndyFightting/MyAndroid">MyAndroid</a>中的"手势滑动返回"。</p>

<p><img src="http://andyfightting.github.io/myimg/android/android_swipe.png" alt="imge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift阅读笔记]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/swift-read/"/>
    <updated>2016-08-04T16:23:05+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/swift-read</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let 声明常量，var 声明变量，会自动进行类型推断(小数推断为Double),一行末尾可不加分号(;)。
</span><span class='line'>值永远不会被隐式转换为其他类型，务必显示强制转换。
</span><span class='line'>if语句的条件不能默认非0为真。 类型后加?号表示可选值，要么有值，要么是nil。
</span><span class='line'>用 if let(或者var) name = optionName 来获取可选值处理。 
</span><span class='line'>switch的case中自带break，switch要保证全部遍历，否则必须要有default选项。
</span><span class='line'>0&lt; x &lt;4 等价 0..&lt;4 , 0&lt; x &lt;=4 等价 0...4 。 
</span><span class='line'>用 func 声明函数，用-&gt;指定返回类型func greet(name: String, day: String) -&gt; String { ... }。 
</span><span class='line'>元组概念，一般用做函数返回值。 
</span><span class='line'>func sumOf(numbers: Int...) -&gt; Int {}，...表示可变个数的参数。 
</span><span class='line'>函数是一等类型，像int float一样，可用作参数或者返回值。 
</span><span class='line'>class 声明类,属性都要赋值，要么在声明直接写死，要么在init方法中赋值。 
</span><span class='line'>重写父类方法必须用 override 标记。 属性可以有get set willGet didSet 等方法。 
</span><span class='line'>mutating关键字用来标记一个会修改结构体(属性)的方法。 
</span><span class='line'>extension来为现有的类型添加功能，比如新的方法和计算属性。
</span><span class='line'>泛型(指定类型)就是java中的泛型。 Bool值是true或false。 
</span><span class='line'>typealies name = 类型 给类型起个别名。 
</span><span class='line'>OC中的nil只用在对象上(int不行)，Swift中nil可指任何东西(对象或int)。
</span><span class='line'>使用!来获取一个不存在的可选值会导致错误。隐式解析可选类型(类型!)就是可选类型，但是可以当做非可选类型来使用(不用!解析,没值时会报错)。 
</span><span class='line'>throws do try catch 的使用。Swift的赋值操作不返回任何值。% 浮点数也可以取余运算。 
</span><span class='line'>空合运算符(a ?? b)对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b(b和a要类型相同)。逻辑 &&，|| 都是短路计算的。
</span><span class='line'>条件中的下划线 _ 来忽略对值的访问，case 中的下划线 _ 表示所有可能的值,case中可进行值绑定，case条件可用where语句。 
</span><span class='line'>字典的遍历顺序和插入顺序可能不同(字典无序的)。 
</span><span class='line'>Swift语言的repeat-while循环合其他语言中的do-while循环是类似的。
</span><span class='line'>注意循环中switch中的continue(开始下次)和break(跳到switch}后面继续执行)的差别，switch中的fallthrouth进入下一个case时不会再进行条件判断。
</span><span class='line'>guard(守卫)语句总是有一个else分句。 
</span><span class='line'>调用函数时第一个参数名不要，之后的参数名要，用逗号分开(第一个参数省略其外部参数名，第二个以后的参数使用其本地参数名作为自己的外部参数名。
</span><span class='line'>所有参数需要有不同的本地参数名，但可以共享相同的外部参数名。如果你提供了外部参数名，那么函数在被调用时，必须使用外部参数名。如果你不想为第二个及后续的参数设置参数名，用下划线_代替)。
</span><span class='line'>一个函数最多只能有一个可变参数(...),如果函数同时有默认参数和可变参数要把可变参数放最后。 
</span><span class='line'>函数参数默认是常量，修改会报错，但可以用var声明为变量,修改只在函数体内有效。 
</span><span class='line'>inout参数(只能传入变量)会替换原来的值，使用时在变量名前加&符号。 
</span><span class='line'>原数组不会被sort()方法修改。 闭包就是用{}包起来的函数代码块，用in分开返回值和处理代码，参数不能有默认值。如果需要将闭包作为最后一个参数，可变成尾随闭包。
</span><span class='line'>Array的map方法可返回不同类型。 函数和闭包都是引用类型。
</span><span class='line'>结构体和枚举是值类型，所有的基本类型都是值类型，并且都是以结构体的形式在后台所实现。
</span><span class='line'>类是引用类型。常量实例依然可改变其中的变量属性值。
</span><span class='line'>swift指针并不直接指向内存中的某个地址，而且也不要求你使用星号（*）来表明你在创建一个引用。
</span><span class='line'>结构体实例总是通过值传递，类实例总是通过引用传递。
</span><span class='line'>Swift 中字符串（String）,数组（Array）和字典（Dictionary）均以结构体的形式实现的值类型,而在OC中是以类的形式实现的引用类型。
</span><span class='line'>计算属性可以用于类、结构体和枚举，存储属性只能用于类和结构体。
</span><span class='line'>如果创建了一个结构体的实例并将其赋值给一个常量，则无法修改该实例的任何属性，即使定义了变量存储属性，由于结构体（struct）属于值类型，当值类型的实例被声明为常量的时候，它的所有属性也就成了常量。
</span><span class='line'>必须将延迟存储属性声明成变量（使用var关键字），因为属性的初始值可能在实例构造完成之后才会得到。
</span><span class='line'>而常量属性在构造过程完成之前必须要有初始值，因此无法声明成延迟属性。
</span><span class='line'>计算属性不直接存储值，而是提供一个 get和一个可选的set，来间接获取和设置其他属性或变量的值。
</span><span class='line'>必须使用var关键字定义计算属性，包括只读计算属性，因为它们的值不是固定的。
</span><span class='line'>父类的属性在子类的构造器中被赋值时，它在父类中的willSet和didSet观察器会被调用。
</span><span class='line'>全局的常量或变量都是延迟计算的，跟延迟存储属性相似，不同的地方在于，全局的常量或变量不需要标记lazy特性。局部范围的常量或变量不会延迟计算。
</span><span class='line'>必须给存储类型的类属性指定默认值，因为类型本身无法在初始化过程中使用构造器给类型属性赋值。
</span><span class='line'>结构体和枚举能够定义方法是 Swift 与 C/Objective-C 的主要区别之一。</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的动画]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/animation/"/>
    <updated>2016-08-04T16:22:41+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/animation</id>
    <content type="html"><![CDATA[<p>动画是作用的UIView的CALayer上的，UIView是CALayer的代理，给CALayer提供数据参数，CALayer负责渲染和动画。UIView是在UIKit框架中，而CALayer是在QuartzCore框架中。UIView可以响应用户事件，而CALayer不可以响应用户事件。CALayer也可以像UIView一样添加子Layer。
<img src="http://andyfightting.github.io/myimg/ios/calayer.png" alt="image" /></p>

<h4>CALayer常用属性</h4>

<pre><code>anchorPoint 和中心点position重合的一个点，称为“锚点”，锚点的描述是相对于x、y位置比例而言的默认在图像中心点(0.5,0.5)的位置
backgroundColor 图层背景颜色  
borderColor 边框颜色    
borderWidth 边框宽度    
bounds  图层大小    
contents    图层显示内容，例如可以将图片作为图层内容显示
contentsRect    图层显示内容的大小和位置    
cornerRadius    圆角半径    
doubleSided 图层背面是否显示，默认为YES 
frame   图层大小和位置，不支持隐式动画，所以CALayer中很少使用frame，通常使用bounds和position代替
hidden  是否隐藏    
mask    图层蒙版    
maskToBounds    子图层是否剪切图层边界，默认为NO 
opacity 透明度 ，类似于UIView的alpha    
position    图层中心点位置，类似于UIView的center
shadowColor 阴影颜色    
shadowOffset    阴影偏移量 
shadowOpacity   阴影透明度，注意默认为0，如果设置阴影必须设置此属性
shadowPath  阴影的形状 
shadowRadius    阴影模糊半径  
sublayers   子图层   
sublayerTransform   子图层形变 
transform   图层形变
</code></pre>

<p>要注意position和anchorPoint的区别：<strong>position是layer中的anchorPoint点在superLayer中的位置坐标！position点是相对suerLayer的，anchorPoint点是相对自身layer的！</strong> 所以说position不变，但anchorPoint改变的话，也会改变layer在superLayer中的位置！</p>

<pre><code>layer=[[CALayer alloc]init];
layer.backgroundColor=[UIColor purpleColor].CGColor;
layer.bounds=CGRectMake(0, 0, 100,100);
layer.shadowColor=[UIColor redColor].CGColor;
layer.shadowOffset=CGSizeMake(5, 5);
layer.shadowOpacity=0.7;
layer.borderColor=[UIColor yellowColor].CGColor;
layer.borderWidth=3;
layer.position=CGPointMake(size.width/2, size.height/2);
[self.view.layer addSublayer:layer];

//layer.anchorPoint=CGPointMake(0, 0); //图一
//layer.anchorPoint=CGPointMake(0, 1); //图二
</code></pre>

<p>图中position一样，但anchorPoint不一样，所以图片位置也不一样。  <br/>
<img src="http://andyfightting.github.io/myimg/ios/layer_position.png" alt="image" />
注意如果要设置圆角，对于图层本身而言可以正常显示，但是对于图层中绘制的图片无法正确显示。如果想要图片正确显示则必须设置masksToBounds=YES，剪切子图层。但设置layer.masksToBounds=YES后，图层的影效果无法和masksToBounds=YES同时使用，因为masksToBounds的目的就是剪切外边框。如果同时要阴影又要圆角的话，就用两个重叠的图层,底部负责绘制阴影，上层负责绘制圆角。</p>

<h4>Core Animation</h4>

<p>iOS的核心动画Core Animation包含在Quartz Core框架中。核心动画分为几类：基础动画、关键帧动画、动画组、转场动画,各个类的关系大致如下：
<img src="http://andyfightting.github.io/myimg/ios/core_animation.png" alt="image" />
*CAAnimation：核心动画的基础类，不能直接使用，负责动画运行时间、速度的控制，本身实现了CAMediaTiming协议。</p>

<p>*CAPropertyAnimation：属性动画的基类，通过属性进行动画设置，不能直接使用。</p>

<p>*CAAnimationGroup：动画组合模式，可以通过动画组来进行所有动画行为的统一控制，组中所有动画效果可以并发执行。</p>

<p>*CATransition：转场动画，主要通过滤镜进行动画效果设置。</p>

<p>*CABasicAnimation：基础动画，通过属性修改进行动画参数控制，只有初始状态和结束状态。</p>

<p>*CAKeyframeAnimation：关键帧动画，同样是通过属性进行动画参数控制，但是同基础动画不同的是它可以有多个状态控制。</p>

<p>基础动画、关键帧动画都属于属性动画，就是通过修改属性值产生动画效果，只需要设置初始值和结束值，中间的过程动画由系统自动计算产生。和基础动画不同的是关键帧动画可以设置多个属性值，每两个属性中间的过渡动画由系统自动完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的Core Data]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/core-data/"/>
    <updated>2016-08-04T16:22:22+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/core-data</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/watchos/documentation/Cocoa/Conceptual/CoreData/index.html">Core Data</a>是一个对sqlite数据库进行封装的ORM(Object Relation Mapping)框架。它主要由以下几部分组成：</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObject_Class/">NSManagedObject</a></h4>

<p>NSManagedObject is a generic class that implements all the basic behavior required of a Core Data model object. It is not possible to use instances of direct subclasses of NSObject (or any other class not inheriting from NSManagedObject) with a managed object context. You may create custom subclasses of NSManagedObject, although this is not always required. If no custom logic is needed, a complete object graph can be formed with NSManagedObject instances.</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectModel_Class/">NSManagedObjectModel</a></h4>

<p>An NSManagedObjectModel object describes a schema, a collection of entities (data models) that you use in your application.</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectContext_Class/">NSManagedObjectContext</a></h4>

<p>An instance of NSManagedObjectContext represents a single “object space” or scratch pad in an application. Its primary responsibility is to manage a collection of managed objects. These objects form a group of related model objects that represent an internally consistent view of one or more persistent stores. A single managed object instance exists in one and only one context, but multiple copies of an object can exist in different contexts. Thus object uniquing is scoped to a particular context.</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSPersistentStoreCoordinator_Class/">NSPersistentStoreCoordinator</a></h4>

<p>Instances of NSPersistentStoreCoordinator associate persistent stores (by type) with a model (or more accurately, a configuration of a model) and serve to mediate between the persistent store or stores and the managed object context or contexts. Instances of NSManagedObjectContext use a coordinator to save object graphs to persistent storage and to retrieve model information. A context without a coordinator is not fully functional as it cannot access a model except through a coordinator. The coordinator is designed to present a façade to the managed object contexts such that a group of persistent stores appears as an aggregate store. A managed object context can then create an object graph based on the union of all the data stores the coordinator covers.</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSFetchRequest_Class/index.html#//apple_ref/occ/cl/NSFetchRequest">NSFetchRequest</a></h4>

<p>An instance of NSFetchRequest describes search criteria used to retrieve data from a persistent store.</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/">NSPredicate</a></h4>

<p>The NSPredicate class is used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.</p>

<p><img src="http://andyfightting.github.io/myimg/ios/cd_orm.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/ios/cd_table.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的NSURLSession]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/session/"/>
    <updated>2016-08-04T16:22:02+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/session</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
