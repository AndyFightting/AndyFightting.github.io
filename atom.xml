<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[阿贵]]></title>
  <link href="http://andyfightting.github.io/atom.xml" rel="self"/>
  <link href="http://andyfightting.github.io/"/>
  <updated>2016-11-19T12:33:45+08:00</updated>
  <id>http://andyfightting.github.io/</id>
  <author>
    <name><![CDATA[guimingsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts + Spring + MyBatis 框架搭建]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/struts-spring-mybatis/"/>
    <updated>2016-11-17T09:22:51+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/struts-spring-mybatis</id>
    <content type="html"><![CDATA[<h4>基本信息：</h4>

<p><code>Mac OS 10.11</code>, <code>Eclipse Neon</code>, <code>JDK1.8</code>, <code>Tomcat7</code>, <code>struts2.5.5</code>, <code>spring4.3.4</code>, <code>mybatis3.4.1</code>,<code>mybatis-spring1.3</code>,<code>mysql数据库</code></p>

<h4>结构简介：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>用struts2来控制方法调用和页面跳转，jps和Action通过strtus2的标签方式传值(OGNL)。
</span><span class='line'>Action负责业务逻辑处理，Action调用Service接口，Service接口注入某个Service的实现，
</span><span class='line'>在Service的实现里调用Dao来处理数据库。
</span><span class='line'>而Dao是用Mybatis通过对应的xml文件来映射的,
</span><span class='line'>且Action里的Service实现类注入和Service实现类里的Dao注入,Dao的Section注入，
</span><span class='line'>都是通过Spring配置文件实现的。</span></code></pre></td></tr></table></div></figure>


<h4>截图:</h4>

<p><img src="http://andyfightting.github.io/myimg/java/ssm_index.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssm_list.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssm_json.png" alt="" />
<img src="http://andyfightting.github.io/myimg/java/ssm.png" alt="" /></p>

<p><a href="http://andyfightting.github.io/mysrc/java/TestDynamicWeb.zip">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate 的简单使用]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/hibernate/"/>
    <updated>2016-11-17T09:20:12+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/hibernate</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 依赖注入]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/17/spring-ioc/"/>
    <updated>2016-11-17T09:17:48+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/17/spring-ioc</id>
    <content type="html"><![CDATA[<p><a href="https://spring.io/">Spring</a>是一个大东西，框架集合。Spring MVC, Spring AOP, Spring IoC&hellip;等等。先看看Spring IoC(Inversion of Control)控制反转。就是把原先要手动 new 一个对象，现在只要在Srping 的配置文件里配置就可以了，从主动控制对象，到被动接收对象，这就叫控制反转，也叫依赖注入(dependency injection)！ 依赖注入是Spring的核心机制，把对象之间的依赖关系转为用配置文件来管理，这有赖于它的核心组件 Beans, Core, Context 。</p>

<p><img src="http://andyfightting.github.io/myimg/java/spring_core.png" alt="" /></p>

<p>开始之前要下载Spring jar包，但是官网上只看到了maven 和 gradle 的添加方式，要手动下载jar包还不好找呢，藏得跟宝藏似的。<a href="http://repo.spring.io/release/org/springframework/spring/">Spring jar 包下载</a>，还需要它的依赖包 <a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi">Commons Logging</a>。</p>

<p><img src="http://andyfightting.github.io/myimg/java/spring_jar.png" alt="" /></p>

<p>把上面的包下载下来添加到项目里，然后 Add to build path。</p>

<p><img src="http://andyfightting.github.io/myimg/java/spring_add.png" alt="" /></p>

<p>Spring 可以用注解方式注入和xml方式注入。</p>

<h5>1.注解的方式注入一个接口的实现</h5>

<p>接口定义</p>

<pre><code>public interface MessageInterface {
   public String getMessage();
   public String getName();
}
</code></pre>

<p>操作Action</p>

<pre><code>import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component //必须要
public class MessageAction {

final private MessageInterface service;

@Autowired //可不要
public MessageAction(MessageInterface service) {
    this.service = service;
}

public void printMessage() {
    System.out.println(this.service.getMessage() + this.service.getName());
  }
}
</code></pre>

<p>测试类</p>

<pre><code>import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.*;

@Configuration //可不要
@ComponentScan //必须要
public class Application {
    @Bean
    MessageInterface injectImp() {
        return new MessageInterface() {
            public String getMessage() {
              return "Hello World!";
            };

        public String getName(){
            return "sgm";
        }
    };
}

  public static void main(String[] args) {
      ApplicationContext context = new AnnotationConfigApplicationContext(Application.class);
      MessageAction printer = context.getBean(MessageAction.class);
      printer.printMessage();
  }
}
</code></pre>

<p>结果打印出</p>

<pre><code>Hello World!sgm
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Configuration 用于标注一个类，表示bean定义的源文件
</span><span class='line'>@ComponentScan  用于标注一个类，表示扫描指定包中的@Component标注的类。通过该实例得到 ApplicationContext
</span><span class='line'>@Component  用于标注一个类组件，然后通过 ApplicationContext 对象获取
</span><span class='line'>@Bean 用于注入一个实例对象，相当于Spring &lt;bean&gt;XML里的配置
</span><span class='line'>@Autowired  用于标注setter方法，构造器，包含多个参数的方法，集合等等，用于自动注入绑定实例</span></code></pre></td></tr></table></div></figure>


<h5>2.用xml的方式注入一个接口的实现</h5>

<p>如下，UserService是接口，里面定义一个print()方法。UserServiceImp是UserService的一个实现类，实现print(&ldquo;hello wrold&rdquo;)。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

    &lt;bean id="userService" class="com.sgm.implement.UserServiceImp"/&gt;

&lt;/beans&gt;
</code></pre>

<p>userService.print()就会打印出绑定实现类里的"hello wrold"。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ApplicationContext context =  new ClassPathXmlApplicationContext("com/sgm/spring/bean.xml");
</span><span class='line'> UserService userService = (UserService) context.getBean("userService");
</span><span class='line'> userService.print();</span></code></pre></td></tr></table></div></figure>


<p>用xml的方式还可以通过类的构造函数注入，上面的例子是通过属性的set方法注入的。</p>

<pre><code>&lt;bean id="serviceProvider" class="com.sgm.service.ServiceProvider"&gt;
    &lt;constructor-arg ref="userService"&gt;&lt;/constructor-arg&gt;  
&lt;/bean&gt; 

&lt;bean id="userService" class="com.sgm.implement.UserServiceImp"/&gt;
</code></pre>

<p>xml默认都是注入一个单例对象的，即bean的属性 scope = &ldquo;singleton&rdquo; 为默认值。如果要每次都注入一个新对象，则设置bean的属性 scope = &ldquo;prototype"。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native Demo]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/14/react-native/"/>
    <updated>2016-11-14T19:46:09+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/14/react-native</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringMVC + MyBatis 框架搭建]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/14/springmvc-plus-mybatda-jian/"/>
    <updated>2016-11-14T19:34:43+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/14/springmvc-plus-mybatda-jian</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MyBatis 的简单使用]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/14/mybatis/"/>
    <updated>2016-11-14T19:26:25+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/14/mybatis</id>
    <content type="html"><![CDATA[<p>Mybatis是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>

<p>需要两个包：<a href="https://github.com/mybatis/mybatis-3/releases">MyBatis包</a>和<a href="https://www.mysql.com/products/connector/">JDBC Driver for MySQL</a></p>

<p>无论是用过的mybatis和hibernate他们的共同点：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.从配置文件(通常是XML配置文件中)得到sessionfactory
</span><span class='line'>2.由sessionfactory产生session
</span><span class='line'>3.在session中完成对数据的增删改查和事务提交等
</span><span class='line'>4.在用完之后关闭session 
</span><span class='line'>5.在java 对象和数据库之间有mapping的配置文件，也通常是xml文件</span></code></pre></td></tr></table></div></figure>


<p>主要XML配置文件中包含了对 MyBatis 系统的核心设置，包含获取数据库连接实例的数据源和决定事务范围和控制方式的事务管理器。通过加载该文件获取SqlSessionFactory。</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;
&lt;configuration&gt;
    &lt;!--对象别名定义 --&gt;
    &lt;typeAliases&gt;
        &lt;typeAlias alias="User" type="com.sgm.java.User" /&gt;
    &lt;/typeAliases&gt;

&lt;!--数据库连接 --&gt;
&lt;environments default="development"&gt;
    &lt;environment id="development"&gt;
        &lt;transactionManager type="JDBC" /&gt;
        &lt;dataSource type="POOLED"&gt;
            &lt;property name="driver" value="com.mysql.jdbc.Driver" /&gt;
            &lt;property name="url" value="jdbc:mysql://localhost:8889/java_db" /&gt;
            &lt;property name="username" value="root" /&gt;
            &lt;property name="password" value="root" /&gt;
        &lt;/dataSource&gt;
    &lt;/environment&gt;
&lt;/environments&gt;

&lt;!--数据库操作映射文件 --&gt;
&lt;mappers&gt;
    &lt;mapper resource="com/sgm/mybatis/User.xml" /&gt;
&lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>

<p>数据库操作映射文件</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;

&lt;!--namespace很重要，绑定对应的接口文件！--&gt;
&lt;mapper namespace="com.sgm.java.UserDao"&gt;

&lt;resultMap type="User" id="resultListUser"&gt;
    &lt;result column="name" property="name" /&gt;
    &lt;result column="age" property="age" /&gt;
&lt;/resultMap&gt;

&lt;!--id名字要和UserDao里的方法名一样  --&gt;
&lt;insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="id"&gt;
    insert into user(name, age) values(#{name}, #{age});
&lt;/insert&gt;

&lt;delete id="deleteUserById" parameterType="int"&gt;
    delete from user where id = #{id};
&lt;/delete&gt;

&lt;update id="updateUser" parameterType="User" &gt;
     update user set name = #{name}, age = #{age} where id = #{id};
&lt;/update&gt;

&lt;select id="getAllUsers" resultMap="resultListUser"&gt;
    select * from user ;
&lt;/select&gt;

&lt;select id="selectUserById" parameterType="int" resultType="User"&gt;
   select * from user where id = #{id};
&lt;/select&gt;
&lt;/mapper&gt;
</code></pre>

<p>定义数据库操作接口，方法要和对应的映射文件里的id名称一样！</p>

<pre><code>public interface UserDao {
    //  方法名要和User.xml配置文件里的id名称一样
    public void addUser(User user);

    public void deleteUserById(int id);

    public void updateUser(User user);

    public List&lt;User&gt; getAllUsers();

    public User selectUserById(int id);
}
</code></pre>

<p>操作的Java对象</p>

<pre><code>public class User {
        public int id;
        public String name;
        public int age;

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
</code></pre>

<p>测试</p>

<pre><code>public class Main {
    private static Reader reader;
    private static SqlSessionFactory sqlSessionFactory;

static {
    try {
        reader = Resources.getResourceAsReader("MyBatisConfig.xml");
        sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
    } catch (Exception e) {
        e.printStackTrace();
    }
}

public static void main(String[] args) {
    SqlSession session = sqlSessionFactory.openSession();
    UserDao userDao = session.getMapper(UserDao.class);

    try {
//          // 增
//          User newUser = new User();
//          newUser.setName("andy");
//          newUser.setAge(20);
//          userDao.addUser(newUser);
//          session.commit();//必须提交
//          System.out.println("reult------： 新增的userId " + newUser.getId());    
//          //删
//          userDao.deleteUserById(1);
//          session.commit();//必须提交

//          //改
//          User updateUser = new User();
//          updateUser.setId(4);
//          updateUser.setName("andy");
//          updateUser.setAge(20);
//          userDao.updateUser(updateUser);
//          session.commit();//必须提交

//          //列表
//          List&lt;User&gt; userList = userDao.getAllUsers();
//          for(User user : userList){
//              System.out.println("reult------：  " + user.getName());            
//          }
            //查单个
//          User user = userDao.selectUserById(4);
//          System.out.println("reult------：  " + user.getName());
        } finally {
            session.close();//必须关闭
        }
    }
}
</code></pre>

<h3>注意!</h3>

<h5>SqlSessionFactoryBuilder</h5>

<p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此 SqlSessionFactoryBuilder 实例的最佳范围是方法范围,也就是局部方法变量。可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但是最好还是不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情。</p>

<h5>SqlSessionFactory</h5>

<p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次。因此 SqlSessionFactory 的最佳范围是应用范围。可以使用单例模式或者静态单例模式。</p>

<h5>SqlSession</h5>

<p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的范围是请求或方法范围。不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。每次操作应该打开一个 SqlSession，处理数据，处理完后就关闭它。关闭操作很重要，应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SqlSession session = sqlSessionFactory.openSession();
</span><span class='line'>try {
</span><span class='line'>  // do work
</span><span class='line'>} finally {
</span><span class='line'>  session.close();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 一行代码选取图片]]></title>
    <link href="http://andyfightting.github.io/blog/2016/11/11/android-select-photo/"/>
    <updated>2016-11-11T19:31:33+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/11/11/android-select-photo</id>
    <content type="html"><![CDATA[<p>一行代码模仿iOS的选取图片效果。思路主要是把相机和相册的回调放在一个透明的Activity里，然后在这个透明的Activity中弹出自定义的ActionSheet选择框，选取调相机还是相册。相机比较简单，直接调系统的。相册就不用系统的了，不同手机差别太大，效果也不好。自己遍历本地图片文件然后显示。这样即时在不同手机上也能展示相同的效果了。封装后使用就简单了，一行代码调用就可以，不会和业务Activity耦合了！</p>

<h4>使用:</h4>

<p>1.选取一张正方形图片</p>

<pre><code>   SelectPhotoSheet.showCropImageSheet(this, new AlbumResultListener() {
            @Override
            public void complete(View tapedView, List&lt;String&gt; pathList) {
                cache.displayBmp(headImageView, pathList.get(0), new Point(100, 100));
            }
        });
</code></pre>

<p>2.选取限制数量的全尺寸图片</p>

<pre><code>SelectPhotoSheet.showFullImageSheet(this, 8, new AlbumResultListener() {
            @Override
            public void complete(View tapedView, List&lt;String&gt; pathList) {
                localPathList.clear();
                localPathList.addAll(pathList);
                adapter.notifyDataSetChanged();
            }
        });
</code></pre>

<p><img src="http://andyfightting.github.io/myimg/android/one_select.png" alt="" /></p>

<h4>实现</h4>

<p>1.自定义ActionSheet，弄一个Sheet的工具类 BaseSheetActivity。</p>

<pre><code>//用作弹出 action sheet 效果的 base activity
public class BaseSheetActivity extends Activity {
    protected int activityCloseEnterAnimation;
    protected int activityCloseExitAnimation;

public static ItemTapListener itemTapListener;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);

    TypedArray activityStyle = getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowAnimationStyle});
    int windowAnimationStyleResId = activityStyle.getResourceId(0, 0);
    activityStyle.recycle();

    activityStyle = getTheme().obtainStyledAttributes(windowAnimationStyleResId, new int[] {android.R.attr.activityCloseEnterAnimation, android.R.attr.activityCloseExitAnimation});
    activityCloseEnterAnimation = activityStyle.getResourceId(0, 0);
    activityCloseExitAnimation = activityStyle.getResourceId(1, 0);
    activityStyle.recycle();
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    dismiss();
    if (itemTapListener != null){
        itemTapListener.itemTap(new View(this),"");
    }
    return super.onTouchEvent(event);
}

@Override
public void finish() {
    dismiss();
}

public void dismiss(){
    super.finish();
    overridePendingTransition(activityCloseEnterAnimation, activityCloseExitAnimation);
}

public static void show(Context context, Class showedActivityClass, ItemTapListener itemTapListener){
    BaseSheetActivity.itemTapListener = itemTapListener;
    Intent intent = new Intent(context,showedActivityClass);
    context.startActivity(intent);
}
}
</code></pre>

<p>  要使用ActionSheet的效果话就是继承它，然后theme选择ActionSheetTheme。然后把界面的布局从bottom开始布局。</p>

<pre><code>  public class PhotoSheet extends BaseSheetActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.action_photo_sheet); //action_photo_sheet的布局从bottom开始

}

public void itemTap(View view){
    dismiss();
    if (itemTapListener != null){
        itemTapListener.itemTap(view,"");
    }
}

@Override
public void onBackPressed() {
    dismiss();
    if (itemTapListener != null){
        itemTapListener.itemTap(new View(this),"");
    }
}
}

   //设置为自定义的样式
 &lt;activity
        android:name=".photo_lib.photo.PhotoSheet"
        android:theme="@style/ActionSheetTheme" /&gt;
</code></pre>

<p>2.读图片文件路径，不单单是相册里的图片</p>

<pre><code>public void getLocalImages() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                Uri mImageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                ContentResolver mContentResolver = AlbumDirActivity.this.getContentResolver();

            Cursor mCursor = mContentResolver.query(
                    mImageUri,
                    null,
                    MediaStore.Images.Media.MIME_TYPE + "=? or " + MediaStore.Images.Media.MIME_TYPE + "=? or " + MediaStore.Images.Media.MIME_TYPE + "=?",
                    new String[]{"image/jpeg", "image/png", "image/jpg"},
                    MediaStore.Images.Media.DATE_MODIFIED);

            while (mCursor.moveToNext()) {
                String path = mCursor.getString(mCursor.getColumnIndex(MediaStore.Images.Media.DATA));
                String parentName = new File(path).getParentFile().getName();

                if (!dirMap.containsKey(parentName)) {
                    List&lt;String&gt; chileList = new ArrayList&lt;&gt;();
                    chileList.add(path);
                    dirMap.put(parentName, chileList);
                } else {
                    dirMap.get(parentName).add(path);
                }
            }
            mCursor.close();
            mHandler.sendEmptyMessage(SCAN_OK);
        }
    }).start();
}
</code></pre>

<p>3.用LruCache缓存显示压缩后的图片</p>

<pre><code>public class LocalImageCache {

private static LocalImageCache mInstance;

private Handler mHander = new Handler();
private LruCache&lt;String, Bitmap&gt; mMemoryCache;
private CacheImageCallBack mCallBack;
private ExecutorService mImageThreadPool = Executors.newFixedThreadPool(5);

private LocalImageCache() {
    final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
    final int cacheSize = maxMemory / 5;

    mMemoryCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) {
        @Override
        protected int sizeOf(String key, Bitmap bitmap) {
            return bitmap.getByteCount()/1024;
        }
    };

    mCallBack = new CacheImageCallBack() {
        @Override
        public void onImageLoader(ImageView imageView, Bitmap bitmap) {
            if (bitmap != null &amp;&amp; imageView != null) {
                imageView.setImageBitmap(bitmap);
            }
        }
    };
}

public static LocalImageCache getInstance() {
    synchronized (LocalImageCache.class) {
        if (mInstance == null) {
            mInstance = new LocalImageCache();
        }
        return mInstance;
    }
}

public static void clearCache() {
    LocalImageCache cache = getInstance();
    cache.mMemoryCache.evictAll();
}

public void displayBmp(final ImageView imageView, final String path, final Point mPoint) {
    if (TextUtils.isEmpty(path) || imageView == null) {
        return;
    }

    Bitmap bitmap = getBitmapFromMemCache(path);
    if (bitmap == null) {
        imageView.setImageBitmap(null);

        mImageThreadPool.execute(new Runnable() {
            Bitmap mBitmap;

            @Override
            public void run() {
                mBitmap = decodeThumbBitmapForFile(path, mPoint == null ? 0 : mPoint.x, mPoint == null ? 0 : mPoint.y);
                mHander.post(new Runnable() {
                    @Override
                    public void run() {
                        mCallBack.onImageLoader(imageView, mBitmap);
                    }
                });
                addBitmapToMemoryCache(path, mBitmap);
            }
        });
    } else {
        imageView.setImageBitmap(bitmap);
    }
}

private void addBitmapToMemoryCache(String key, Bitmap bitmap) {
    if (getBitmapFromMemCache(key) == null &amp;&amp; bitmap != null) {
        mMemoryCache.put(key, bitmap);
    }
}

private Bitmap getBitmapFromMemCache(String key) {
    return mMemoryCache.get(key);
}

private Bitmap decodeThumbBitmapForFile(String path, int viewWidth, int viewHeight) {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(path, options);
    options.inSampleSize = computeScale(options, viewWidth, viewHeight);
    options.inJustDecodeBounds = false;

    return BitmapFactory.decodeFile(path, options);
}

private int computeScale(BitmapFactory.Options options, int viewWidth, int viewHeight) {
    int inSampleSize = 1;
    if (viewWidth == 0 || viewHeight == 0) {
        return inSampleSize;
    }
    int bitmapWidth = options.outWidth;
    int bitmapHeight = options.outHeight;

    if (bitmapWidth &gt; viewWidth || bitmapHeight &gt; viewHeight) {
        int widthScale = Math.round((float) bitmapWidth / (float) viewWidth);
        int heightScale = Math.round((float) bitmapHeight / (float) viewHeight);

        inSampleSize = (widthScale+heightScale)/2;
    }
    return inSampleSize;
}


private interface CacheImageCallBack {
    void onImageLoader(ImageView imageView, Bitmap bitmap);
}
}
</code></pre>

<p>4.用DrawerLayout封装了一个手势返回的基础类</p>

<pre><code>public class BaseSwipeActivity extends AppCompatActivity {

private LinearLayout containerLayout;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    initSwipeView();
}

@Override
protected void onDestroy() {
    super.onDestroy();
}

private void initSwipeView() {
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    setContentView(R.layout.activity_base_swipe);

    containerLayout = (LinearLayout) findViewById(R.id.container_layout);

    DrawerLayout drawer = (DrawerLayout) findViewById(R.id.base_drawer_layout);
    drawer.openDrawer(GravityCompat.END);
    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
        @Override
        public void onDrawerClosed(View drawerView) {
            super.onDrawerClosed(drawerView);
            finish();
        }
    };
    drawer.addDrawerListener(toggle);
}

//子类要手势返回就用setMainView!!!!
public void setMainView(int viewId) {
    LayoutInflater inflater = LayoutInflater.from(this);
    View tmpView = inflater.inflate(viewId, null);

    if (tmpView instanceof LinearLayout) {
        LinearLayout.LayoutParams linearLayoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(linearLayoutParams);
    } else if (tmpView instanceof RelativeLayout) {
        RelativeLayout.LayoutParams relativeLayoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(relativeLayoutParams);
    }
    containerLayout.removeAllViews();
    containerLayout.addView(tmpView);
}

public void backViewTap(View v) {

}

public void backImageTap(View v) {
    finish();
}
}
</code></pre>

<p>其他Activity需要手势返回的话就继承它，然后使用setMainView()替代setContentView()设置界面布局，其他什么都不用管啦！</p>

<h4>注意</h4>

<p>要在使用的Activity的onDestroy()方法中调用 FileUtil.deleteAllFile(); 清除选取的临时缓存图片！！！</p>

<p><a href="https://github.com/AndyFightting/SelectPhoto_Android">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Not Found for Architecture Arm64]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/12/link-bug/"/>
    <updated>2016-09-12T10:00:18+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/12/link-bug</id>
    <content type="html"><![CDATA[<p>接手维护一个项目，更新一下出现了下面这问题👇
<img src="http://andyfightting.github.io/myimg/ios/arm64.png" alt="image" /></p>

<p>好像不常见的问题，谷歌一下</p>

<p><a href="http://stackoverflow.com/questions/19213782/undefined-symbols-for-architecture-arm64">Stack Overflow</a>
<img src="http://andyfightting.github.io/myimg/ios/stackoverflow.png" alt="image" /></p>

<p>说是Architectures设置问题&hellip; 说是Other Linker Flags问题&hellip;说是Target Membership问题&hellip; 改了好像都没用啊，问题还是一动不动的出现在那里&hellip;
<img src="http://andyfightting.github.io/myimg/ios/targetMap.png" alt="image" /></p>

<p>继续找找找&hellip;用对应的类文件全局搜一下&hellip;诶~ 好像那里不对啊&hellip;路径怎么这样子??怎么和别的不一样~~ 喜出望外，好像知道原因了，果然项目文件夹里看不到该文件，Add Files to &ldquo;XXX"添加文件!
<img src="http://andyfightting.github.io/myimg/ios/errorLoad.png" alt="image" /></p>

<p>还是不行&hellip;把对应的.h .m文件拖到桌面上，再重新添加到项目里，解决了！！为什么一开始不怀疑是文件索引问题呢？ 因为项目编译没报 XXX.h not found &hellip;以为文件都好好的呢，以为是项目的配置问题&hellip; 所以一开始找问题的方向就跑偏了！其实这问题之前也遇到过，一般是第三方的XXX.a文件出现这问题，只是这次脑袋没长记性&hellip;这问题一般是多人开发项目用SVN更来更去导致的<code>project.pbxproj</code>里对应的文件索引没了。好了，再遇到这问题就不要跑偏了，把对应的文件重新添加就可以了！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OkHttp and Retrofit]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/08/okhttp-retrofit/"/>
    <updated>2016-09-08T14:57:19+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/08/okhttp-retrofit</id>
    <content type="html"><![CDATA[<p><a href="http://square.github.io/okhttp/">OkHttp</a>和<a href="http://square.github.io/retrofit/">Retrofit</a>都是<a href="http://square.github.io/">Square</a>公司开源出来的网络请求框架。Retrofit是对OkHttp的封装，使其可以用注解的方式调用。</p>

<h4>OkHttp</h4>

<pre><code>//-----okhttp 网络请求 工具类-----

//异步请求结果放在主线程回调。
private static final Handler mainHandler = new Handler(Looper.getMainLooper()); 

private static final OkHttpClient client = new OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .writeTimeout(10, TimeUnit.SECONDS)
        .readTimeout(10, TimeUnit.SECONDS)
        .build();

public static void getRequest(String url, final OkHttpListener listener) {
    Request request = new Request.Builder()
            .header("token", getUserToken())
            .header("client", "Android")
            .header("versionCode", getVersionCode())
            .header("versionName", getVersionName())
            .url(url)
            .build();
    beginRequest(request, listener);
}

//这样就不会有中文乱码问题
public static void postRequest(String url, final Map&lt;String, String&gt; params, final OkHttpListener listener) {
    StringBuilder stringBuilder = new StringBuilder("");
    if (params != null) {
        Set&lt;String&gt; keys = params.keySet();
        for (String key : keys) {
            String value = params.get(key);
            stringBuilder.append(key + "=" + value + "&amp;");
        }
    }

    MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded;charset=utf-8");
    RequestBody body = RequestBody.create(mediaType, stringBuilder.toString());

    Request request = new Request.Builder()
            .header("token", getUserToken())
            .header("client", "Android")
            .header("versionCode", getVersionCode())
            .header("versionName", getVersionName())
            .url(url)
            .post(body)
            .build();

    beginRequest(request, listener);
}

//可添加图片文件
public static void postMutibleRequest(String url, final Map&lt;String, Object&gt; params, final OkHttpListener listener) {
    MultipartBody.Builder multipleBuilder = new MultipartBody.Builder();
    multipleBuilder.setType(MultipartBody.FORM);

    if (params != null) {
        Set&lt;String&gt; keys = params.keySet();
        for (String key : keys) {
            Object obj = params.get(key);

            if (obj instanceof File) {
                File tmpFile = (File) obj;
                multipleBuilder.addFormDataPart(key, tmpFile.getName(), MultipartBody.create(MediaType.parse("image/jpg"), tmpFile));
            } else {
                multipleBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"" + key + "\""), RequestBody.create(null, (String) obj));
            }
        }
    }

    RequestBody multipleBody = multipleBuilder.build();
    Request request = new Request.Builder()
            .header("token", getUserToken())
            .header("client", "Android")
            .header("versionCode", getVersionCode())
            .header("versionName", getVersionName())
            .url(url)
            .post(multipleBody)
            .build();

    beginRequest(request, listener);
}

//保存网络图片到相册,返回本地存储路径
public static void downloadImageToSysPhoto(String imageUrl, final OkHttpListener listener) {
    Request request = new Request.Builder().url(imageUrl).build();
    Call call = client.newCall(request);
    call.enqueue(new Callback() {
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            try {
                //系统相册路径
                final String localPath = "/storage/emulated/0/DCIM/Camera/" + CommonUtil.getUniqueString(10) + ".jpg";

                InputStream is = response.body().byteStream();
                FileOutputStream fos = new FileOutputStream(localPath);
                byte[] buffer = new byte[1024];

                int len;
                while ((len = is.read(buffer)) != -1) {
                    fos.write(buffer, 0, len);
                }
                is.close();
                fos.close();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.success(localPath);
                        }
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.fail(0, "");
                        }
                    }
                });
            }
        }

        @Override
        public void onFailure(Call call, IOException e) {
            mainHandler.post(new Runnable() {
                @Override
                public void run() {
                    if (listener != null) {
                        listener.fail(0, "");
                    }
                }
            });
        }
    });
}

private static void beginRequest(Request request, final OkHttpListener listener) {
    Call call = client.newCall(request);

    call.enqueue(new Callback() {//enqueue是异步请求
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            final String responseString = response.body().string();
            final int code = response.code();

            if (response.isSuccessful()) {
                CommonUtil.logJson(responseString);

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.success(responseString);
                        }
                    }
                });
            } else {
                //请求失败：    400  ---------   {"code":100004,"msg":"手机号已注册"}
                CommonUtil.logString("请求失败：" + code + "---------" + responseString);
                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (listener != null) {
                            listener.fail(code, responseString);
                        }
                    }
                });
            }
        }

        @Override
        public void onFailure(Call call, IOException e) {
            e.printStackTrace();
            CommonUtil.logString("请求错误");
            mainHandler.post(new Runnable() {
                @Override
                public void run() {
                    if (listener != null) {
                        listener.fail(0, "请求失败");
                    }
                }
            });
        }
    });
}

public static String getFailedMsg(String response) {
    try {
        JSONObject jsonObject = new JSONObject(response);
        return jsonObject.getString("msg");
    } catch (Exception e) {
        e.printStackTrace();
    }
    return "请求失败";
}

public static String getUserToken() {
    UserModel userModel = UserModel.getUser();
    if (userModel != null) {
        return userModel.getToken();
    }
    return "";
}

public static String getVersionCode() {
    try {
        PackageInfo pi = application.getPackageManager().getPackageInfo(application.getPackageName(), 0);
        return pi.versionCode + "";
    } catch (Exception e) {
        e.printStackTrace();
    }
    return "";
}

public static String getVersionName() {
    try {
        PackageInfo pi = application.getPackageManager().getPackageInfo(application.getPackageName(), 0);
        return pi.versionName;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return "";
}

//下载apk安装包，HUD是自定义的等待进度条
private static int apkProgress;
public static void downloadAPK(final Context context, String apkUrl) {
    HUD.show(context, "下载中...");
    HUD.setCancelable(false);

    Request request = new Request.Builder().url(apkUrl).build();
    Call call = client.newCall(request);
    call.enqueue(new Callback() {
        @Override
        public void onResponse(Call call, Response response) throws IOException {
            try {
                FileUtil.createDir();//创建  ~/paiqi/ 文件夹
                final String apkLocalPath = FileUtil.DIR_PATH + "paiqi.apk";

                InputStream is = response.body().byteStream();
                FileOutputStream fos = new FileOutputStream(apkLocalPath);
                int readNum;
                byte[] buffer = new byte[1024];

                int progressCount = 0;
                long totalLength = response.body().contentLength();

                while ((readNum = is.read(buffer)) != -1) {
                    progressCount += readNum;
                    apkProgress = (int) (((float) progressCount / totalLength) * 100);

                    mainHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            HUD.setMessage("下载中 " + apkProgress + "%");
                        }
                    });

                    fos.write(buffer, 0, readNum);
                }
                is.close();
                fos.close();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        HUD.dismiss();
                        installAPK(context, apkLocalPath);
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();

                mainHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        HUD.dismiss();
                        CommonUtil.showToast("下载失败");
                    }
                });
            }
        }

        @Override
        public void onFailure(Call call, IOException e) {
            mainHandler.post(new Runnable() {
                @Override
                public void run() {
                    HUD.dismiss();
                    CommonUtil.showToast("下载失败");
                }
            });
        }
    });
}

//安装apk
private static void installAPK(Context context, String apkPath) {
    File apkFile = new File(apkPath);
    if (!apkFile.exists()) {
        CommonUtil.showToast("安装失败");
        return;
    }
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setDataAndType(Uri.parse("file://" + apkFile.toString()), "application/vnd.android.package-archive");
    context.startActivity(intent);
} 

//请求回调接口定义
public interface OkHttpListener {
   void success(String response);
   void fail(int code,String response);
}
</code></pre>

<p>要注意的是enqueue方法是异步请求，所以要把结果回调放在主线程中进行。</p>

<pre><code> mainHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            if (listener != null) {
                                listener.success(responseString);
                            }
                        }
                    });
</code></pre>

<p>之前看过一个同事的网络库封装，把网络回调接口放在BaseActivity里，然后在子Activity里重写回调方法！这样导致的结果就是，Fragment里的请求都要通过Activity来重写方法，然后再转发给Fragment&hellip;简直想骂街啊有木有！下面这样调用是不是很简单呢~!</p>

<pre><code>//get异步请求,回调都已放在主线程中
 OkHttpHelper.getRequest(ulr, new OkHttpListener() {
        @Override
        public void success(String response) {

        }

        @Override
        public void fail() {

        }
    });

   //post异步请求，回调都已放在主线程中，也可以用于提交File
    Map&lt;String, Object&gt; paramter = new HashMap&lt;&gt;();
    paramter.put("name", "阿贵");
    paramter.put("file", new File("filePath"));//提交图片文件

    OkHttpHelper.postRequest(url, paramter, new OkHttpListener() {
        @Override
        public void success(String response) {

        }

        @Override
        public void fail() {

        }
    });
</code></pre>

<p>还有很多人喜欢把网络请求和结果解析写在一起，比如通过请求结果直接得到对应的Bean。这样导致的结果就是网球请求结果类型不统一，返回各种Bean。个人不太喜欢这样，可以对结果解析进行简单封装一下，这样网络返回的结果也会统一，数据解析也就一行代码。</p>

<pre><code>//使用: getBean(json, User.class);
public static &lt;T&gt; T getBean(String json, Class&lt;T&gt; clazz) {
    T bean = null;
    try {
        Gson gson = new Gson();
        bean = gson.fromJson(json, clazz);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return bean;
}

   //使用：getBeanList(json, User[].class);
    public static &lt;T&gt; List&lt;T&gt; getBeanList(String json, Class&lt;T[]&gt; type) {
        try{
            T[] list = new Gson().fromJson(json, type);
            return Arrays.asList(list);
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }
</code></pre>

<h4>Retrofit</h4>

<p><a href="http://square.github.io/retrofit/">Retrofit官网</a>上的例子中返回结果是Bean，但又没说添加了GsonConverterFactory，所以会报 Could not locate ResponseBody converter for XXBean 错误！所以要引入GsonConverterFactory转化库<code>compile 'com.squareup.retrofit2:converter-gson:2.0.2'</code>, 然后在Retrofit初始化的时候添加该库！官网后面说了 By default, Retrofit can only deserialize HTTP bodies into OkHttp&rsquo;s ResponseBody type and it can only accept its RequestBody type for @Body. 默认只会返回ResponseBody！并且只有ResponseBody才可以使用@Body注解！我个人还是不喜欢直接在这里得到Bean, 我还是喜欢先通过得到response.body().string()，然后再转化成Bean，各司其职。注意是<code>response.body().string()</code>，不是<code>response.body().toString()</code>!!</p>

<pre><code>    Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://api.github.com/")
                .addConverterFactory(GsonConverterFactory.create()) //添加Bean转化库
                .build();

    ServiceInterface service = retrofit.create(ServiceInterface.class);

    Call&lt;TestBean&gt; requestCall = service.getUserInfo();

    requestCall.enqueue(new Callback&lt;TestBean&gt;() {
        @Override
        public void onResponse(Call&lt;TestBean&gt; call, Response&lt;TestBean&gt; response) {

                TestBean b = response.body();
        }

        @Override
        public void onFailure(Call&lt;TestBean&gt; call, Throwable t) {

        }
    });

 public interface ServiceInterface {
    @GET("users/andyfightting")
    Call&lt;TestBean&gt; getUserInfo();

    //这里继续添加其他接口

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的AsyncTask]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/07/asynctask/"/>
    <updated>2016-09-07T10:15:12+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/07/asynctask</id>
    <content type="html"><![CDATA[<p>Android和iOS一样，对UI的操作只能放在主线程中进行，即UI线程。如果在UI线程中执行比较耗时的方法，就会造成界面卡顿假死无反应，所以应该把耗时操作放在<code>非UI线程</code>中处理，处理完成后再在<code>UI线程</code>中更新界面。</p>

<p>在没有AsyncTask类的时候，是通过在子线程处理，然后sendMessage(Message msg)给主线程中创建的Handler,然后在主线程中实现handleMessage(Message msg)处理相应信息。而这些工作AsyncTask帮我们做了，AsyncTask就是对Thread和Handler的封装。</p>

<h4>AsyncTask使用</h4>

<p>AsyncTask是一个抽象类，所以必须创建一个子类去继承它。在继承时我们可以为AsyncTask类指定三个参数类型,这三个类型会影响重写方法对应的参数类型。</p>

<ol>
<li>Params: 在execute()启动任务时需要传入的参数</li>
<li>Progress: 后台任务执行过程中，需要实时反馈出来的信息，比如执行进度什么的</li>
<li>Result: 后台任务执行完毕后，如果需要对结果进行返回，则返回该类型</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//on开通的方法都是在UI线程中执行的
</span><span class='line'>class MyAsyncTask extends AsyncTask&lt;Void,Integer,Boolean&gt;{
</span><span class='line'>    @Override
</span><span class='line'>    protected void onPreExecute() {//在执行实际的后台的doInBackground方法前
</span><span class='line'>        super.onPreExecute();
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    @Override
</span><span class='line'>    protected Boolean doInBackground(Void... params) {//在onPreExecute 方法执行后马上执行，该方法运行在后台线程中
</span><span class='line'>        for (int i = 0; i &lt;= 100; i++) {
</span><span class='line'>            publishProgress(i);//调用onProgressUpdate
</span><span class='line'>            try {
</span><span class='line'>                Thread.sleep(1000);
</span><span class='line'>            } catch (InterruptedException e) {
</span><span class='line'>                e.printStackTrace();
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return true;//可以判断是否顺利执行完了啊
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onProgressUpdate(Integer... values) {//这个函数在doInBackground调用publishProgress时被调用后
</span><span class='line'>        super.onProgressUpdate(values);
</span><span class='line'>        //比如实时更新进度条
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onPostExecute(Boolean aBoolean) {
</span><span class='line'>        super.onPostExecute(aBoolean);
</span><span class='line'>        //后台顺利执行完后要干啥呢
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onCancelled() {
</span><span class='line'>        super.onCancelled();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>Task的实例必须在UI 线程中创建</li>
<li>execute方法必须在UI 线程中调用</li>
<li>不要手动的调用onPreExecute(), onPostExecute(Result)，doInBackground(Params&hellip;)等方法</li>
<li>该task只能被执行一次，否则多次调用时将会抛出异常</li>
</ol>


<h4>AsyncTask源码</h4>

<p>AsyncTask有个handler内部类，用它来处理在主线程中实时更新和任务完成后的回调</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private static InternalHandler sHandler;
</span><span class='line'>
</span><span class='line'>private static Handler getHandler() {
</span><span class='line'>    synchronized (AsyncTask.class) {
</span><span class='line'>        if (sHandler == null) {
</span><span class='line'>            sHandler = new InternalHandler();
</span><span class='line'>        }
</span><span class='line'>        return sHandler;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>private static class InternalHandler extends Handler {
</span><span class='line'>    public InternalHandler() {
</span><span class='line'>        super(Looper.getMainLooper());
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @SuppressWarnings({"unchecked", "RawUseOfParameterizedType"})
</span><span class='line'>    @Override
</span><span class='line'>    public void handleMessage(Message msg) {
</span><span class='line'>        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;
</span><span class='line'>        switch (msg.what) {
</span><span class='line'>            case MESSAGE_POST_RESULT:
</span><span class='line'>                // There is only one result
</span><span class='line'>                result.mTask.finish(result.mData[0]);
</span><span class='line'>                break;
</span><span class='line'>            case MESSAGE_POST_PROGRESS:
</span><span class='line'>                result.mTask.onProgressUpdate(result.mData);
</span><span class='line'>                break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>当我们调用publishProgress方法时，就是得到handler单列然后发消息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   protected final void publishProgress(Progress... values) {
</span><span class='line'>        if (!isCancelled()) {
</span><span class='line'>            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,
</span><span class='line'>                    new AsyncTaskResult&lt;Progress&gt;(this, values)).sendToTarget();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>   private static class AsyncTaskResult&lt;Data&gt; {
</span><span class='line'>        final AsyncTask mTask;
</span><span class='line'>        final Data[] mData;
</span><span class='line'>
</span><span class='line'>     AsyncTaskResult(AsyncTask task, Data... data) {
</span><span class='line'>            mTask = task;
</span><span class='line'>            mData = data;
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>当执行execute()方法时，会在后台任务doInBackground(mParams)开始执行前调用onPreExecute方法。从下面可以看出，当task已经在运行或者已经结束的时候不可以再调用execute()方法，否则会报错。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> public final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) {
</span><span class='line'>        return executeOnExecutor(sDefaultExecutor, params);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>  public final AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec,
</span><span class='line'>            Params... params) {
</span><span class='line'>        if (mStatus != Status.PENDING) {
</span><span class='line'>            switch (mStatus) {
</span><span class='line'>                case RUNNING:
</span><span class='line'>                    throw new IllegalStateException("Cannot execute task:"
</span><span class='line'>                            + " the task is already running.");
</span><span class='line'>                case FINISHED:
</span><span class='line'>                    throw new IllegalStateException("Cannot execute task:"
</span><span class='line'>                            + " the task has already been executed "
</span><span class='line'>                            + "(a task can be executed only once)");
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        mStatus = Status.RUNNING;
</span><span class='line'>
</span><span class='line'>        onPreExecute(); //后台任务开始前执行
</span><span class='line'>
</span><span class='line'>        mWorker.mParams = params;
</span><span class='line'>        exec.execute(mFuture);
</span><span class='line'>
</span><span class='line'>        return this;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>     mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
</span><span class='line'>            public Result call() throws Exception {
</span><span class='line'>                mTaskInvoked.set(true);
</span><span class='line'>
</span><span class='line'>                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
</span><span class='line'>                //noinspection unchecked
</span><span class='line'>                Result result = doInBackground(mParams);   //这里开始执行后台任务！！！
</span><span class='line'>                Binder.flushPendingCommands();
</span><span class='line'>                return postResult(result);
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        mFuture = new FutureTask&lt;Result&gt;(mWorker) {
</span><span class='line'>            @Override
</span><span class='line'>            protected void done() {
</span><span class='line'>                try {
</span><span class='line'>                    postResultIfNotInvoked(get());    //后台任务执行完毕！！！
</span><span class='line'>                } catch (InterruptedException e) {
</span><span class='line'>                    android.util.Log.w(LOG_TAG, e);
</span><span class='line'>                } catch (ExecutionException e) {
</span><span class='line'>                    throw new RuntimeException("An error occurred while executing doInBackground()",
</span><span class='line'>                            e.getCause());
</span><span class='line'>                } catch (CancellationException e) {
</span><span class='line'>                    postResultIfNotInvoked(null);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>    
</span></code></pre></td></tr></table></div></figure>


<p>后台任务执行完毕时，也是通过handler发消息，然后判断是不是取消状态来调用相应的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> mFuture = new FutureTask&lt;Result&gt;(mWorker) {
</span><span class='line'>            @Override
</span><span class='line'>            protected void done() {
</span><span class='line'>                try {
</span><span class='line'>                    postResultIfNotInvoked(get());   //后台任务执行完毕！！！
</span><span class='line'>                } catch (InterruptedException e) {
</span><span class='line'>                    android.util.Log.w(LOG_TAG, e);
</span><span class='line'>                } catch (ExecutionException e) {
</span><span class='line'>                    throw new RuntimeException("An error occurred while executing doInBackground()",
</span><span class='line'>                            e.getCause());
</span><span class='line'>                } catch (CancellationException e) {
</span><span class='line'>                    postResultIfNotInvoked(null);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>        
</span><span class='line'>   private void postResultIfNotInvoked(Result result) {
</span><span class='line'>        final boolean wasTaskInvoked = mTaskInvoked.get();
</span><span class='line'>        if (!wasTaskInvoked) {
</span><span class='line'>            postResult(result);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>   private Result postResult(Result result) {
</span><span class='line'>        @SuppressWarnings("unchecked")
</span><span class='line'>        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,
</span><span class='line'>                new AsyncTaskResult&lt;Result&gt;(this, result));
</span><span class='line'>        message.sendToTarget();
</span><span class='line'>        return result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'> private void finish(Result result) {
</span><span class='line'>        if (isCancelled()) {
</span><span class='line'>            onCancelled(result);
</span><span class='line'>        } else {
</span><span class='line'>            onPostExecute(result);
</span><span class='line'>        }
</span><span class='line'>        mStatus = Status.FINISHED;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>从下面的代码可以看出，ThreadPoolExecutor是类变量，所以不管创建多少个AsyncTask子类的对象，他们都共用一个线程池。默认线程池可维护的线程数和最大数量，与可用的CUP处理器个数有关。线程池中超过corePoolSize数目的空闲线程最大存活时间1，单位SECONDS。如果线程池的线程数量小于CORE_POOL_SIZE，这个时候新添加一个异步任务则会新建一个线程；如果线程池的数量大于等于CORE_POOL_SIZE，这个时候新建一个异步任务这个任务会被放入缓存队列中等待执行。缓存队列大小为128，并且SerialExecutor是异步顺序执行任务的。</p>

<pre><code>private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
private static final int CORE_POOL_SIZE = CPU_COUNT + 1;
private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;
private static final int KEEP_ALIVE = 1;

private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128);

public static final Executor THREAD_POOL_EXECUTOR
        = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,
                TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);


private static class SerialExecutor implements Executor {
    final ArrayDeque&lt;Runnable&gt; mTasks = new ArrayDeque&lt;Runnable&gt;();
    Runnable mActive;

    public synchronized void execute(final Runnable r) {
        mTasks.offer(new Runnable() {
            public void run() {
                try {
                    r.run();
                } finally {
                    scheduleNext();
                }
            }
        });
        if (mActive == null) {
            scheduleNext();
        }
    }

    protected synchronized void scheduleNext() {
        if ((mActive = mTasks.poll()) != null) {
            THREAD_POOL_EXECUTOR.execute(mActive);
        }
    }
}
</code></pre>

<h4>问题</h4>

<p>AsyncTask处理任务的时候，一般都是习惯在onPreExecute显示进度条，在数据处理完成之后的onPostExecute关闭进度条。但是当横竖屏切换或者内存重启导致Activity重新启动时，假设你还在onPostExecute写了一些其他逻辑，这个时候的AsyncTask已经与之前的Activity没有关联了，会导致onPostExecute无效问题。</p>

<p>解决办法是在onPostExecute方法里用EventBus,Otto类库或者自己写通知，把结果发送给Activity去处理！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>    protected void onPostExecute(String result) {
</span><span class='line'>        EventBus.getDefault().post(new AsyncTaskResultEvent(result));
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h4>个人看法</h4>

<p>觉得Android很喜欢造这种中型轮子啊！好像没什么必要再造个AsyncTask这样的轮子放在SDK里啊? 像AsyncTask这种任务不应该是开发者去完成的吗？还有比如NavigationView，真的有必要吗？这不是应该让开发者来自定义的View吗？反正我不是很理解，这可能也是Android为什么如此碎片化的原因之一吧！&mdash;- 喜欢造中型轮子！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反编译Android的APK]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/02/apk-decode/"/>
    <updated>2016-09-02T09:55:10+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/02/apk-decode</id>
    <content type="html"><![CDATA[<p>本人用的环境是Mac 10.11.5, 需要用到的工具有：<a href="https://ibotpeaches.github.io/Apktool/">apktool</a>, <a href="https://sourceforge.net/projects/dex2jar/">dex2jar</a>, <a href="http://jd.benow.ca/">JD-GUI</a>。</p>

<p>下面用淘宝2.2.1版本和微信2.3版本为例子来反编译。为什么用这么老的版本？因为可能老版本没有做代码混淆，反编译后会更好看一点。可以用<a href="http://www.anzhi.com/">安智市场</a>来下载历史版本，推荐用安智市场的手机APP来下载，会看到所有的历史版本，而电脑网站只能看到最近的几个历史版本。
<img src="http://andyfightting.github.io/myimg/android/az_taobao.png" alt="image" /></p>

<h4>1.apktool</h4>

<p>需要至少Java 7环境，通过<code>java -version</code>查看
<img src="http://andyfightting.github.io/myimg/android/javaVersion.png" alt="image" /></p>

<p>配置apktool
<img src="http://andyfightting.github.io/myimg/android/apktool.png" alt="image" /></p>

<p>输入apktool如下所示就成功了
<img src="http://andyfightting.github.io/myimg/android/apktool_result.png" alt="imag" /></p>

<p>用apktool工具处理后就可以查看xml文件了。在桌面建一个文件夹test, 把apk文件放进去，进入该文件夹，然后执行<code>apktool d apk名称.apk</code>。就会在test文件夹里出现一个<code>apk名称</code>的文件夹。里面的资源文件和xml文件就可以打开查看了。
<img src="http://andyfightting.github.io/myimg/android/apktool1.png" alt="imag" />
<img src="http://andyfightting.github.io/myimg/android/apktool2.png" alt="imag" />
<img src="http://andyfightting.github.io/myimg/android/apktool3.png" alt="imag" /></p>

<h4>2.dex2jar</h4>

<p>dex2jar工具可以吧dex或者apk文件转成jar文件。dex2jar下载好后进入文件夹，执行<code>chmod a+x *.sh</code>命令启用.sh文件。</p>

<h6>方式一</h6>

<p>把apk文件的后缀名改为zip，然后解压得到classes.dex文件，把classes.dex文件放到dex2jar文件夹中，进入该文件夹，执行<code>sh d2j-dex2jar.sh classes.dex</code>命令，就会得到对应的jar文件。</p>

<h6>方式二</h6>

<p>直接把apk文件放入dex2jar文件夹中，执行<code>sh d2j-dex2jar.sh apk名称.apk</code>也会得到对应的jar文件。</p>

<h4>3.JD-GUI</h4>

<p>把JD-GUI下载下来，打开上面生成的jar文件就可查看了。
<img src="http://andyfightting.github.io/myimg/android/taobao211.png" alt="image" /></p>

<p>下面是微信2.3处理后的结果
<img src="http://andyfightting.github.io/myimg/android/wx1.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/android/wx2.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/android/wx3.png" alt="image" />
剩下的就看细心、耐心、和好奇心了&hellip;下面说说我是怎么查看QQ2.0的。</p>

<h3>我的查看流程</h3>

<p>找一个页面的特殊字符，如下面的"我的个人资料"
<img src="http://andyfightting.github.io/myimg/android/find00.jpg" alt="image" /></p>

<p>然后Finder搜索，找到strings.xml文件，在里面找到"我的个人资料"对应的key &ndash; &ldquo;info_info"。
<img src="http://andyfightting.github.io/myimg/android/find0.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/android/find1.png" alt="image" /></p>

<p>然后搜"info_info"，找到对应的布局文件"info_self.xml"
<img src="http://andyfightting.github.io/myimg/android/find2.png" alt="image" /></p>

<p>然后通过"info_self"布局文件名搜索，找到对应的smali文件
<img src="http://andyfightting.github.io/myimg/android/find3.png" alt="image" /></p>

<p>然后通过smali文件名"InfoActivity"在JD-GUI的Search功能搜索，不是Find!找到对应的Activity，这样想看的东西应该都能找到了。
<img src="http://andyfightting.github.io/myimg/android/find4.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的Fragment]]></title>
    <link href="http://andyfightting.github.io/blog/2016/09/01/fragment/"/>
    <updated>2016-09-01T11:38:27+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/09/01/fragment</id>
    <content type="html"><![CDATA[<p>在 Android 3.0（API 11 级）中引入了Fragment，主要是为了给大屏幕上更加动态和灵活的 UI 设计提供支持。由于平板电脑的屏幕比手机屏幕大得多，因此可用于组合和交换 UI 组件的空间更大。利用Fragment实现此类设计时，无需管理对视图层次结构的复杂更改。它具有自己的生命周期，能接收自己的输入事件，并且可以在 Activity 运行时添加或删除Fragment，有点像可以在不同 Activity 中重复使用的"子 Activity"。 通过将 Activity 布局分成Fragment，可以在运行时修改 Activity 的外观，并在由 Activity 管理的返回栈中保留这些更改。Fragment必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。当 Activity 暂停时，其中的所有Fragment也会暂停；当 Activity 被销毁时，所有Fragment也会被销毁。</p>

<p>下面是Android官网上的<a href="https://developer.android.com/guide/components/activities.html">Activity</a>和<a href="https://developer.android.com/guide/components/fragments.html">Fragment</a>的生命周期图。</p>

<p><img src="http://andyfightting.github.io/myimg/android/activity_lifecycle.png" alt="imga" /> <img src="http://andyfightting.github.io/myimg/android/fragment_lifecycle.png" alt="imga" /></p>

<p>下面是网友整理的详细的<a href="https://github.com/xxv/android-lifecycle">周期图比较</a>。</p>

<p><img src="http://andyfightting.github.io/myimg/android/fragment.png" alt="image" /></p>

<h4>用Fragment可能会遇到的问题</h4>

<h5>getActivity()空指针</h5>

<p>可能遇到过getActivity()返回null，或者平时运行完好的代码，在“内存重启”之后，调用getActivity()的地方却返回null，报了空指针异常。大多数情况下的原因：在调用了getActivity()时，当前的Fragment已经onDetach()了宿主Activity。比如在pop了Fragment之后，该Fragment的异步任务仍然在执行，并且在执行完成后调用了getActivity()方法，这样就会空指针。</p>

<p>可以在Fragment基类里设置一个Activity mActivity的全局变量，在onAttach(Activity activity)里赋值，使用mActivity代替getActivity()，保证Fragment即使在onDetach后，仍持有Activity的引用。</p>

<h5>Fragment重叠问题</h5>

<p>如果add()了几个Fragment，然后使用show()、hide()方法控制，比如微信、QQ的底部tab等情景。如果你什么都不做的话，在“内存重启”后回，Tab的这几个Fragment界面会重叠。(手机横竖屏切换就可以模拟“内存重启”)。原因是FragmentManager帮我们管理Fragment，当发生“内存重启”，他会从栈底向栈顶的顺序恢复Fragment，但是因为没有保存Fragment的hidden属性，默认为false，所以所有Fragment都是以show的形式恢复，界面就重叠了。</p>

<h5>解决方法一</h5>

<p>不用add()的方式处理tab的Fragment，直接在Activity的布局文件中添加需要的Fragment,然后在Activity中通过getFragmentManager().findFragmentById()的方式得到Fragment，然后处理对应的hide,show。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;fragment
</span><span class='line'>    android:id="@+id/fragment0"
</span><span class='line'>    android:name="com.suguiming.myandroid.tab0.Fragment0"
</span><span class='line'>    android:layout_above="@+id/tab_line"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    tools:layout="@layout/fragment_container"/&gt;
</span><span class='line'>&lt;fragment
</span><span class='line'>    android:id="@+id/fragment1"
</span><span class='line'>    android:name="com.suguiming.myandroid.tab1.Fragment1"
</span><span class='line'>    android:layout_above="@+id/tab_line"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>    tools:layout="@layout/fragment_container"/&gt;</span></code></pre></td></tr></table></div></figure>


<h5>解决方法二</h5>

<p>在用add()或者replace()时为Fragment绑定一个tag，一般用fragment的类名作为tag，然后在发生“内存重启”时，即savedInstanceState!=null 时，通过getFragmentManager().findFragmentByTag()找到对应的Fragment，然后hide、show 对应的Fragment。</p>

<pre><code>protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity);

TargetFragment targetFragment;
HideFragment hideFragment;

if (savedInstanceState != null) {  // “内存重启”时调用
    targetFragment = getSupportFragmentManager().findFragmentByTag(TargetFragment.class.getName);
    hideFragment = getSupportFragmentManager().findFragmentByTag(HideFragment.class.getName);
    // 解决重叠问题
    getFragmentManager().beginTransaction()
            .show(targetFragment)
            .hide(hideFragment)
            .commit();
}else{  // 正常时
    targetFragment = TargetFragment.newInstance();
    hideFragment = HideFragment.newInstance();

    getFragmentManager().beginTransaction()
            .add(R.id.container, targetFragment, targetFragment.getClass().getName())
            .add(R.id,container,hideFragment,hideFragment.getClass().getName())
            .hide(hideFragment)
            .commit();
}
}
</code></pre>

<h5>解决方法三</h5>

<p>由于造成重叠的原因是因为Fragment不会保存hide的状态，那我们可以在BaseFragment中手动保存然后处理啊！</p>

<pre><code>private static final String FRAGMENT_IS_HIDDEN = "FRAGMENT_IS_HIDDEN";

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    //解决重叠问题
    if (savedInstanceState != null) {
        boolean isHidden = savedInstanceState.getBoolean(FRAGMENT_IS_HIDDEN);
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        if (isHidden) {
            ft.hide(this);
        } else {
            ft.show(this);
        }
        ft.commit();
    }
}

@Override
public void onSaveInstanceState(Bundle outState) {
    super.onSaveInstanceState(outState);
    outState.putBoolean(FRAGMENT_IS_HIDDEN, isHidden());//保持fragment是否隐藏的状态
}
</code></pre>

<p>在使用时还是要注意判断savedInstanceState是否为null，只有在为空时才add()。在不为空时就可以不用处理了，交由BaseFragment处理了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android手势滑动返回]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/31/android-swipe/"/>
    <updated>2016-08-31T15:16:10+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/31/android-swipe</id>
    <content type="html"><![CDATA[<p>偶然间发现了一个Android自带的抽屉控件<a href="https://developer.android.com/training/implementing-navigation/nav-drawer.html">DrawerLayout</a>,就觉得应该可以用他来封装成手势返回的基础控件。思路就是先设置Activity的跳转动画是从右到左，并且前一个Activity不能动。然后设置DrawerLayout的menu从右边出来，然设置menu全屏，这个menu就相当于子Activity View的容器，默认打开menu,然后设置DrawerLayout容器透明，当DrawerLayout close的时候finish它所在的Activity！还要把状态栏设置成透明，不然DrawerLayout closed 再 finish Activity的时候会有视觉差！复杂的手势控制就交由自带的DrawerLayout处理啦，生命周期还是Activity的生命周期。怎么样，是不是机智如我！！😆</p>

<p>遇到的问题：DrawerLayout的menu即时设置成match_parent也不能全屏！因为源码里设置了margin64dp! 那我们只好再设置回来：android:layout_marginLeft=&ldquo;-64dp"。</p>

<pre><code> private static final int MIN_DRAWER_MARGIN = 64; // dp
</code></pre>

<p>BaseSwipeActivity</p>

<pre><code>package com.suguiming.myandroid.base;
import android.os.Bundle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.suguiming.myandroid.R;

public class BaseSwipeActivity extends AppCompatActivity {

private DrawerLayout drawer;
private LinearLayout containerLayout;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
    setContentView(R.layout.activity_base_swipe);

    containerLayout = (LinearLayout) findViewById(R.id.container_layout);

    drawer = (DrawerLayout) findViewById(R.id.base_drawer_layout);
    drawer.openDrawer(GravityCompat.END);
    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, R.string.navigation_drawer_open, R.string.navigation_drawer_close) {
        @Override
        public void onDrawerClosed(View drawerView) {
            super.onDrawerClosed(drawerView);
            finish();
        }
    };
    drawer.setDrawerListener(toggle);
}

//子类不要用setContentView,用setMainView!!!!
public void setMainView(int viewId) {
    LayoutInflater inflater = LayoutInflater.from(this);
    View tmpView = inflater.inflate(viewId, null);

    if (tmpView instanceof LinearLayout) {
        LinearLayout.LayoutParams linearLayoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(linearLayoutParams);
    } else if (tmpView instanceof RelativeLayout) {
        RelativeLayout.LayoutParams relativeLayoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        tmpView.setLayoutParams(relativeLayoutParams);
    }
    containerLayout.removeAllViews();
    containerLayout.addView(tmpView);
}

}
</code></pre>

<p>对应的布局文件</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:background="@android:color/transparent"
    tools:context="com.suguiming.myandroid.base.BaseSwipeActivity"&gt;

&lt;android.support.v4.widget.DrawerLayout
    android:id="@+id/base_drawer_layout"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@android:color/transparent"
    tools:openDrawer="end"&gt;
    &lt;LinearLayout
        android:orientation="vertical"
        android:background="@color/clear"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;
    &lt;/LinearLayout&gt;

    &lt;!---64dp是源码menu的margin,这里设置为65,不然会有一条黑线--&gt;
    &lt;LinearLayout
        android:id="@+id/container_layout"
        android:orientation="vertical"
        android:layout_gravity="end"
        android:layout_marginLeft="-65dp"
        android:background="@color/light_gray"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;
    &lt;/LinearLayout&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>push 的动画 style</p>

<pre><code>&lt;!--手势返回theme--&gt;
&lt;style name="BackSwipeTheme" parent="Theme.AppCompat.Light.NoActionBar"&gt;
    &lt;item name="android:windowIsTranslucent"&gt;true&lt;/item&gt;
    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;
    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;
    &lt;item name="android:backgroundDimEnabled"&gt;false&lt;/item&gt;
    &lt;item name="android:windowAnimationStyle"&gt;@style/ActivitySwipeBackAnimation&lt;/item&gt;
&lt;/style&gt;
&lt;style name="ActivitySwipeBackAnimation" parent="@android:style/Animation.Activity"&gt;
    &lt;item name="android:activityOpenEnterAnimation"&gt;@anim/activity_swipe_in&lt;/item&gt;
    &lt;item name="android:activityOpenExitAnimation"&gt;@anim/activity_swipe_out&lt;/item&gt;
    &lt;item name="android:activityCloseEnterAnimation"&gt;@anim/activity_swipe_in&lt;/item&gt;
    &lt;item name="android:activityCloseExitAnimation"&gt;@anim/activity_swipe_out&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>使用的话就是让Activity继承BaseSwipeActivity，然后设置Activity的Theme为BackSwipeTheme。</p>

<pre><code>public class ActivitySwipeBack extends BaseSwipeActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    //要用setMainView，不要用setContentView
    setMainView(R.layout.activity_activity_swipe_back);
  }
}

&lt;activity android:name=".tab0.ActivitySwipeBack"
            android:theme="@style/BackSwipeTheme"/&gt;
</code></pre>

<p>完整Demo请查看<a href="https://github.com/AndyFightting/MyAndroid">MyAndroid</a>中的"手势滑动返回"。</p>

<p><img src="http://andyfightting.github.io/myimg/android/android_swipe.png" alt="imge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift阅读笔记]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/swift-read/"/>
    <updated>2016-08-04T16:23:05+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/swift-read</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let 声明常量，var 声明变量，会自动进行类型推断(小数推断为Double),一行末尾可不加分号(;)。
</span><span class='line'>值永远不会被隐式转换为其他类型，务必显示强制转换。
</span><span class='line'>if语句的条件不能默认非0为真。 类型后加?号表示可选值，要么有值，要么是nil。
</span><span class='line'>用 if let(或者var) name = optionName 来获取可选值处理。 
</span><span class='line'>switch的case中自带break，switch要保证全部遍历，否则必须要有default选项。
</span><span class='line'>0&lt; x &lt;4 等价 0..&lt;4 , 0&lt; x &lt;=4 等价 0...4 。 
</span><span class='line'>用 func 声明函数，用-&gt;指定返回类型func greet(name: String, day: String) -&gt; String { ... }。 
</span><span class='line'>元组概念，一般用做函数返回值。 
</span><span class='line'>func sumOf(numbers: Int...) -&gt; Int {}，...表示可变个数的参数。 
</span><span class='line'>函数是一等类型，像int float一样，可用作参数或者返回值。 
</span><span class='line'>class 声明类,属性都要赋值，要么在声明直接写死，要么在init方法中赋值。 
</span><span class='line'>重写父类方法必须用 override 标记。 属性可以有get set willGet didSet 等方法。 
</span><span class='line'>mutating关键字用来标记一个会修改结构体(属性)的方法。 
</span><span class='line'>extension来为现有的类型添加功能，比如新的方法和计算属性。
</span><span class='line'>泛型(指定类型)就是java中的泛型。 Bool值是true或false。 
</span><span class='line'>typealies name = 类型 给类型起个别名。 
</span><span class='line'>OC中的nil只用在对象上(int不行)，Swift中nil可指任何东西(对象或int)。
</span><span class='line'>使用!来获取一个不存在的可选值会导致错误。隐式解析可选类型(类型!)就是可选类型，但是可以当做非可选类型来使用(不用!解析,没值时会报错)。 
</span><span class='line'>throws do try catch 的使用。Swift的赋值操作不返回任何值。% 浮点数也可以取余运算。 
</span><span class='line'>空合运算符(a ?? b)对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b(b和a要类型相同)。逻辑 &&，|| 都是短路计算的。
</span><span class='line'>条件中的下划线 _ 来忽略对值的访问，case 中的下划线 _ 表示所有可能的值,case中可进行值绑定，case条件可用where语句。 
</span><span class='line'>字典的遍历顺序和插入顺序可能不同(字典无序的)。 
</span><span class='line'>Swift语言的repeat-while循环合其他语言中的do-while循环是类似的。
</span><span class='line'>注意循环中switch中的continue(开始下次)和break(跳到switch}后面继续执行)的差别，switch中的fallthrouth进入下一个case时不会再进行条件判断。
</span><span class='line'>guard(守卫)语句总是有一个else分句。 
</span><span class='line'>调用函数时第一个参数名不要，之后的参数名要，用逗号分开(第一个参数省略其外部参数名，第二个以后的参数使用其本地参数名作为自己的外部参数名。
</span><span class='line'>所有参数需要有不同的本地参数名，但可以共享相同的外部参数名。如果你提供了外部参数名，那么函数在被调用时，必须使用外部参数名。如果你不想为第二个及后续的参数设置参数名，用下划线_代替)。
</span><span class='line'>一个函数最多只能有一个可变参数(...),如果函数同时有默认参数和可变参数要把可变参数放最后。 
</span><span class='line'>函数参数默认是常量，修改会报错，但可以用var声明为变量,修改只在函数体内有效。 
</span><span class='line'>inout参数(只能传入变量)会替换原来的值，使用时在变量名前加&符号。 
</span><span class='line'>原数组不会被sort()方法修改。 闭包就是用{}包起来的函数代码块，用in分开返回值和处理代码，参数不能有默认值。如果需要将闭包作为最后一个参数，可变成尾随闭包。
</span><span class='line'>Array的map方法可返回不同类型。 函数和闭包都是引用类型。
</span><span class='line'>结构体和枚举是值类型，所有的基本类型都是值类型，并且都是以结构体的形式在后台所实现。
</span><span class='line'>类是引用类型。常量实例依然可改变其中的变量属性值。
</span><span class='line'>swift指针并不直接指向内存中的某个地址，而且也不要求你使用星号（*）来表明你在创建一个引用。
</span><span class='line'>结构体实例总是通过值传递，类实例总是通过引用传递。
</span><span class='line'>Swift 中字符串（String）,数组（Array）和字典（Dictionary）均以结构体的形式实现的值类型,而在OC中是以类的形式实现的引用类型。
</span><span class='line'>计算属性可以用于类、结构体和枚举，存储属性只能用于类和结构体。
</span><span class='line'>如果创建了一个结构体的实例并将其赋值给一个常量，则无法修改该实例的任何属性，即使定义了变量存储属性，由于结构体（struct）属于值类型，当值类型的实例被声明为常量的时候，它的所有属性也就成了常量。
</span><span class='line'>必须将延迟存储属性声明成变量（使用var关键字），因为属性的初始值可能在实例构造完成之后才会得到。
</span><span class='line'>而常量属性在构造过程完成之前必须要有初始值，因此无法声明成延迟属性。
</span><span class='line'>计算属性不直接存储值，而是提供一个 get和一个可选的set，来间接获取和设置其他属性或变量的值。
</span><span class='line'>必须使用var关键字定义计算属性，包括只读计算属性，因为它们的值不是固定的。
</span><span class='line'>父类的属性在子类的构造器中被赋值时，它在父类中的willSet和didSet观察器会被调用。
</span><span class='line'>全局的常量或变量都是延迟计算的，跟延迟存储属性相似，不同的地方在于，全局的常量或变量不需要标记lazy特性。局部范围的常量或变量不会延迟计算。
</span><span class='line'>必须给存储类型的类属性指定默认值，因为类型本身无法在初始化过程中使用构造器给类型属性赋值。
</span><span class='line'>结构体和枚举能够定义方法是 Swift 与 C/Objective-C 的主要区别之一。</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的动画]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/animation/"/>
    <updated>2016-08-04T16:22:41+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/animation</id>
    <content type="html"><![CDATA[<p>动画是作用的UIView的CALayer上的，UIView是CALayer的代理，给CALayer提供数据参数，CALayer负责渲染和动画。UIView是在UIKit框架中，而CALayer是在QuartzCore框架中。UIView可以响应用户事件，而CALayer不可以响应用户事件。CALayer也可以像UIView一样添加子Layer。
<img src="http://andyfightting.github.io/myimg/ios/calayer.png" alt="image" /></p>

<h4>CALayer常用属性</h4>

<pre><code>anchorPoint 和中心点position重合的一个点，称为“锚点”，锚点的描述是相对于x、y位置比例而言的默认在图像中心点(0.5,0.5)的位置
backgroundColor 图层背景颜色  
borderColor 边框颜色    
borderWidth 边框宽度    
bounds  图层大小    
contents    图层显示内容，例如可以将图片作为图层内容显示
contentsRect    图层显示内容的大小和位置    
cornerRadius    圆角半径    
doubleSided 图层背面是否显示，默认为YES 
frame   图层大小和位置，不支持隐式动画，所以CALayer中很少使用frame，通常使用bounds和position代替
hidden  是否隐藏    
mask    图层蒙版    
maskToBounds    子图层是否剪切图层边界，默认为NO 
opacity 透明度 ，类似于UIView的alpha    
position    图层中心点位置，类似于UIView的center
shadowColor 阴影颜色    
shadowOffset    阴影偏移量 
shadowOpacity   阴影透明度，注意默认为0，如果设置阴影必须设置此属性
shadowPath  阴影的形状 
shadowRadius    阴影模糊半径  
sublayers   子图层   
sublayerTransform   子图层形变 
transform   图层形变
</code></pre>

<p>要注意position和anchorPoint的区别：<strong>position是layer中的anchorPoint点在superLayer中的位置坐标！position点是相对suerLayer的，anchorPoint点是相对自身layer的！</strong> 所以说position不变，但anchorPoint改变的话，也会改变layer在superLayer中的位置！</p>

<pre><code>layer=[[CALayer alloc]init];
layer.backgroundColor=[UIColor purpleColor].CGColor;
layer.bounds=CGRectMake(0, 0, 100,100);
layer.shadowColor=[UIColor redColor].CGColor;
layer.shadowOffset=CGSizeMake(5, 5);
layer.shadowOpacity=0.7;
layer.borderColor=[UIColor yellowColor].CGColor;
layer.borderWidth=3;
layer.position=CGPointMake(size.width/2, size.height/2);
[self.view.layer addSublayer:layer];

//layer.anchorPoint=CGPointMake(0, 0); //图一
//layer.anchorPoint=CGPointMake(0, 1); //图二
</code></pre>

<p>图中position一样，但anchorPoint不一样，所以图片位置也不一样。  <br/>
<img src="http://andyfightting.github.io/myimg/ios/layer_position.png" alt="image" />
注意如果要设置圆角，对于图层本身而言可以正常显示，但是对于图层中绘制的图片无法正确显示。如果想要图片正确显示则必须设置masksToBounds=YES，剪切子图层。但设置layer.masksToBounds=YES后，图层的影效果无法和masksToBounds=YES同时使用，因为masksToBounds的目的就是剪切外边框。如果同时要阴影又要圆角的话，就用两个重叠的图层,底部负责绘制阴影，上层负责绘制圆角。</p>

<h4>Core Animation</h4>

<p>iOS的核心动画Core Animation包含在Quartz Core框架中。核心动画分为几类：基础动画、关键帧动画、动画组、转场动画,各个类的关系大致如下：
<img src="http://andyfightting.github.io/myimg/ios/core_animation.png" alt="image" />
*CAAnimation：核心动画的基础类，不能直接使用，负责动画运行时间、速度的控制，本身实现了CAMediaTiming协议。</p>

<p>*CAPropertyAnimation：属性动画的基类，通过属性进行动画设置，不能直接使用。</p>

<p>*CAAnimationGroup：动画组合模式，可以通过动画组来进行所有动画行为的统一控制，组中所有动画效果可以并发执行。</p>

<p>*CATransition：转场动画，主要通过滤镜进行动画效果设置。</p>

<p>*CABasicAnimation：基础动画，通过属性修改进行动画参数控制，只有初始状态和结束状态。</p>

<p>*CAKeyframeAnimation：关键帧动画，同样是通过属性进行动画参数控制，但是同基础动画不同的是它可以有多个状态控制。</p>

<p>基础动画、关键帧动画都属于属性动画，就是通过修改属性值产生动画效果，只需要设置初始值和结束值，中间的过程动画由系统自动计算产生。和基础动画不同的是关键帧动画可以设置多个属性值，每两个属性中间的过渡动画由系统自动完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的Core Data]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/core-data/"/>
    <updated>2016-08-04T16:22:22+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/core-data</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/watchos/documentation/Cocoa/Conceptual/CoreData/index.html">Core Data</a>是一个对sqlite数据库进行封装的ORM(Object Relation Mapping)框架。它主要由以下几部分组成：</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObject_Class/">NSManagedObject</a></h4>

<p>NSManagedObject is a generic class that implements all the basic behavior required of a Core Data model object. It is not possible to use instances of direct subclasses of NSObject (or any other class not inheriting from NSManagedObject) with a managed object context. You may create custom subclasses of NSManagedObject, although this is not always required. If no custom logic is needed, a complete object graph can be formed with NSManagedObject instances.</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectModel_Class/">NSManagedObjectModel</a></h4>

<p>An NSManagedObjectModel object describes a schema, a collection of entities (data models) that you use in your application.</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectContext_Class/">NSManagedObjectContext</a></h4>

<p>An instance of NSManagedObjectContext represents a single “object space” or scratch pad in an application. Its primary responsibility is to manage a collection of managed objects. These objects form a group of related model objects that represent an internally consistent view of one or more persistent stores. A single managed object instance exists in one and only one context, but multiple copies of an object can exist in different contexts. Thus object uniquing is scoped to a particular context.</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSPersistentStoreCoordinator_Class/">NSPersistentStoreCoordinator</a></h4>

<p>Instances of NSPersistentStoreCoordinator associate persistent stores (by type) with a model (or more accurately, a configuration of a model) and serve to mediate between the persistent store or stores and the managed object context or contexts. Instances of NSManagedObjectContext use a coordinator to save object graphs to persistent storage and to retrieve model information. A context without a coordinator is not fully functional as it cannot access a model except through a coordinator. The coordinator is designed to present a façade to the managed object contexts such that a group of persistent stores appears as an aggregate store. A managed object context can then create an object graph based on the union of all the data stores the coordinator covers.</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSFetchRequest_Class/index.html#//apple_ref/occ/cl/NSFetchRequest">NSFetchRequest</a></h4>

<p>An instance of NSFetchRequest describes search criteria used to retrieve data from a persistent store.</p>

<h4><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/">NSPredicate</a></h4>

<p>The NSPredicate class is used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.</p>

<p><img src="http://andyfightting.github.io/myimg/ios/cd_orm.png" alt="image" />
<img src="http://andyfightting.github.io/myimg/ios/cd_table.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的NSURLSession]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/session/"/>
    <updated>2016-08-04T16:22:02+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/session</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的block]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/04/block/"/>
    <updated>2016-08-04T16:21:41+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/04/block</id>
    <content type="html"><![CDATA[<p>block就是一个代码块，闭包，会捕获上下文的匿名函数，它可以作为参数或者返回值进行传递。在objc中，根据对象的定义，凡是首地址是*isa的结构体指针，都可以认为是对象(id)，所以block实际上就算是对象，但它的内存管理又和NSObject有点不一样。</p>

<h4>声明:</h4>

<pre><code>*变量：returnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};

*属性：@property (nonatomic, copy) returnType (^blockName)(parameterTypes);

*方法：-(void)someMethod:(returnType (^nullability)(parameterTypes))blockName;

*回调：[object  method:^returnType (parameters) {...}];

*定义：typedef returnType (^TypeName)(parameterTypes); --&gt; TypeName blockName = ^returnType(parameters) {...};
</code></pre>

<p>block中的isa指向的是该block的Class,主要有三种类型：</p>

<pre><code>_NSConcreteGlobalBlock 全局的静态 block，不会访问任何外部变量。
_NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。
_NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。
</code></pre>

<p>当block第一次被创建时，它是存在于该函数的栈上的，其Class是固定的NSConcreteStackBlock。其捕获的变量是会赋值到结构体的成员上，所以当block初始化完成后，捕获到的变量不能更改。当函数返回时，函数的栈被销毁，这个block的内存也会被清除。所以在函数结束后仍然需要这个block时，就必须用Block_copy()方法将它拷贝到堆上，类型变为NSConcreteMallocBlock，向它发送retain，增加block的引用计数。</p>

<p>默认block捕获到的局部变量，都是赋值给block的结构体的，相当于const不可改。为了让block能访问并修改外面的局部变量，需要加上__block修饰词。</p>

<pre><code>void test(){
 __block int i = 3;
  void(^myBlock)(void) = ^{
     i = 5;//局部变量没有__block修饰的话不可修改
  };
 myBlock();
}
</code></pre>

<h4>捕获规则：</h4>

<pre><code>1.静态存储区的变量,例如全局变量、方法中的static变量:
  引用，可修改。

2.block接受的参数传值:
  可修改，和一般函数的参数相同。

3.栈变量(局部变量):
  常量，不可修改，block会对id类型的变量产生强引用。

4.栈变量(有__block前缀的局部变量):
  引用，可以修改。如果是id类型则不会被block retain、如果该类型是C类型变量，该值会被挪动到堆中。
</code></pre>

<p>在ARC中，block被赋值传递的时候会自动拷贝到堆上，堆上的对象就有可能被释放掉，所以要用copy强引用着,以免野指针crash。</p>

<h4>循环引用:</h4>

<p>当block被copy到堆之后，该block对它捕获的对象产生强引用，所以有时需要避免block copy后产生的循环引用。</p>

<p>如self引用了block，block又捕获了self，这样就会有循环引用,因此，需要用weak来声明self。</p>

<pre><code>- (void)test {
    ViewController * __weak weakSelf = self;
    self.block = ^{
        [weakSelf doSomething]; //用弱引用,打破循环引用
    }
}
</code></pre>

<p>如果捕获到的是对象的成员变量对象，也会间接造成对self的循环引用，同样也要避免。</p>

<pre><code>- (void)test {
    id tempPropertyObj = _propertyObj; //用临时变量,避免了循环引用
    self.block = ^{
        [tempPropertyObj doSomething];
    }
}
</code></pre>

<h4>问题</h4>

<pre><code>[UIView animateWithDuration:0.5 animations:^{
        [self doSomething];
    }];
</code></pre>

<p>上面例子并不会造成循环引用，因为block强引用了self,而self并没有强引用block。如果像下面就会循环引用：self &ndash;> _observer &ndash;> block &ndash;> self 这也是一个循环引用。</p>

<pre><code>//_observer 是self的实例变量
    _observer = [[NSNotificationCenter defaultCenter] addObserverForName:@"test"
                                                                  object:nil
                                                                   queue:[NSOperationQueue mainQueue]
                                                              usingBlock:^(NSNotification * _Nonnull note) {
                                                                  [self doSomething];
                                                              }];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的Runloop与Runtime]]></title>
    <link href="http://andyfightting.github.io/blog/2016/08/01/runtime/"/>
    <updated>2016-08-01T10:20:14+08:00</updated>
    <id>http://andyfightting.github.io/blog/2016/08/01/runtime</id>
    <content type="html"><![CDATA[<h3><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">Runloop</a></h3>

<p>Runloop与线程息息相关，它是线程的基础架构部分，每个线程都有自己的runloop对象，可以用[NSRunLoop currentRunLoop]来得到它。主线程中的runloop是启动运行状态，而自己创建的线程中的runloop默认是没有启动的，需要的话要手动去启动。Runloop是一个事件处理循环，用来不停的监听输入事件或者定时事件，并将其分配到对应的目标上进行处理。它可以使线程在有工作的时候工作，没有工作的时候休眠。</p>

<p>Runloop同时也负责autorelease pool的创建和释放，每当一个运行循环结束的时候，它都会释放autorelease pool，同时pool中的所有自动释放类型变量都会被释放掉。NSRunloop不是线程安全的，而CFRunLoopRef是线程安全的。RunLoop要指定在特定Mode下Run：</p>

<p>*NSDefaultRunLoopMode：处理大多数的操作，一般情况下用这个。</p>

<p>*NSRunLoopCommonModes：For Cocoa applications, this set includes the default, modal, and event tracking modes by default. Core Foundation includes just the default mode initially.</p>

<p>而且通过scheduleInRunLoop的方式启动的请求，虽然是在主线程中执行！但也会有异步的效果！SDWebImageDownloader 中的 NSURLConnection 就是这样启动请求的！！</p>

<pre><code>- (void)start{
    NSURLRequest *request = [[NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:15];
    self.connection = [[NSURLConnection alloc] initWithRequest:request delegate:self startImmediately:NO];
    [connection scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];
    [connection start];
    if (connection){
        self.imageData = [NSMutableData data];
    }else{
        if ([delegate respondsToSelector:@selector(imageDownloader:didFailWithError:)]){
            [delegate performSelector:@selector(imageDownloader:didFailWithError:) withObject:self withObject:nil];
        }
    }
}
</code></pre>

<p>NSURLConnection在代理方法中打印出的线程：
<img src="http://andyfightting.github.io/myimg/ios/sdrunloop.png" alt="iamge" /></p>

<p>runloop监听用户输入事件和定时事件
<img src="http://andyfightting.github.io/myimg/ios/runloop.png" alt="image" /><!--more--></p>

<h3><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Runtime</a></h3>

<p>Runtime是个很重要的概念，iOS之所以是动态语言就是因为它。它的核心是一个用C和编译语言写的Runtime库。它是Objective-C面向对象和动态机制的基石。静态语言是在编译的时候就已经绑定好了某个方法名会执行哪段函数地址。而动态语言不是在编译的时候就已经绑定好了，它是在具体要执行的某个方法的时候，才根据方法名去寻找具体执行的方法地址，所以可以在这时候动态的改变它的绑定。可以在<a href="https://opensource.apple.com/tarballs/objc4/">这里</a>下载源码查看。</p>

<p>&ldquo;计算机界，只要再加一层中间层，就没有解决不了的问题。如果有，那再加一层，直到它解决。"这句话不知道是在哪里看到的了&hellip;不过说的挺有道理的。而Runtime库正是Objective-C之所以为动态语言的中间层！</p>

<p>在Objective-C中，类、对象和方法都是一个C的结构体，从objc/objc.h头文件中，我们可以找到他们的定义：</p>

<pre><code>//---NSObject-----
@interface NSObject &lt;NSObject&gt; {
     Class isa 
}

//---Class-----
typedef struct objc_class *Class;

//---objc_class-----
struct objc_class {
    Class isa 
    Class super_class                                        
    const char *name                                         
    long version                                             
    long info                                                
    long instance_size //对象大小                                      
    struct objc_ivar_list *ivars //属性列表                             
    struct objc_method_list **methodLists //方法列表                   
    struct objc_cache *cache  //方法映射缓存                               
    struct objc_protocol_list *protocols   //代理列表                   
};

//---objc_method----
struct objc_method {  
    SEL method_name //方法名
    char *method_types //a string representing argument/return types
    IMP method_imp  //方法地址
};
</code></pre>

<p>Objective-C的函数调用在编译的时候会被翻译为 -objc_msgSend(执行的对象，方法名，参数&hellip;),先通过isa指针找到它的Class,然后在method list里找方法，没有的话就上superClass中找，一旦找到，就去执行，然后把方法名和对应的方法地址映射保存在objc_cache中，下次就直接从这缓存中取。如果都没找到，会在程序报unrecognized selector sent to&hellip;错误之前还有机会补救，就是动态的给它指定一个执行方法！</p>

<p>首先，Objective-C运行时会调用+resolveInstanceMethod:或者+resolveClassMethod:，让你有机会提供一个函数实现。如果你添加了函数并返回YES，那运行时系统就会重新启动一次消息发送的过程。下面用当我调用test方法的时候，没有test的实现方法，但把它动态绑定给了newTest方法去执行！</p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    [self performSelector:@selector(test) withObject:nil afterDelay:0];
}

void newTest(){
    NSLog(@"success !!");
}

+ (BOOL)resolveInstanceMethod:(SEL)aSEL{
    if(aSEL == @selector(test)){
        class_addMethod([self class], aSEL, (IMP)newTest, nil);
        return YES;
    }
    return [super resolveInstanceMethod:aSEL];
}
</code></pre>

<p>如果resolveInstanceMethod：方法返回NO话，就会转到-forwardingTargetForSelector:方法中去执行,让这个方法在其他对象中去执行！如下面把test方法传递给 viewController2 对象去执行，在 viewController2 对象中实现的 test 方法就会被调用！！</p>

<pre><code>+ (BOOL)resolveInstanceMethod:(SEL)aSEL{
    return NO;
}

- (id)forwardingTargetForSelector:(SEL)aSelector{
    if(aSelector == @selector(test)){
        return viewController2;//传递给viewController2对象去执行 test方法
    }
    return [super forwardingTargetForSelector:aSelector];
}
</code></pre>

<p>如果forwardingTargetForSelector：方法返回nil或者self的时候，就会进入- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector:方法中去执行，如果这方法返回了一个NSMethodSignature对象，这会进入-forwardInvocation:方法中，把消息传给对应的对象去执行！如下将会在viewController2中执行test方法！！</p>

<pre><code>+ (BOOL)resolveInstanceMethod:(SEL)aSEL{
    return NO;
}

- (id)forwardingTargetForSelector:(SEL)aSelector{
    return self;
}

- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector{
    NSMethodSignature* signature = [super methodSignatureForSelector:aSelector];
    if (signature==nil) {
        signature = [viewController2 methodSignatureForSelector:aSelector];
    }
    return signature;
}

- (void)forwardInvocation:(NSInvocation *)invocation{
    SEL sel = invocation.selector;
    if([viewController2 respondsToSelector:sel]) {
        [invocation invokeWithTarget:viewController2];
    }else {
        [self doesNotRecognizeSelector:sel];
    }
}
</code></pre>

<p>如果这三个过程下来都没绑定具体的执行方法，则会进入- (void)doesNotRecognizeSelector:(SEL)aSelector方法，然后程序奔溃!!</p>

<p><a href="http://nshipster.com/method-swizzling/">Method Swizzling</a>下面的例子中，当调用test1方法的时候，具体执行是跑到test2方法中的！！</p>

<pre><code>@implementation ViewController
+ (void)load {
static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    Class class = [self class];

    SEL originalSelector = @selector(test1);
    SEL swizzledSelector = @selector(test2);

    Method originalMethod = class_getInstanceMethod(class, originalSelector);
    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);

    BOOL didAddMethod =
    class_addMethod(class,
                    originalSelector,
                    method_getImplementation(swizzledMethod),
                    method_getTypeEncoding(swizzledMethod));

    if (didAddMethod) {
        class_replaceMethod(class,
                            swizzledSelector,
                            method_getImplementation(originalMethod),
                            method_getTypeEncoding(originalMethod));
    } else {
        method_exchangeImplementations(originalMethod, swizzledMethod);
    }
});
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self test1];
}
-(void)test1{
    NSLog(@"开始1");
}
-(void)test2{
    NSLog(@"开始2");
}
</code></pre>

<p>Swizzling应该总是在+load中执行,在Objective-C中，运行时会自动调用每个类的两个方法。+load会在类初始加载时调用，+initialize会在第一次调用类的类方法或实例方法之前被调用。</p>

<p>这两个方法是可选的，且只有在实现了它们时才会被调用。由于method swizzling会影响到类的全局状态，因此要尽量避免在并发处理中出现竞争的情况。+load能保证在类的初始化过程中被加载，并保证这种改变应用级别的行为的一致性。相比之下，+initialize在其执行时不提供这种保证—事实上，如果在应用中没为给这个类发送消息，则它可能永远不会被调用。</p>

<p>Swizzling应该总是在dispatch_once中执行, 因为swizzling会改变全局状态，所以我们需要它确保代码只被执行一次，不管有多少个线程，而GCD的dispatch_once可以确保这种行为。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的CoreText]]></title>
    <link href="http://andyfightting.github.io/blog/2015/12/26/core-text/"/>
    <updated>2015-12-26T15:16:23+08:00</updated>
    <id>http://andyfightting.github.io/blog/2015/12/26/core-text</id>
    <content type="html"><![CDATA[<p>CoreText进行图文混排的核心思想是把需要摆放图片的位置用空字符替换原来的字符，并且实现CTRunDelegate，用于动态设置空字符的高度和宽度（代表图片的大小），并且对这些空字符设置一个属性名来区别于其他CTRun，之后进行图片渲染的时候就能通过该属性来区分哪些空字符是代表图片的占位符，哪些是普通的空字符。使用CoreText处理点击事件的关键是判断点击的位置是本文内容中的第几个字符，然后通过判断该字符是否在需要处理点击事件的字符串范围内。</p>

<p><img src="http://andyfightting.github.io/myimg/ios/text2.png" alt="image" /><!--more-->
<img src="http://andyfightting.github.io/myimg/ios/coreText.png" alt="image" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>#import "CoreTextView.h"
</span><span class='line'>#import &lt;CoreText/CoreText.h&gt;
</span><span class='line'>
</span><span class='line'>@implementation CoreTextView{
</span><span class='line'>    CTFrameRef ctFrame;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (id)initWithFrame:(CGRect)frame
</span><span class='line'>{
</span><span class='line'>    self = [super initWithFrame:frame];
</span><span class='line'>    if (self) {
</span><span class='line'>        // Initialization code
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)drawRect:(CGRect)rect
</span><span class='line'>{
</span><span class='line'>    //得到当前用于绘制画布的上下文，用于后续将内容绘制在画布上
</span><span class='line'>    CGContextRef context = UIGraphicsGetCurrentContext();
</span><span class='line'>    
</span><span class='line'>    //翻转当前的坐标系, 因为对于底层绘制引擎来说，屏幕左下角为（0，0)
</span><span class='line'>    CGContextSetTextMatrix(context, CGAffineTransformIdentity);
</span><span class='line'>    CGContextTranslateCTM(context, 0, self.bounds.size.height);
</span><span class='line'>    CGContextScaleCTM(context, 1.0, -1.0);
</span><span class='line'>    
</span><span class='line'>    //要绘制的文字
</span><span class='line'>    NSMutableAttributedString* attributedString = [[NSMutableAttributedString alloc] initWithString:@"少年不识愁滋味，爱上层楼。爱上层楼。为赋新词强说愁。而今识尽愁滋味，欲说还休。欲说还休。却道天凉好个秋。"];
</span><span class='line'>    //为所有文本设置字体
</span><span class='line'>    [attributedString addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:10] range:NSMakeRange(0, [attributedString length])];
</span><span class='line'>    //设置某些字体更大
</span><span class='line'>    [attributedString addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:30] range:NSMakeRange(10, 10)];
</span><span class='line'>    //index 从0开始的2个字符 字体颜色 设置为蓝色
</span><span class='line'>    [attributedString addAttribute:NSForegroundColorAttributeName value:[UIColor blueColor] range:NSMakeRange(0, 2)];
</span><span class='line'>    //index 从2开始的3个字符 字体颜色 设置为红色
</span><span class='line'>    [attributedString addAttribute:NSForegroundColorAttributeName value:[UIColor redColor] range:NSMakeRange(2, 3)];
</span><span class='line'>    //设置行间距 50
</span><span class='line'>    CGFloat lineSpacing = 50;
</span><span class='line'>    CTParagraphStyleSetting theSettings[3] = {
</span><span class='line'>        {kCTParagraphStyleSpecifierLineSpacingAdjustment, sizeof(CGFloat), &lineSpacing},
</span><span class='line'>        {kCTParagraphStyleSpecifierMaximumLineSpacing, sizeof(CGFloat), &lineSpacing},
</span><span class='line'>        {kCTParagraphStyleSpecifierMinimumLineSpacing, sizeof(CGFloat), &lineSpacing}
</span><span class='line'>    };
</span><span class='line'>    CTParagraphStyleRef theParagraphRef = CTParagraphStyleCreate(theSettings, 3);
</span><span class='line'>    [attributedString addAttribute:(id)kCTParagraphStyleAttributeName value:(__bridge id)theParagraphRef range:NSMakeRange(0, attributedString.length)];
</span><span class='line'>    CFRelease(theParagraphRef);
</span><span class='line'>    
</span><span class='line'>    //要插入的图片
</span><span class='line'>    NSString *imageName = @"testImage.png";
</span><span class='line'>    
</span><span class='line'>    //为图片设置CTRunDelegate 计算留给图片的空间大小
</span><span class='line'>    CTRunDelegateCallbacks imageCallbacks;
</span><span class='line'>    imageCallbacks.version = kCTRunDelegateVersion1;
</span><span class='line'>    imageCallbacks.getAscent = GetAscentCallback;
</span><span class='line'>    imageCallbacks.getDescent = GetDescentCallback;
</span><span class='line'>    imageCallbacks.getWidth = GetWidthCallback;
</span><span class='line'>    
</span><span class='line'>    //设置图片位置，大小
</span><span class='line'>    CTRunDelegateRef runDelegate = CTRunDelegateCreate(&imageCallbacks, imageName);
</span><span class='line'>    NSMutableAttributedString *imageAttributedString = [[NSMutableAttributedString alloc] initWithString:@" "];//空格用于给图片留位置
</span><span class='line'>    [imageAttributedString addAttribute:(NSString *)kCTRunDelegateAttributeName value:(id)runDelegate range:NSMakeRange(0, 1)];//用代理设置图片
</span><span class='line'>    CFRelease(runDelegate);
</span><span class='line'>    
</span><span class='line'>    //把图片插入到字符串中
</span><span class='line'>    [imageAttributedString addAttribute:@"imageAttribute" value:imageName range:NSMakeRange(0, 1)];
</span><span class='line'>    [attributedString insertAttributedString:imageAttributedString atIndex:1];//图片插入位置，不能越界
</span><span class='line'>    [attributedString insertAttributedString:imageAttributedString atIndex:3];//图片插入位置，不能越界
</span><span class='line'>    [attributedString insertAttributedString:imageAttributedString atIndex:5];//图片插入位置，不能越界
</span><span class='line'>    
</span><span class='line'>    //根据attributedString生成CTFramesetterRef
</span><span class='line'>    CTFramesetterRef ctFramesetter = CTFramesetterCreateWithAttributedString((CFMutableAttributedStringRef)attributedString);
</span><span class='line'>    CGMutablePathRef path = CGPathCreateMutable();
</span><span class='line'>    CGRect bounds = CGRectMake(0.0, 0.0, self.bounds.size.width, self.bounds.size.height);
</span><span class='line'>    CGPathAddRect(path, NULL, bounds);
</span><span class='line'>    
</span><span class='line'>    //绘制文字
</span><span class='line'>    ctFrame = CTFramesetterCreateFrame(ctFramesetter,CFRangeMake(0, [attributedString length ]), path, NULL);
</span><span class='line'>    CTFrameDraw(ctFrame, context);
</span><span class='line'>    
</span><span class='line'>    //下面都是为了绘制图片
</span><span class='line'>    CFArrayRef lines = CTFrameGetLines(ctFrame);
</span><span class='line'>    CGPoint lineOrigins[CFArrayGetCount(lines)];
</span><span class='line'>    CTFrameGetLineOrigins(ctFrame, CFRangeMake(0, 0), lineOrigins);
</span><span class='line'>    
</span><span class='line'>    //遍历每个CTLine
</span><span class='line'>    for (int i = 0; i &lt; CFArrayGetCount(lines); i++) {
</span><span class='line'>        CTLineRef line = CFArrayGetValueAtIndex(lines, i);
</span><span class='line'>        CGFloat lineAscent;
</span><span class='line'>        CGFloat lineDescent;
</span><span class='line'>        CGFloat lineLeading;
</span><span class='line'>        CTLineGetTypographicBounds(line, &lineAscent, &lineDescent, &lineLeading);
</span><span class='line'>        
</span><span class='line'>        CFArrayRef runs = CTLineGetGlyphRuns(line);
</span><span class='line'>        for (int j = 0; j &lt; CFArrayGetCount(runs); j++) {
</span><span class='line'>            CGFloat runAscent;
</span><span class='line'>            CGFloat runDescent;
</span><span class='line'>            CGPoint lineOrigin = lineOrigins[i];
</span><span class='line'>            CTRunRef run = CFArrayGetValueAtIndex(runs, j);
</span><span class='line'>            NSDictionary* attributes = (NSDictionary*)CTRunGetAttributes(run);
</span><span class='line'>            
</span><span class='line'>            CGRect runRect;
</span><span class='line'>            runRect.size.width = CTRunGetTypographicBounds(run, CFRangeMake(0,0), &runAscent, &runDescent, NULL);
</span><span class='line'>            runRect=CGRectMake(lineOrigin.x + CTLineGetOffsetForStringIndex(line, CTRunGetStringRange(run).location, NULL), lineOrigin.y - runDescent, runRect.size.width, runAscent + runDescent);
</span><span class='line'>            
</span><span class='line'>            NSString *isImage = [attributes objectForKey:@"imageAttribute"];
</span><span class='line'>            //图片渲染逻辑
</span><span class='line'>            if (isImage) {
</span><span class='line'>                UIImage *image = [UIImage imageNamed:imageName];
</span><span class='line'>                if (image) {
</span><span class='line'>                    CGRect imageDrawRect;
</span><span class='line'>                    imageDrawRect.size = image.size;
</span><span class='line'>                    imageDrawRect.origin.x = runRect.origin.x + lineOrigin.x;
</span><span class='line'>                    imageDrawRect.origin.y = lineOrigin.y;
</span><span class='line'>                    CGContextDrawImage(context, imageDrawRect, image.CGImage);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    //释放资源
</span><span class='line'>    //    CFRelease(ctFrame); //因为点击要用ctFrame，所以放dealloc里释放
</span><span class='line'>    CFRelease(path);
</span><span class='line'>    CFRelease(ctFramesetter);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//接受触摸事件
</span><span class='line'>-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
</span><span class='line'>    UITouch *touch = [touches anyObject];
</span><span class='line'>    CGPoint location = [touch locationInView:self];
</span><span class='line'>    
</span><span class='line'>    //获取每一行
</span><span class='line'>    CFArrayRef lines = CTFrameGetLines(ctFrame);
</span><span class='line'>    CGPoint origins[CFArrayGetCount(lines)];
</span><span class='line'>    //获取每行的原点坐标
</span><span class='line'>    CTFrameGetLineOrigins(ctFrame, CFRangeMake(0, 0), origins);
</span><span class='line'>    CTLineRef line = NULL;
</span><span class='line'>    CGPoint lineOrigin = CGPointZero;
</span><span class='line'>    for (int i= 0; i &lt; CFArrayGetCount(lines); i++){
</span><span class='line'>        CGPoint origin = origins[i];
</span><span class='line'>        CGPathRef path = CTFrameGetPath(ctFrame);
</span><span class='line'>        //获取整个CTFrame的大小
</span><span class='line'>        CGRect rect = CGPathGetBoundingBox(path);
</span><span class='line'>        //坐标转换，把每行的原点坐标转换为uiview的坐标体系
</span><span class='line'>        CGFloat y = rect.origin.y + rect.size.height - origin.y;
</span><span class='line'>        //判断点击的位置处于那一行范围内
</span><span class='line'>        if ((location.y &lt;= y) && (location.x &gt;= origin.x)){
</span><span class='line'>            line = CFArrayGetValueAtIndex(lines, i);
</span><span class='line'>            lineOrigin = origin;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    location.x -= lineOrigin.x;
</span><span class='line'>    //获取点击位置所处的字符位置，就是相当于点击了第几个字符
</span><span class='line'>    CFIndex index = CTLineGetStringIndexForPosition(line, location)-1;//index从0开始
</span><span class='line'>    UIAlertView* alert = [[UIAlertView alloc]initWithTitle:@"提示" message:[NSString stringWithFormat:@"点击了第 %d 个字符！！",(int)index] delegate:self cancelButtonTitle:@"ok" otherButtonTitles:nil, nil];
</span><span class='line'>    [alert show];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void)dealloc{
</span><span class='line'>    [super dealloc];
</span><span class='line'>    CFRelease(ctFrame);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark CTRunDelegate Callbacks
</span><span class='line'>CGFloat GetAscentCallback( void *refCon ){
</span><span class='line'>    NSString *imageName = (NSString *)refCon;
</span><span class='line'>    return [UIImage imageNamed:imageName].size.height;
</span><span class='line'>}
</span><span class='line'>CGFloat GetDescentCallback(void *refCon){
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>CGFloat GetWidthCallback(void *refCon){
</span><span class='line'>    NSString *imageName = (NSString *)refCon;
</span><span class='line'>    return [UIImage imageNamed:imageName].size.width;
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>运行结果
<img src="http://andyfightting.github.io/myimg/ios/coreResult.png" alt="image" /></p>

<h3>*TextKit</h3>

<p>由于用CoreText是用绘图方式实现图文混排，复杂难用。所以在iOS7新推出了新的文字排版技术 &ndash; TextKit。使用TextKit可以很方便的实现富文本、表情混排和图文混排等效果。它是UIKit framework中定义的一组用于提供高性能的排版、布局和展示文字的类和协议，比如展示特别的字间距、行间距、断行规则。从上面图2可知，它是基于CoreText的，且UILabel,UITextField,UITextView又都是基于TextKit的。</p>

<pre><code>UILabel* label = [[UILabel alloc]initWithFrame:self.view.bounds];
label.text = @"少年不识愁滋味，爱上层楼。爱上层楼。为赋新词强说愁。而今识尽愁滋味，欲说还休。欲说还休。却道天凉好个秋。";
label.numberOfLines = 0;
label.userInteractionEnabled = YES;
[self.view addSubview:label];

NSMutableAttributedString * attributeString = [label.attributedText mutableCopy];
[attributeString addAttribute:NSForegroundColorAttributeName value:[UIColor redColor] range:NSMakeRange(0, 10)];//设置颜色
[attributeString addAttribute:NSFontAttributeName value:[UIFont systemFontOfSize:25] range:NSMakeRange(0, 5)];//设置字体
[attributeString addAttribute:NSUnderlineStyleAttributeName value:@(NSUnderlineStyleSingle) range:NSMakeRange(0, 15)];//设置下划线
[attributeString addAttribute:NSStrokeWidthAttributeName value:@(2) range:NSMakeRange(0, 3)];//设置空心字

//插入图片1
UIImage * image1 = [UIImage imageNamed:@"fengye.png"];
NSTextAttachment * attachment1 = [[NSTextAttachment alloc] init];
attachment1.bounds = CGRectMake(0, 0, 60, 60);
attachment1.image = image1;
NSAttributedString * attachStr1 = [NSAttributedString attributedStringWithAttachment:attachment1];
[attributeString insertAttributedString:attachStr1 atIndex:1];

//插入图片2
UIImage * image2 = [UIImage imageNamed:@"fengye.png"];
NSTextAttachment * attachment2 = [[NSTextAttachment alloc] init];
attachment2.bounds = CGRectMake(0, 0, 30, 30);
attachment2.image = image2;
NSAttributedString * attachStr2 = [NSAttributedString attributedStringWithAttachment:attachment2];
[attributeString insertAttributedString:attachStr2 atIndex:5];

label.attributedText = [attributeString copy];

//    TextView 通过如下可以设置环绕图片的文字
//    UIBezierPath * path = [UIBezierPath bezierPathWithRect:rect];
//    textView.textContainer.exclusionPaths = @[path];
</code></pre>

<p><img src="http://andyfightting.github.io/myimg/ios/textkit1.png" alt="image" /></p>

<pre><code> NSAttributedString属性key的说明
 NSFontAttributeName                设置字体属性，默认值：字体：Helvetica(Neue) 字号：12
 NSForegroundColorAttributeName     设置字体颜色，取值为 UIColor对象，默认值为黑色
 NSBackgroundColorAttributeName     设置字体所在区域背景颜色，取值为 UIColor对象，默认值为nil, 透明色
 NSLigatureAttributeName            设置连体属性，取值为NSNumber 对象(整数)，0 表示没有连体字符，1 表示使用默认的连体字符
 NSKernAttributeName                设定字符间距，取值为 NSNumber 对象（整数），正值间距加宽，负值间距变窄
 NSStrikethroughStyleAttributeName  设置删除线，取值为 NSNumber 对象（整数）
 NSStrikethroughColorAttributeName  设置删除线颜色，取值为 UIColor 对象，默认值为黑色
 NSUnderlineStyleAttributeName      设置下划线，取值为 NSNumber 对象（整数），枚举常量 NSUnderlineStyle中的值，与删除线类似
 NSUnderlineColorAttributeName      设置下划线颜色，取值为 UIColor 对象，默认值为黑色
 NSStrokeWidthAttributeName         设置笔画宽度，取值为 NSNumber 对象（整数），负值填充效果，正值中空效果
 NSStrokeColorAttributeName         填充部分颜色，不是字体颜色，取值为 UIColor 对象
 NSShadowAttributeName              设置阴影属性，取值为 NSShadow 对象
 NSTextEffectAttributeName          设置文本特殊效果，取值为 NSString 对象，目前只有图版印刷效果可用：
 NSBaselineOffsetAttributeName      设置基线偏移值，取值为 NSNumber （float）,正值上偏，负值下偏
 NSObliquenessAttributeName         设置字形倾斜度，取值为 NSNumber （float）,正值右倾，负值左倾
 NSExpansionAttributeName           设置文本横向拉伸属性，取值为 NSNumber （float）,正值横向拉伸文本，负值横向压缩文本
 NSWritingDirectionAttributeName    设置文字书写方向，从左向右书写或者从右向左书写
 NSVerticalGlyphFormAttributeName   设置文字排版方向，取值为 NSNumber 对象(整数)，0 表示横排文本，1 表示竖排文本
 NSLinkAttributeName                设置链接属性，点击后调用浏览器打开指定URL地址
 NSAttachmentAttributeName          设置文本附件,取值为NSTextAttachment对象,常用于文字图片混排
 NSParagraphStyleAttributeName      设置文本段落排版格式，取值为 NSParagraphStyle 对象
</code></pre>
]]></content>
  </entry>
  
</feed>
